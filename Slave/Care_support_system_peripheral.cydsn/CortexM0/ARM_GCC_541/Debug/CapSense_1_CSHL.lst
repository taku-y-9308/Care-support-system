ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_1_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	CapSense_1_rawFilterData1,2,4
  20              		.global	CapSense_1_sensorBaseline
  21              		.bss
  22              		.align	2
  23              		.type	CapSense_1_sensorBaseline, %object
  24              		.size	CapSense_1_sensorBaseline, 2
  25              	CapSense_1_sensorBaseline:
  26 0000 0000     		.space	2
  27              		.global	CapSense_1_sensorBaselineLow
  28 0002 0000     		.align	2
  29              		.type	CapSense_1_sensorBaselineLow, %object
  30              		.size	CapSense_1_sensorBaselineLow, 1
  31              	CapSense_1_sensorBaselineLow:
  32 0004 00       		.space	1
  33              		.global	CapSense_1_sensorSignal
  34 0005 000000   		.align	2
  35              		.type	CapSense_1_sensorSignal, %object
  36              		.size	CapSense_1_sensorSignal, 2
  37              	CapSense_1_sensorSignal:
  38 0008 0000     		.space	2
  39              		.global	CapSense_1_sensorOnMask
  40 000a 0000     		.align	2
  41              		.type	CapSense_1_sensorOnMask, %object
  42              		.size	CapSense_1_sensorOnMask, 1
  43              	CapSense_1_sensorOnMask:
  44 000c 00       		.space	1
  45              		.comm	CapSense_1_lowBaselineResetCnt,1,4
  46              		.global	CapSense_1_lowBaselineReset
  47              		.data
  48              		.align	2
  49              		.type	CapSense_1_lowBaselineReset, %object
  50              		.size	CapSense_1_lowBaselineReset, 1
  51              	CapSense_1_lowBaselineReset:
  52 0000 05       		.byte	5
  53              		.global	CapSense_1_enableRawFilters
  54              		.type	CapSense_1_enableRawFilters, %object
  55              		.size	CapSense_1_enableRawFilters, 1
  56              	CapSense_1_enableRawFilters:
  57 0001 01       		.byte	1
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 2


  58              		.global	CapSense_1_fingerThreshold
  59              		.section	.rodata
  60              		.align	2
  61              		.type	CapSense_1_fingerThreshold, %object
  62              		.size	CapSense_1_fingerThreshold, 2
  63              	CapSense_1_fingerThreshold:
  64 0000 6400     		.short	100
  65              		.global	CapSense_1_noiseThreshold
  66 0002 0000     		.align	2
  67              		.type	CapSense_1_noiseThreshold, %object
  68              		.size	CapSense_1_noiseThreshold, 2
  69              	CapSense_1_noiseThreshold:
  70 0004 1400     		.short	20
  71              		.global	CapSense_1_hysteresis
  72 0006 0000     		.align	2
  73              		.type	CapSense_1_hysteresis, %object
  74              		.size	CapSense_1_hysteresis, 2
  75              	CapSense_1_hysteresis:
  76 0008 0A00     		.short	10
  77              		.global	CapSense_1_debounce
  78 000a 0000     		.align	2
  79              		.type	CapSense_1_debounce, %object
  80              		.size	CapSense_1_debounce, 1
  81              	CapSense_1_debounce:
  82 000c 05       		.byte	5
  83              		.bss
  84 000d 000000   		.align	2
  85              	CapSense_1_debounceCounter:
  86 0010 0000     		.space	2
  87              		.global	CapSense_1_rawDataIndex
  88              		.section	.rodata
  89 000d 000000   		.align	2
  90              		.type	CapSense_1_rawDataIndex, %object
  91              		.size	CapSense_1_rawDataIndex, 1
  92              	CapSense_1_rawDataIndex:
  93 0010 00       		.space	1
  94              		.global	CapSense_1_numberOfSensors
  95 0011 000000   		.align	2
  96              		.type	CapSense_1_numberOfSensors, %object
  97              		.size	CapSense_1_numberOfSensors, 1
  98              	CapSense_1_numberOfSensors:
  99 0014 01       		.byte	1
 100              		.section	.text.CapSense_1_BaseInit,"ax",%progbits
 101              		.align	2
 102              		.global	CapSense_1_BaseInit
 103              		.code	16
 104              		.thumb_func
 105              		.type	CapSense_1_BaseInit, %function
 106              	CapSense_1_BaseInit:
 107              	.LFB34:
 108              		.file 1 "Generated_Source\\PSoC4\\CapSense_1_CSHL.c"
   1:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * File Name: CapSense_1_CSHL.c
   3:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Version 2.60
   4:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
   5:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Description:
   6:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 3


   7:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
   9:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Note:
  10:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
  11:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Copyright 2013-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  18:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #include "CapSense_1_CSHL.h"
  19:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #include "CapSense_1_PVT.h"
  20:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  21:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /* SmartSense functions */
  22:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
  23:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     extern void CapSense_1_UpdateThresholds(uint32 sensor);
  24:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
  25:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  26:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /* Storage of filters data */
  27:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) || \
  28:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)) )
  29:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  30:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_rawFilterData1[CapSense_1_TOTAL_SENSOR_COUNT];
  31:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_rawFilterData2[CapSense_1_TOTAL_SENSOR_COUNT];
  32:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  33:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #elif ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER))   || \
  34:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER))   || \
  35:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)) || \
  36:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER))   || \
  37:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER)) )
  38:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  39:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_rawFilterData1[CapSense_1_TOTAL_SENSOR_COUNT];
  40:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif  /* ( (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER) || \
  41:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         *    (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER) )
  42:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         */
  43:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  44:Generated_Source\PSoC4/CapSense_1_CSHL.c **** extern uint16 CapSense_1_sensorRaw[CapSense_1_TOTAL_SENSOR_COUNT];
  45:Generated_Source\PSoC4/CapSense_1_CSHL.c **** extern uint8 CapSense_1_sensorEnableMask[CapSense_1_TOTAL_SENSOR_MASK];
  46:Generated_Source\PSoC4/CapSense_1_CSHL.c **** extern const uint8 CapSense_1_widgetNumber[CapSense_1_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  48:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
  49:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     extern uint32 CapSense_1_widgetResolution[CapSense_1_RESOLUTIONS_TBL_SIZE];
  50:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
  51:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  52:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_sensorBaseline[CapSense_1_TOTAL_SENSOR_COUNT] = {0u};
  53:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_sensorBaselineLow[CapSense_1_TOTAL_SENSOR_COUNT] = {0u};
  54:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_sensorSignal[CapSense_1_TOTAL_SENSOR_COUNT] = {0u};
  55:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_sensorOnMask[CapSense_1_TOTAL_SENSOR_MASK] = {0u};
  56:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  57:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_lowBaselineResetCnt[CapSense_1_TOTAL_SENSOR_COUNT];
  58:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_lowBaselineReset[CapSense_1_TOTAL_SENSOR_COUNT] = {
  59:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     5u, 
  60:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  61:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  62:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  63:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 4


  64:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
  65:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     extern CapSense_1_CONFIG_TYPE_P4_v2_60 CapSense_1_config;
  66:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif  /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
  67:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  68:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_RAW_FILTER_MASK != 0u)
  69:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_enableRawFilters = CapSense_1_RAW_FILTERS_ENABLED;
  70:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif  /* (CapSense_1_RAW_FILTER_MASK != 0u) */
  71:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  72:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /* Generated by Customizer */
  73:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint16 CapSense_1_fingerThreshold[] = {
  74:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     100u, 
  75:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  76:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  77:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint16 CapSense_1_noiseThreshold[] = {
  78:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     20u, 
  79:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  80:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  81:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint16 CapSense_1_hysteresis[] = {
  82:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     10u, 
  83:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  84:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  85:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_debounce[] = {
  86:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     5u, 
  87:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  88:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  89:Generated_Source\PSoC4/CapSense_1_CSHL.c **** static uint8 CapSense_1_debounceCounter[] = {
  90:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     0u, 0u, 
  91:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  92:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  93:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_rawDataIndex[] = {
  94:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     0u, /* Button0__BTN */
  95:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  96:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  97:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_numberOfSensors[] = {
  98:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* Button0__BTN */
  99:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
 100:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 101:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 102:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 103:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 104:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 105:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_BaseInit
 106:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 107:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 108:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 109:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Loads the CapSense_1_sensorBaseline[sensor] array element with an
 110:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  initial value which is equal to the raw count value.
 111:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Resets to zero CapSense_1_sensorBaselineLow[sensor] and
 112:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[sensor] array element.
 113:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Loads the CapSense_1_rawFilterData2[sensor] and
 114:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData2[sensor] array element with an
 115:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  initial value which is equal to the raw count value if the raw data filter is enabled.
 116:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 117:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 118:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 119:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 120:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 5


 121:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 122:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 123:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 124:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[]    - used to store the baseline value.
 125:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaselineLow[] - used to store the fraction byte of
 126:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the baseline value.
 127:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[]      - used to store a difference between
 128:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the current value of raw data and the previous value of the baseline.
 129:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData1[]    - used to store a previous sample of
 130:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  any enabled raw data filter.
 131:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData2[]    - used to store before a previous sample
 132:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  of the enabled raw data filter. Required only for median or average filters.
 133:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 134:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 135:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 136:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 137:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 138:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_BaseInit(uint32 sensor)
 139:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 109              		.loc 1 139 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 16
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 84B0     		sub	sp, sp, #16
 118              		.cfi_def_cfa_offset 24
 119 0004 00AF     		add	r7, sp, #0
 120              		.cfi_def_cfa_register 7
 121 0006 7860     		str	r0, [r7, #4]
 140:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if ((CapSense_1_TOTAL_BUTTONS_COUNT) || (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT) || \
 141:Generated_Source\PSoC4/CapSense_1_CSHL.c ****          (CapSense_1_TOTAL_GENERICS_COUNT))
 142:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 widget = CapSense_1_widgetNumber[sensor];
 122              		.loc 1 142 0
 123 0008 0F23     		movs	r3, #15
 124 000a FB18     		adds	r3, r7, r3
 125 000c 1449     		ldr	r1, .L2
 126 000e 7A68     		ldr	r2, [r7, #4]
 127 0010 8A18     		adds	r2, r1, r2
 128 0012 1278     		ldrb	r2, [r2]
 129 0014 1A70     		strb	r2, [r3]
 143:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* ((CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT)) 
 144:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 145:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT)
 146:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 debounceIndex;
 147:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT) */
 148:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 149:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 150:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 151:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(widget < CapSense_1_END_OF_WIDGETS_INDEX)
 152:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 153:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 154:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 155:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Initialize Baseline */
 156:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorBaseline[sensor] = CapSense_1_sensorRaw[sensor];
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 6


 130              		.loc 1 156 0
 131 0016 134B     		ldr	r3, .L2+4
 132 0018 7A68     		ldr	r2, [r7, #4]
 133 001a 5200     		lsls	r2, r2, #1
 134 001c D15A     		ldrh	r1, [r2, r3]
 135 001e 124B     		ldr	r3, .L2+8
 136 0020 7A68     		ldr	r2, [r7, #4]
 137 0022 5200     		lsls	r2, r2, #1
 138 0024 D152     		strh	r1, [r2, r3]
 157:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorBaselineLow[sensor] = 0u;
 139              		.loc 1 157 0
 140 0026 114A     		ldr	r2, .L2+12
 141 0028 7B68     		ldr	r3, [r7, #4]
 142 002a D318     		adds	r3, r2, r3
 143 002c 0022     		movs	r2, #0
 144 002e 1A70     		strb	r2, [r3]
 158:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorSignal[sensor] = 0u;
 145              		.loc 1 158 0
 146 0030 0F4B     		ldr	r3, .L2+16
 147 0032 7A68     		ldr	r2, [r7, #4]
 148 0034 5200     		lsls	r2, r2, #1
 149 0036 0021     		movs	r1, #0
 150 0038 D152     		strh	r1, [r2, r3]
 159:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 160:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_debounceCounter[widget] =  CapSense_1_debounce[widget];
 151              		.loc 1 160 0
 152 003a 0F23     		movs	r3, #15
 153 003c FB18     		adds	r3, r7, r3
 154 003e 1B78     		ldrb	r3, [r3]
 155 0040 0521     		movs	r1, #5
 156 0042 0C4A     		ldr	r2, .L2+20
 157 0044 D154     		strb	r1, [r2, r3]
 161:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 162:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 163:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if ((0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) ||\
 164:Generated_Source\PSoC4/CapSense_1_CSHL.c ****          (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)))
 165:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 166:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_rawFilterData1[sensor] = CapSense_1_sensorRaw[sensor];
 167:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_rawFilterData2[sensor] = CapSense_1_sensorRaw[sensor];
 168:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 169:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #elif ((CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER) ||\
 170:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER) ||\
 171:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER) ||\
 172:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER) ||\
 173:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER))
 174:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 175:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_rawFilterData1[sensor] = CapSense_1_sensorRaw[sensor];
 158              		.loc 1 175 0
 159 0046 074B     		ldr	r3, .L2+4
 160 0048 7A68     		ldr	r2, [r7, #4]
 161 004a 5200     		lsls	r2, r2, #1
 162 004c D15A     		ldrh	r1, [r2, r3]
 163 004e 0A4B     		ldr	r3, .L2+24
 164 0050 7A68     		ldr	r2, [r7, #4]
 165 0052 5200     		lsls	r2, r2, #1
 166 0054 D152     		strh	r1, [r2, r3]
 176:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 7


 177:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #else
 178:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* No Raw filters */
 179:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* ((CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER) || \
 180:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             *   (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER))
 181:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             */
 182:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 183:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 184:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 185:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 186:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 187:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 167              		.loc 1 187 0
 168 0056 C046     		nop
 169 0058 BD46     		mov	sp, r7
 170 005a 04B0     		add	sp, sp, #16
 171              		@ sp needed
 172 005c 80BD     		pop	{r7, pc}
 173              	.L3:
 174 005e C046     		.align	2
 175              	.L2:
 176 0060 00000000 		.word	CapSense_1_widgetNumber
 177 0064 00000000 		.word	CapSense_1_sensorRaw
 178 0068 00000000 		.word	CapSense_1_sensorBaseline
 179 006c 00000000 		.word	CapSense_1_sensorBaselineLow
 180 0070 00000000 		.word	CapSense_1_sensorSignal
 181 0074 10000000 		.word	CapSense_1_debounceCounter
 182 0078 00000000 		.word	CapSense_1_rawFilterData1
 183              		.cfi_endproc
 184              	.LFE34:
 185              		.size	CapSense_1_BaseInit, .-CapSense_1_BaseInit
 186              		.section	.text.CapSense_1_InitializeSensorBaseline,"ax",%progbits
 187              		.align	2
 188              		.global	CapSense_1_InitializeSensorBaseline
 189              		.code	16
 190              		.thumb_func
 191              		.type	CapSense_1_InitializeSensorBaseline, %function
 192              	CapSense_1_InitializeSensorBaseline:
 193              	.LFB35:
 188:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 189:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 190:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 191:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_InitializeSensorBaseline
 192:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 193:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 194:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 195:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Loads the CapSense_1_sensorBaseline[sensor] array element with an
 196:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or a pair
 197:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the
 198:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if
 199:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  enabled.
 200:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 201:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 202:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 203:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 204:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 205:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 206:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 8


 207:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 208:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 209:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 210:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 211:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 212:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 213:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 214:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_InitializeSensorBaseline(uint32 sensor)
 215:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 194              		.loc 1 215 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 8
 197              		@ frame_needed = 1, uses_anonymous_args = 0
 198 0000 80B5     		push	{r7, lr}
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 82B0     		sub	sp, sp, #8
 203              		.cfi_def_cfa_offset 16
 204 0004 00AF     		add	r7, sp, #0
 205              		.cfi_def_cfa_register 7
 206 0006 7860     		str	r0, [r7, #4]
 216:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Scan sensor */
 217:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_ScanSensor(sensor);
 207              		.loc 1 217 0
 208 0008 7B68     		ldr	r3, [r7, #4]
 209 000a 1800     		movs	r0, r3
 210 000c FFF7FEFF 		bl	CapSense_1_ScanSensor
 218:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(CapSense_1_IsBusy() != 0u)
 211              		.loc 1 218 0
 212 0010 C046     		nop
 213              	.L5:
 214              		.loc 1 218 0 is_stmt 0 discriminator 1
 215 0012 FFF7FEFF 		bl	CapSense_1_IsBusy
 216 0016 031E     		subs	r3, r0, #0
 217 0018 FBD1     		bne	.L5
 219:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 220:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Wait while sensor is busy */
 221:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 222:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 223:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Initialize Baseline, Signal and debounce counters */
 224:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_BaseInit(sensor);
 218              		.loc 1 224 0 is_stmt 1
 219 001a 7B68     		ldr	r3, [r7, #4]
 220 001c 1800     		movs	r0, r3
 221 001e FFF7FEFF 		bl	CapSense_1_BaseInit
 225:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 222              		.loc 1 225 0
 223 0022 C046     		nop
 224 0024 BD46     		mov	sp, r7
 225 0026 02B0     		add	sp, sp, #8
 226              		@ sp needed
 227 0028 80BD     		pop	{r7, pc}
 228              		.cfi_endproc
 229              	.LFE35:
 230              		.size	CapSense_1_InitializeSensorBaseline, .-CapSense_1_InitializeSensorBaseline
 231 002a C046     		.section	.text.CapSense_1_InitializeAllBaselines,"ax",%progbits
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 9


 232              		.align	2
 233              		.global	CapSense_1_InitializeAllBaselines
 234              		.code	16
 235              		.thumb_func
 236              		.type	CapSense_1_InitializeAllBaselines, %function
 237              	CapSense_1_InitializeAllBaselines:
 238              	.LFB36:
 226:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 227:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 228:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 229:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_InitializeAllBaselines
 230:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 231:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 232:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 233:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Uses the CapSense_1_InitializeSensorBaseline function to load the
 234:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[] array with an initial values by scanning
 235:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  all the sensors. The raw count values are copied into the baseline array for
 236:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  all the sensors. The raw data filters are initialized if enabled.
 237:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 238:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 239:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 240:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 241:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 242:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 243:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 244:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 245:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 246:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 247:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 248:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 249:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 250:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 251:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_InitializeAllBaselines(void)
 252:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 239              		.loc 1 252 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 8
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 247 0002 82B0     		sub	sp, sp, #8
 248              		.cfi_def_cfa_offset 16
 249 0004 00AF     		add	r7, sp, #0
 250              		.cfi_def_cfa_register 7
 253:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 254:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 255:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_SCANSLOT_COUNT; i++)
 251              		.loc 1 255 0
 252 0006 0023     		movs	r3, #0
 253 0008 7B60     		str	r3, [r7, #4]
 254 000a 06E0     		b	.L7
 255              	.L8:
 256:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 257:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_InitializeSensorBaseline(i);
 256              		.loc 1 257 0 discriminator 3
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 10


 257 000c 7B68     		ldr	r3, [r7, #4]
 258 000e 1800     		movs	r0, r3
 259 0010 FFF7FEFF 		bl	CapSense_1_InitializeSensorBaseline
 255:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 260              		.loc 1 255 0 discriminator 3
 261 0014 7B68     		ldr	r3, [r7, #4]
 262 0016 0133     		adds	r3, r3, #1
 263 0018 7B60     		str	r3, [r7, #4]
 264              	.L7:
 255:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 265              		.loc 1 255 0 is_stmt 0 discriminator 1
 266 001a 7B68     		ldr	r3, [r7, #4]
 267 001c 002B     		cmp	r3, #0
 268 001e F5D0     		beq	.L8
 258:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 259:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 269              		.loc 1 259 0 is_stmt 1
 270 0020 C046     		nop
 271 0022 BD46     		mov	sp, r7
 272 0024 02B0     		add	sp, sp, #8
 273              		@ sp needed
 274 0026 80BD     		pop	{r7, pc}
 275              		.cfi_endproc
 276              	.LFE36:
 277              		.size	CapSense_1_InitializeAllBaselines, .-CapSense_1_InitializeAllBaselines
 278              		.section	.text.CapSense_1_InitializeEnabledBaselines,"ax",%progbits
 279              		.align	2
 280              		.global	CapSense_1_InitializeEnabledBaselines
 281              		.code	16
 282              		.thumb_func
 283              		.type	CapSense_1_InitializeEnabledBaselines, %function
 284              	CapSense_1_InitializeEnabledBaselines:
 285              	.LFB37:
 260:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 261:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 262:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 263:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_InitializeEnabledBaselines
 264:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 265:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 266:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 267:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Scans all the enabled widgets and the raw count values are copied into the
 268:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  baseline array for all the sensors enabled in the scanning process. The baselines
 269:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  are initialized with zero values for sensors disabled from the scanning process.
 270:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  The raw data filters are initialized if enabled.
 271:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 272:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 273:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 274:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 275:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 276:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 277:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 278:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 279:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorRaw[] - used to store the sensors raw data.
 280:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[ ] - used to store bit masks of the enabled sensors.
 281:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 282:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 283:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 11


 284:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 285:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 286:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_InitializeEnabledBaselines(void)
 287:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 286              		.loc 1 287 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 8
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290 0000 80B5     		push	{r7, lr}
 291              		.cfi_def_cfa_offset 8
 292              		.cfi_offset 7, -8
 293              		.cfi_offset 14, -4
 294 0002 82B0     		sub	sp, sp, #8
 295              		.cfi_def_cfa_offset 16
 296 0004 00AF     		add	r7, sp, #0
 297              		.cfi_def_cfa_register 7
 288:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 289:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 isSensorEnabled;
 290:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 291:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_ScanEnabledWidgets();
 298              		.loc 1 291 0
 299 0006 FFF7FEFF 		bl	CapSense_1_ScanEnabledWidgets
 292:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(CapSense_1_IsBusy() != 0u)
 300              		.loc 1 292 0
 301 000a C046     		nop
 302              	.L10:
 303              		.loc 1 292 0 is_stmt 0 discriminator 1
 304 000c FFF7FEFF 		bl	CapSense_1_IsBusy
 305 0010 031E     		subs	r3, r0, #0
 306 0012 FBD1     		bne	.L10
 293:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 294:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Wait while sensor is busy */
 295:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 296:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 297:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_SENSOR_COUNT; i++)
 307              		.loc 1 297 0 is_stmt 1
 308 0014 0023     		movs	r3, #0
 309 0016 7B60     		str	r3, [r7, #4]
 310 0018 11E0     		b	.L11
 311              	.L13:
 298:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 299:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         isSensorEnabled = CapSense_1_GetBitValue(CapSense_1_sensorEnableMask, i);
 312              		.loc 1 299 0
 313 001a 7A68     		ldr	r2, [r7, #4]
 314 001c 0B4B     		ldr	r3, .L14
 315 001e 1100     		movs	r1, r2
 316 0020 1800     		movs	r0, r3
 317 0022 FFF7FEFF 		bl	CapSense_1_GetBitValue
 318 0026 0300     		movs	r3, r0
 319 0028 3B60     		str	r3, [r7]
 300:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 301:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 302:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(isSensorEnabled != 0u)
 320              		.loc 1 302 0
 321 002a 3B68     		ldr	r3, [r7]
 322 002c 002B     		cmp	r3, #0
 323 002e 03D0     		beq	.L12
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 12


 303:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 304:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Initialize baselines */
 305:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_BaseInit(i);
 324              		.loc 1 305 0
 325 0030 7B68     		ldr	r3, [r7, #4]
 326 0032 1800     		movs	r0, r3
 327 0034 FFF7FEFF 		bl	CapSense_1_BaseInit
 328              	.L12:
 297:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 329              		.loc 1 297 0 discriminator 2
 330 0038 7B68     		ldr	r3, [r7, #4]
 331 003a 0133     		adds	r3, r3, #1
 332 003c 7B60     		str	r3, [r7, #4]
 333              	.L11:
 297:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 334              		.loc 1 297 0 is_stmt 0 discriminator 1
 335 003e 7B68     		ldr	r3, [r7, #4]
 336 0040 002B     		cmp	r3, #0
 337 0042 EAD0     		beq	.L13
 306:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 307:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 308:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 338              		.loc 1 308 0 is_stmt 1
 339 0044 C046     		nop
 340 0046 BD46     		mov	sp, r7
 341 0048 02B0     		add	sp, sp, #8
 342              		@ sp needed
 343 004a 80BD     		pop	{r7, pc}
 344              	.L15:
 345              		.align	2
 346              	.L14:
 347 004c 00000000 		.word	CapSense_1_sensorEnableMask
 348              		.cfi_endproc
 349              	.LFE37:
 350              		.size	CapSense_1_InitializeEnabledBaselines, .-CapSense_1_InitializeEnabledBaselines
 351              		.section	.text.CapSense_1_UpdateBaselineNoThreshold,"ax",%progbits
 352              		.align	2
 353              		.global	CapSense_1_UpdateBaselineNoThreshold
 354              		.code	16
 355              		.thumb_func
 356              		.type	CapSense_1_UpdateBaselineNoThreshold, %function
 357              	CapSense_1_UpdateBaselineNoThreshold:
 358              	.LFB38:
 309:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 310:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 311:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 312:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateBaselineNoThreshold
 313:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 314:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 315:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 316:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Updates the CapSense_1_sensorBaseline[sensor] array element using the
 317:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by
 318:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 319:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  it in CapSense_1_sensorSignal[sensor].
 320:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold.
 321:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating; baseline is loaded
 322:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  with a raw count value if a signal is greater than zero and if signal is less
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 13


 323:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  than noise threshold.
 324:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline
 325:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  calculation.
 326:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 327:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API does not update the thresholds in the Smartsense Mode.
 328:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 329:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 330:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 331:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 332:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 333:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 334:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 335:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 336:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumber[]  - stores widget numbers.
 337:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[]    - used to store baseline value.
 338:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaselineLow[] - used to store fraction byte of
 339:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  baseline value.
 340:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[]      - used to store difference between
 341:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  current value of raw data and previous value of baseline.
 342:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData1[]    - used to store previous sample of
 343:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  any enabled raw data filter.
 344:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData2[]    - used to store before previous sample
 345:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 346:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 347:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 348:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 349:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 350:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 351:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_UpdateBaselineNoThreshold(uint32 sensor)
 352:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 359              		.loc 1 352 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 24
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 90B5     		push	{r4, r7, lr}
 364              		.cfi_def_cfa_offset 12
 365              		.cfi_offset 4, -12
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 14, -4
 368 0002 87B0     		sub	sp, sp, #28
 369              		.cfi_def_cfa_offset 40
 370 0004 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
 372 0006 7860     		str	r0, [r7, #4]
 353:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 calc;
 354:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 sign;
 355:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 tempRaw;
 356:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 filteredRawData;
 357:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 widget = CapSense_1_widgetNumber[sensor];
 373              		.loc 1 357 0
 374 0008 0F23     		movs	r3, #15
 375 000a FB18     		adds	r3, r7, r3
 376 000c 6A49     		ldr	r1, .L27
 377 000e 7A68     		ldr	r2, [r7, #4]
 378 0010 8A18     		adds	r2, r1, r2
 379 0012 1278     		ldrb	r2, [r2]
 380 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 14


 358:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 noiseThreshold;
 359:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 360:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 361:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 362:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(widget < CapSense_1_END_OF_WIDGETS_INDEX)
 363:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 364:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 365:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 366:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     noiseThreshold = CapSense_1_noiseThreshold[widget];
 381              		.loc 1 366 0
 382 0016 0C23     		movs	r3, #12
 383 0018 FB18     		adds	r3, r7, r3
 384 001a 1422     		movs	r2, #20
 385 001c 1A80     		strh	r2, [r3]
 367:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     filteredRawData = CapSense_1_sensorRaw[sensor];
 386              		.loc 1 367 0
 387 001e 1023     		movs	r3, #16
 388 0020 FB18     		adds	r3, r7, r3
 389 0022 664A     		ldr	r2, .L27+4
 390 0024 7968     		ldr	r1, [r7, #4]
 391 0026 4900     		lsls	r1, r1, #1
 392 0028 8A5A     		ldrh	r2, [r1, r2]
 393 002a 1A80     		strh	r2, [r3]
 368:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 369:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_RAW_FILTER_MASK != 0u)
 370:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if(CapSense_1_enableRawFilters != 0u)
 394              		.loc 1 370 0
 395 002c 644B     		ldr	r3, .L27+8
 396 002e 1B78     		ldrb	r3, [r3]
 397 0030 002B     		cmp	r3, #0
 398 0032 15D0     		beq	.L17
 371:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 372:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)
 373:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             tempRaw = filteredRawData;
 374:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_MedianFilter(filteredRawData, CapSense_1_rawFilterData1[se
 375:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                             CapSense_1_rawFilterData2[sensor]);
 376:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData2[sensor] = CapSense_1_rawFilterData1[sensor];
 377:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = tempRaw;
 378:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 379:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)
 380:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             tempRaw = filteredRawData;
 381:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_AveragingFilter(filteredRawData, CapSense_1_rawFilterData1
 382:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                CapSense_1_rawFilterData2[sensor]);
 383:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData2[sensor] = CapSense_1_rawFilterData1[sensor];
 384:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = tempRaw;
 385:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 386:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER)
 387:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR2Filter(filteredRawData, CapSense_1_rawFilterData1[sens
 388:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 389:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 390:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER)
 391:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR4Filter(filteredRawData, CapSense_1_rawFilterData1[sens
 399              		.loc 1 391 0
 400 0034 634B     		ldr	r3, .L27+12
 401 0036 7A68     		ldr	r2, [r7, #4]
 402 0038 5200     		lsls	r2, r2, #1
 403 003a D25A     		ldrh	r2, [r2, r3]
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 15


 404 003c 1023     		movs	r3, #16
 405 003e FC18     		adds	r4, r7, r3
 406 0040 1023     		movs	r3, #16
 407 0042 FB18     		adds	r3, r7, r3
 408 0044 1B88     		ldrh	r3, [r3]
 409 0046 1100     		movs	r1, r2
 410 0048 1800     		movs	r0, r3
 411 004a FFF7FEFF 		bl	CapSense_1_IIR4Filter
 412 004e 0300     		movs	r3, r0
 413 0050 2380     		strh	r3, [r4]
 392:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 414              		.loc 1 392 0
 415 0052 5C4B     		ldr	r3, .L27+12
 416 0054 7A68     		ldr	r2, [r7, #4]
 417 0056 5200     		lsls	r2, r2, #1
 418 0058 1021     		movs	r1, #16
 419 005a 7918     		adds	r1, r7, r1
 420 005c 0988     		ldrh	r1, [r1]
 421 005e D152     		strh	r1, [r2, r3]
 422              	.L17:
 393:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 394:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)
 395:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_JitterFilter(filteredRawData, CapSense_1_rawFilterData1[se
 396:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 397:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 398:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER)
 399:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR8Filter(filteredRawData, CapSense_1_rawFilterData1[sens
 400:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 401:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 402:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER)
 403:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR16Filter(filteredRawData, CapSense_1_rawFilterData1[sen
 404:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 405:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 406:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
 407:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* No Raw filters */
 408:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif  /* (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER) */
 409:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 410:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* (CapSense_1_RAW_FILTER_MASK != 0u) */
 411:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 412:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
 413:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         MeasureNoiseEnvelope_P4_v2_60(&CapSense_1_config, (uint8)sensor, CapSense_1_sensorRaw);
 414:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
 415:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 416:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Baseline calculation */
 417:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 418:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if(filteredRawData >= CapSense_1_sensorBaseline[sensor])
 423              		.loc 1 418 0
 424 0060 594B     		ldr	r3, .L27+16
 425 0062 7A68     		ldr	r2, [r7, #4]
 426 0064 5200     		lsls	r2, r2, #1
 427 0066 D35A     		ldrh	r3, [r2, r3]
 428 0068 1022     		movs	r2, #16
 429 006a BA18     		adds	r2, r7, r2
 430 006c 1288     		ldrh	r2, [r2]
 431 006e 9A42     		cmp	r2, r3
 432 0070 12D3     		bcc	.L18
 419:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 16


 420:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_lowBaselineResetCnt[sensor] = 0u;
 433              		.loc 1 420 0
 434 0072 564A     		ldr	r2, .L27+20
 435 0074 7B68     		ldr	r3, [r7, #4]
 436 0076 D318     		adds	r3, r2, r3
 437 0078 0022     		movs	r2, #0
 438 007a 1A70     		strb	r2, [r3]
 421:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tempRaw = filteredRawData - CapSense_1_sensorBaseline[sensor];
 439              		.loc 1 421 0
 440 007c 524B     		ldr	r3, .L27+16
 441 007e 7A68     		ldr	r2, [r7, #4]
 442 0080 5200     		lsls	r2, r2, #1
 443 0082 D25A     		ldrh	r2, [r2, r3]
 444 0084 1223     		movs	r3, #18
 445 0086 FB18     		adds	r3, r7, r3
 446 0088 1021     		movs	r1, #16
 447 008a 7918     		adds	r1, r7, r1
 448 008c 0988     		ldrh	r1, [r1]
 449 008e 8A1A     		subs	r2, r1, r2
 450 0090 1A80     		strh	r2, [r3]
 422:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         sign = 1u;    /* Positive difference - Calculate the Signal */
 451              		.loc 1 422 0
 452 0092 0123     		movs	r3, #1
 453 0094 7B61     		str	r3, [r7, #20]
 454 0096 0CE0     		b	.L19
 455              	.L18:
 423:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 424:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else
 425:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 426:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tempRaw = CapSense_1_sensorBaseline[sensor] - filteredRawData;
 456              		.loc 1 426 0
 457 0098 4B4B     		ldr	r3, .L27+16
 458 009a 7A68     		ldr	r2, [r7, #4]
 459 009c 5200     		lsls	r2, r2, #1
 460 009e D15A     		ldrh	r1, [r2, r3]
 461 00a0 1223     		movs	r3, #18
 462 00a2 FB18     		adds	r3, r7, r3
 463 00a4 1022     		movs	r2, #16
 464 00a6 BA18     		adds	r2, r7, r2
 465 00a8 1288     		ldrh	r2, [r2]
 466 00aa 8A1A     		subs	r2, r1, r2
 467 00ac 1A80     		strh	r2, [r3]
 427:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         sign = 0u;    /* Negative difference - Do NOT calculate the Signal */
 468              		.loc 1 427 0
 469 00ae 0023     		movs	r3, #0
 470 00b0 7B61     		str	r3, [r7, #20]
 471              	.L19:
 428:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 429:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 430:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 431:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if((sign == 0u) && (tempRaw > (uint16) CapSense_1_negativeNoiseThreshold[widget]))
 432:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #else
 433:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if((sign == 0u) && (tempRaw > (uint16) CapSense_1_NEGATIVE_NOISE_THRESHOLD))
 472              		.loc 1 433 0
 473 00b2 7B69     		ldr	r3, [r7, #20]
 474 00b4 002B     		cmp	r3, #0
 475 00b6 24D1     		bne	.L20
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 17


 476              		.loc 1 433 0 is_stmt 0 discriminator 1
 477 00b8 1223     		movs	r3, #18
 478 00ba FB18     		adds	r3, r7, r3
 479 00bc 1B88     		ldrh	r3, [r3]
 480 00be 142B     		cmp	r3, #20
 481 00c0 1FD9     		bls	.L20
 434:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
 435:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_lowBaselineResetCnt[sensor] >= CapSense_1_lowBaselineReset[sensor])
 482              		.loc 1 436 0 is_stmt 1
 483 00c2 424A     		ldr	r2, .L27+20
 484 00c4 7B68     		ldr	r3, [r7, #4]
 485 00c6 D318     		adds	r3, r2, r3
 486 00c8 1A78     		ldrb	r2, [r3]
 487 00ca 4149     		ldr	r1, .L27+24
 488 00cc 7B68     		ldr	r3, [r7, #4]
 489 00ce CB18     		adds	r3, r1, r3
 490 00d0 1B78     		ldrb	r3, [r3]
 491 00d2 9A42     		cmp	r2, r3
 492 00d4 09D3     		bcc	.L21
 437:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 438:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_BaseInit(sensor);
 493              		.loc 1 438 0
 494 00d6 7B68     		ldr	r3, [r7, #4]
 495 00d8 1800     		movs	r0, r3
 496 00da FFF7FEFF 		bl	CapSense_1_BaseInit
 439:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_lowBaselineResetCnt[sensor] = 0u;
 497              		.loc 1 439 0
 498 00de 3B4A     		ldr	r2, .L27+20
 499 00e0 7B68     		ldr	r3, [r7, #4]
 500 00e2 D318     		adds	r3, r2, r3
 501 00e4 0022     		movs	r2, #0
 502 00e6 1A70     		strb	r2, [r3]
 436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 503              		.loc 1 436 0
 504 00e8 4AE0     		b	.L23
 505              	.L21:
 440:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 441:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
 442:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 443:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_lowBaselineResetCnt[sensor]++;
 506              		.loc 1 443 0
 507 00ea 384A     		ldr	r2, .L27+20
 508 00ec 7B68     		ldr	r3, [r7, #4]
 509 00ee D318     		adds	r3, r2, r3
 510 00f0 1B78     		ldrb	r3, [r3]
 511 00f2 0133     		adds	r3, r3, #1
 512 00f4 D9B2     		uxtb	r1, r3
 513 00f6 354A     		ldr	r2, .L27+20
 514 00f8 7B68     		ldr	r3, [r7, #4]
 515 00fa D318     		adds	r3, r2, r3
 516 00fc 0A1C     		adds	r2, r1, #0
 517 00fe 1A70     		strb	r2, [r3]
 436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 518              		.loc 1 436 0
 519 0100 3EE0     		b	.L23
 520              	.L20:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 18


 444:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 445:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 446:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else
 447:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 448:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE)
 449:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Update Baseline if lower than noiseThreshold */
 451:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if ( (tempRaw <= noiseThreshold) ||
 452:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              ((tempRaw < (uint16) CapSense_1_negativeNoiseThreshold[widget])
 453:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                && (sign == 0u)))
 454:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 455:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
 456:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Update Baseline if lower than noiseThreshold */
 457:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if ( (tempRaw <= noiseThreshold) ||
 521              		.loc 1 457 0
 522 0102 1223     		movs	r3, #18
 523 0104 FA18     		adds	r2, r7, r3
 524 0106 0C23     		movs	r3, #12
 525 0108 FB18     		adds	r3, r7, r3
 526 010a 1288     		ldrh	r2, [r2]
 527 010c 1B88     		ldrh	r3, [r3]
 528 010e 9A42     		cmp	r2, r3
 529 0110 07D9     		bls	.L24
 530              		.loc 1 457 0 is_stmt 0 discriminator 1
 531 0112 1223     		movs	r3, #18
 532 0114 FB18     		adds	r3, r7, r3
 533 0116 1B88     		ldrh	r3, [r3]
 534 0118 132B     		cmp	r3, #19
 535 011a 31D8     		bhi	.L23
 458:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                  ((tempRaw < (uint16) CapSense_1_NEGATIVE_NOISE_THRESHOLD)
 459:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                    && (sign == 0u)))
 536              		.loc 1 459 0 is_stmt 1
 537 011c 7B69     		ldr	r3, [r7, #20]
 538 011e 002B     		cmp	r3, #0
 539 0120 2ED1     		bne	.L23
 540              	.L24:
 460:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 461:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
 462:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE) */
 463:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Make full Baseline 23 bits */
 464:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc = (uint32) CapSense_1_sensorBaseline[sensor] << 8u;
 541              		.loc 1 464 0
 542 0122 294B     		ldr	r3, .L27+16
 543 0124 7A68     		ldr	r2, [r7, #4]
 544 0126 5200     		lsls	r2, r2, #1
 545 0128 D35A     		ldrh	r3, [r2, r3]
 546 012a 1B02     		lsls	r3, r3, #8
 547 012c BB60     		str	r3, [r7, #8]
 465:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc |= (uint32) CapSense_1_sensorBaselineLow[sensor];
 548              		.loc 1 465 0
 549 012e 294A     		ldr	r2, .L27+28
 550 0130 7B68     		ldr	r3, [r7, #4]
 551 0132 D318     		adds	r3, r2, r3
 552 0134 1B78     		ldrb	r3, [r3]
 553 0136 1A00     		movs	r2, r3
 554 0138 BB68     		ldr	r3, [r7, #8]
 555 013a 1343     		orrs	r3, r2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 19


 556 013c BB60     		str	r3, [r7, #8]
 466:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 467:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Add Raw Data to Baseline */
 468:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc += filteredRawData;
 557              		.loc 1 468 0
 558 013e 1023     		movs	r3, #16
 559 0140 FB18     		adds	r3, r7, r3
 560 0142 1B88     		ldrh	r3, [r3]
 561 0144 BA68     		ldr	r2, [r7, #8]
 562 0146 D318     		adds	r3, r2, r3
 563 0148 BB60     		str	r3, [r7, #8]
 469:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 470:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Sub the high Baseline */
 471:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc -= CapSense_1_sensorBaseline[sensor];
 564              		.loc 1 471 0
 565 014a 1F4B     		ldr	r3, .L27+16
 566 014c 7A68     		ldr	r2, [r7, #4]
 567 014e 5200     		lsls	r2, r2, #1
 568 0150 D35A     		ldrh	r3, [r2, r3]
 569 0152 1A00     		movs	r2, r3
 570 0154 BB68     		ldr	r3, [r7, #8]
 571 0156 9B1A     		subs	r3, r3, r2
 572 0158 BB60     		str	r3, [r7, #8]
 472:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 473:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Put Baseline and BaselineLow */
 474:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 573              		.loc 1 474 0
 574 015a BB68     		ldr	r3, [r7, #8]
 575 015c 1B0A     		lsrs	r3, r3, #8
 576 015e 99B2     		uxth	r1, r3
 577 0160 194B     		ldr	r3, .L27+16
 578 0162 7A68     		ldr	r2, [r7, #4]
 579 0164 5200     		lsls	r2, r2, #1
 580 0166 D152     		strh	r1, [r2, r3]
 475:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorBaselineLow[sensor] = ((uint8) calc);
 581              		.loc 1 475 0
 582 0168 BB68     		ldr	r3, [r7, #8]
 583 016a D9B2     		uxtb	r1, r3
 584 016c 194A     		ldr	r2, .L27+28
 585 016e 7B68     		ldr	r3, [r7, #4]
 586 0170 D318     		adds	r3, r2, r3
 587 0172 0A1C     		adds	r2, r1, #0
 588 0174 1A70     		strb	r2, [r3]
 476:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 477:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_lowBaselineResetCnt[sensor] = 0u;
 589              		.loc 1 477 0
 590 0176 154A     		ldr	r2, .L27+20
 591 0178 7B68     		ldr	r3, [r7, #4]
 592 017a D318     		adds	r3, r2, r3
 593 017c 0022     		movs	r2, #0
 594 017e 1A70     		strb	r2, [r3]
 595              	.L23:
 478:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE)
 479:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
 480:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE) */
 481:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 482:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 20


 483:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Calculate Signal if positive difference > noiseThreshold */
 484:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (sign != 0u))
 596              		.loc 1 484 0
 597 0180 1223     		movs	r3, #18
 598 0182 FA18     		adds	r2, r7, r3
 599 0184 0C23     		movs	r3, #12
 600 0186 FB18     		adds	r3, r7, r3
 601 0188 1288     		ldrh	r2, [r2]
 602 018a 1B88     		ldrh	r3, [r3]
 603 018c 9A42     		cmp	r2, r3
 604 018e 0AD9     		bls	.L25
 605              		.loc 1 484 0 is_stmt 0 discriminator 1
 606 0190 7B69     		ldr	r3, [r7, #20]
 607 0192 002B     		cmp	r3, #0
 608 0194 07D0     		beq	.L25
 485:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 486:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_SIGNAL_SIZE == CapSense_1_SIGNAL_SIZE_UINT8)
 487:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Over flow defence for uint8 */
 488:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if (tempRaw > 0xFFu)
 489:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 490:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorSignal[sensor] = 0xFFu;
 491:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
 492:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
 493:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 494:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorSignal[sensor] = ((uint8) tempRaw);
 495:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
 496:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
 497:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_sensorSignal[sensor] = ((uint16) tempRaw);
 609              		.loc 1 497 0 is_stmt 1
 610 0196 104B     		ldr	r3, .L27+32
 611 0198 7A68     		ldr	r2, [r7, #4]
 612 019a 5200     		lsls	r2, r2, #1
 613 019c 1221     		movs	r1, #18
 614 019e 7918     		adds	r1, r7, r1
 615 01a0 0988     		ldrh	r1, [r1]
 616 01a2 D152     		strh	r1, [r2, r3]
 617 01a4 04E0     		b	.L26
 618              	.L25:
 498:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif  /* (CapSense_1_SIGNAL_SIZE == CapSense_1_SIGNAL_SIZE_UINT8) */
 499:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 500:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else
 501:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Signal is zero */
 503:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_sensorSignal[sensor] = 0u;
 619              		.loc 1 503 0
 620 01a6 0C4B     		ldr	r3, .L27+32
 621 01a8 7A68     		ldr	r2, [r7, #4]
 622 01aa 5200     		lsls	r2, r2, #1
 623 01ac 0021     		movs	r1, #0
 624 01ae D152     		strh	r1, [r2, r3]
 625              	.L26:
 504:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 505:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 506:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 507:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 508:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 509:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 21


 510:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 626              		.loc 1 510 0
 627 01b0 C046     		nop
 628 01b2 BD46     		mov	sp, r7
 629 01b4 07B0     		add	sp, sp, #28
 630              		@ sp needed
 631 01b6 90BD     		pop	{r4, r7, pc}
 632              	.L28:
 633              		.align	2
 634              	.L27:
 635 01b8 00000000 		.word	CapSense_1_widgetNumber
 636 01bc 00000000 		.word	CapSense_1_sensorRaw
 637 01c0 00000000 		.word	CapSense_1_enableRawFilters
 638 01c4 00000000 		.word	CapSense_1_rawFilterData1
 639 01c8 00000000 		.word	CapSense_1_sensorBaseline
 640 01cc 00000000 		.word	CapSense_1_lowBaselineResetCnt
 641 01d0 00000000 		.word	CapSense_1_lowBaselineReset
 642 01d4 00000000 		.word	CapSense_1_sensorBaselineLow
 643 01d8 00000000 		.word	CapSense_1_sensorSignal
 644              		.cfi_endproc
 645              	.LFE38:
 646              		.size	CapSense_1_UpdateBaselineNoThreshold, .-CapSense_1_UpdateBaselineNoThreshold
 647              		.section	.text.CapSense_1_UpdateSensorBaseline,"ax",%progbits
 648              		.align	2
 649              		.global	CapSense_1_UpdateSensorBaseline
 650              		.code	16
 651              		.thumb_func
 652              		.type	CapSense_1_UpdateSensorBaseline, %function
 653              	CapSense_1_UpdateSensorBaseline:
 654              	.LFB39:
 511:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 512:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 513:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 514:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateSensorBaseline
 515:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 516:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 517:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 518:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Updates the CapSense_1_sensorBaseline[sensor] array element using the
 519:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by
 520:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 521:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  it in CapSense_1_sensorSignal[sensor].
 522:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold.
 523:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating.
 524:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Baseline is loaded with raw count value if a signal is greater than zero and
 525:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  if signal is less than noise threshold.
 526:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline
 527:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  calculation.
 528:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API updates the thresholds in the Smartsense Mode.
 529:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 530:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 531:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 532:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 533:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 534:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 535:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 536:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 537:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumber[]  - stores widget numbers.
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 22


 538:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 539:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 540:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 541:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 542:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 543:Generated_Source\PSoC4/CapSense_1_CSHL.c ****  void CapSense_1_UpdateSensorBaseline(uint32 sensor)
 544:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 655              		.loc 1 544 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 8
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 0000 80B5     		push	{r7, lr}
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 7, -8
 662              		.cfi_offset 14, -4
 663 0002 82B0     		sub	sp, sp, #8
 664              		.cfi_def_cfa_offset 16
 665 0004 00AF     		add	r7, sp, #0
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
 545:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 546:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 widget;
 547:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 548:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         widget = CapSense_1_widgetNumber[sensor];
 549:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 550:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 551:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(widget < CapSense_1_END_OF_WIDGETS_INDEX)
 552:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 553:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 554:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 555:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
 556:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_UpdateThresholds(sensor);
 557:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
 558:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 559:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_UpdateBaselineNoThreshold(sensor);
 668              		.loc 1 559 0
 669 0008 7B68     		ldr	r3, [r7, #4]
 670 000a 1800     		movs	r0, r3
 671 000c FFF7FEFF 		bl	CapSense_1_UpdateBaselineNoThreshold
 560:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 561:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 562:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 563:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 564:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 565:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 672              		.loc 1 565 0
 673 0010 C046     		nop
 674 0012 BD46     		mov	sp, r7
 675 0014 02B0     		add	sp, sp, #8
 676              		@ sp needed
 677 0016 80BD     		pop	{r7, pc}
 678              		.cfi_endproc
 679              	.LFE39:
 680              		.size	CapSense_1_UpdateSensorBaseline, .-CapSense_1_UpdateSensorBaseline
 681              		.section	.text.CapSense_1_UpdateEnabledBaselines,"ax",%progbits
 682              		.align	2
 683              		.global	CapSense_1_UpdateEnabledBaselines
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 23


 684              		.code	16
 685              		.thumb_func
 686              		.type	CapSense_1_UpdateEnabledBaselines, %function
 687              	CapSense_1_UpdateEnabledBaselines:
 688              	.LFB40:
 566:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 567:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 568:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 569:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateEnabledBaselines
 570:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 571:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 572:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 573:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Checks CapSense_1_sensorEnableMask[] array and calls the
 574:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_UpdateSensorBaseline function to update the baselines
 575:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for the enabled sensors.
 576:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 577:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 578:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 579:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 580:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 581:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 582:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 583:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 584:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
 585:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
 586:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
 587:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 588:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
 589:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 590:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor doesn't scan by CapSense_1_ScanEnabledWidgets().
 591:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor scans by CapSense_1_ScanEnabledWidgets().
 592:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 593:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 594:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 595:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 596:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 597:Generated_Source\PSoC4/CapSense_1_CSHL.c ****  void CapSense_1_UpdateEnabledBaselines(void)
 598:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 689              		.loc 1 598 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 8
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693 0000 80B5     		push	{r7, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 82B0     		sub	sp, sp, #8
 698              		.cfi_def_cfa_offset 16
 699 0004 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
 599:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 600:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 isSensorEnabled;
 601:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 602:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_SENSOR_COUNT; i++)
 701              		.loc 1 602 0
 702 0006 0023     		movs	r3, #0
 703 0008 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 24


 704 000a 11E0     		b	.L31
 705              	.L33:
 603:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 604:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         isSensorEnabled = CapSense_1_GetBitValue(CapSense_1_sensorEnableMask, i);
 706              		.loc 1 604 0
 707 000c 7A68     		ldr	r2, [r7, #4]
 708 000e 0C4B     		ldr	r3, .L34
 709 0010 1100     		movs	r1, r2
 710 0012 1800     		movs	r0, r3
 711 0014 FFF7FEFF 		bl	CapSense_1_GetBitValue
 712 0018 0300     		movs	r3, r0
 713 001a 3B60     		str	r3, [r7]
 605:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 606:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(0u != isSensorEnabled)
 714              		.loc 1 606 0
 715 001c 3B68     		ldr	r3, [r7]
 716 001e 002B     		cmp	r3, #0
 717 0020 03D0     		beq	.L32
 607:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 608:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_UpdateSensorBaseline(i);
 718              		.loc 1 608 0
 719 0022 7B68     		ldr	r3, [r7, #4]
 720 0024 1800     		movs	r0, r3
 721 0026 FFF7FEFF 		bl	CapSense_1_UpdateSensorBaseline
 722              	.L32:
 602:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 723              		.loc 1 602 0 discriminator 2
 724 002a 7B68     		ldr	r3, [r7, #4]
 725 002c 0133     		adds	r3, r3, #1
 726 002e 7B60     		str	r3, [r7, #4]
 727              	.L31:
 602:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 728              		.loc 1 602 0 is_stmt 0 discriminator 1
 729 0030 7B68     		ldr	r3, [r7, #4]
 730 0032 002B     		cmp	r3, #0
 731 0034 EAD0     		beq	.L33
 609:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 610:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 611:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 732              		.loc 1 611 0 is_stmt 1
 733 0036 C046     		nop
 734 0038 BD46     		mov	sp, r7
 735 003a 02B0     		add	sp, sp, #8
 736              		@ sp needed
 737 003c 80BD     		pop	{r7, pc}
 738              	.L35:
 739 003e C046     		.align	2
 740              	.L34:
 741 0040 00000000 		.word	CapSense_1_sensorEnableMask
 742              		.cfi_endproc
 743              	.LFE40:
 744              		.size	CapSense_1_UpdateEnabledBaselines, .-CapSense_1_UpdateEnabledBaselines
 745              		.section	.text.CapSense_1_UpdateWidgetBaseline,"ax",%progbits
 746              		.align	2
 747              		.global	CapSense_1_UpdateWidgetBaseline
 748              		.code	16
 749              		.thumb_func
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 25


 750              		.type	CapSense_1_UpdateWidgetBaseline, %function
 751              	CapSense_1_UpdateWidgetBaseline:
 752              	.LFB41:
 612:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 613:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 614:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateWidgetBaseline
 615:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 616:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 617:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 618:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Checks CapSense_1_sensorEnableMask[] array and calls the
 619:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_UpdateSensorBaseline function to update the baselines
 620:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for the enabled sensors that belong to widget.
 621:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 622:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 623:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  Widget number.
 624:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 625:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 626:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 627:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 628:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 629:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
 630:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
 631:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
 632:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 633:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
 634:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 635:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor doesn't scan by CapSense_1_ScanEnabledWidgets().
 636:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor scans by CapSense_1_ScanEnabledWidgets().
 637:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 638:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 639:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 640:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 641:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 642:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_UpdateWidgetBaseline(uint32 widget)
 643:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 753              		.loc 1 643 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 32
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757 0000 80B5     		push	{r7, lr}
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 7, -8
 760              		.cfi_offset 14, -4
 761 0002 88B0     		sub	sp, sp, #32
 762              		.cfi_def_cfa_offset 40
 763 0004 00AF     		add	r7, sp, #0
 764              		.cfi_def_cfa_register 7
 765 0006 7860     		str	r0, [r7, #4]
 644:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 sensorsPerWidget;
 645:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 firstSensor;
 646:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 lastSensor;
 647:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 648:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 isSensorEnabled;
 649:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 650:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Get number of sensors in widget */
 651:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     sensorsPerWidget = CapSense_1_numberOfSensors[widget];
 766              		.loc 1 651 0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 26


 767 0008 0123     		movs	r3, #1
 768 000a BB61     		str	r3, [r7, #24]
 652:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 653:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Get first sensor in widget */
 654:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     firstSensor = CapSense_1_rawDataIndex[widget];
 769              		.loc 1 654 0
 770 000c 0023     		movs	r3, #0
 771 000e 7B61     		str	r3, [r7, #20]
 655:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 656:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Get last sensor in widget */
 657:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     lastSensor = (CapSense_1_rawDataIndex[widget] + sensorsPerWidget);
 772              		.loc 1 657 0
 773 0010 0023     		movs	r3, #0
 774 0012 1A00     		movs	r2, r3
 775 0014 BB69     		ldr	r3, [r7, #24]
 776 0016 D318     		adds	r3, r2, r3
 777 0018 3B61     		str	r3, [r7, #16]
 658:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 659:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 778              		.loc 1 659 0
 779 001a 7B69     		ldr	r3, [r7, #20]
 780 001c FB61     		str	r3, [r7, #28]
 781 001e 11E0     		b	.L37
 782              	.L39:
 660:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 661:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         isSensorEnabled = CapSense_1_GetBitValue(CapSense_1_sensorEnableMask, i);
 783              		.loc 1 661 0
 784 0020 FA69     		ldr	r2, [r7, #28]
 785 0022 0C4B     		ldr	r3, .L40
 786 0024 1100     		movs	r1, r2
 787 0026 1800     		movs	r0, r3
 788 0028 FFF7FEFF 		bl	CapSense_1_GetBitValue
 789 002c 0300     		movs	r3, r0
 790 002e FB60     		str	r3, [r7, #12]
 662:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 663:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(0u != isSensorEnabled)
 791              		.loc 1 663 0
 792 0030 FB68     		ldr	r3, [r7, #12]
 793 0032 002B     		cmp	r3, #0
 794 0034 03D0     		beq	.L38
 664:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 665:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_UpdateSensorBaseline(i);
 795              		.loc 1 665 0
 796 0036 FB69     		ldr	r3, [r7, #28]
 797 0038 1800     		movs	r0, r3
 798 003a FFF7FEFF 		bl	CapSense_1_UpdateSensorBaseline
 799              	.L38:
 659:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 800              		.loc 1 659 0 discriminator 2
 801 003e FB69     		ldr	r3, [r7, #28]
 802 0040 0133     		adds	r3, r3, #1
 803 0042 FB61     		str	r3, [r7, #28]
 804              	.L37:
 659:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 805              		.loc 1 659 0 is_stmt 0 discriminator 1
 806 0044 FA69     		ldr	r2, [r7, #28]
 807 0046 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 27


 808 0048 9A42     		cmp	r2, r3
 809 004a E9D3     		bcc	.L39
 666:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 667:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 668:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 810              		.loc 1 668 0 is_stmt 1
 811 004c C046     		nop
 812 004e BD46     		mov	sp, r7
 813 0050 08B0     		add	sp, sp, #32
 814              		@ sp needed
 815 0052 80BD     		pop	{r7, pc}
 816              	.L41:
 817              		.align	2
 818              	.L40:
 819 0054 00000000 		.word	CapSense_1_sensorEnableMask
 820              		.cfi_endproc
 821              	.LFE41:
 822              		.size	CapSense_1_UpdateWidgetBaseline, .-CapSense_1_UpdateWidgetBaseline
 823              		.section	.text.CapSense_1_GetBaselineData,"ax",%progbits
 824              		.align	2
 825              		.global	CapSense_1_GetBaselineData
 826              		.code	16
 827              		.thumb_func
 828              		.type	CapSense_1_GetBaselineData, %function
 829              	CapSense_1_GetBaselineData:
 830              	.LFB42:
 669:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 670:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 671:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 672:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetBaselineData
 673:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 674:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 675:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 676:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the sensor baseline from the component.
 677:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 678:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 679:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 680:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 681:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 682:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the baseline value of the sensor indicated by an argument.
 683:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 684:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 685:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[] - the array with an initial values by scanning
 686:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 687:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 688:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 689:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 690:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 691:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetBaselineData(uint32 sensor)
 692:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 831              		.loc 1 692 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 8
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835 0000 80B5     		push	{r7, lr}
 836              		.cfi_def_cfa_offset 8
 837              		.cfi_offset 7, -8
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 28


 838              		.cfi_offset 14, -4
 839 0002 82B0     		sub	sp, sp, #8
 840              		.cfi_def_cfa_offset 16
 841 0004 00AF     		add	r7, sp, #0
 842              		.cfi_def_cfa_register 7
 843 0006 7860     		str	r0, [r7, #4]
 693:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return (CapSense_1_sensorBaseline[sensor]);
 844              		.loc 1 693 0
 845 0008 034B     		ldr	r3, .L44
 846 000a 7A68     		ldr	r2, [r7, #4]
 847 000c 5200     		lsls	r2, r2, #1
 848 000e D35A     		ldrh	r3, [r2, r3]
 694:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 849              		.loc 1 694 0
 850 0010 1800     		movs	r0, r3
 851 0012 BD46     		mov	sp, r7
 852 0014 02B0     		add	sp, sp, #8
 853              		@ sp needed
 854 0016 80BD     		pop	{r7, pc}
 855              	.L45:
 856              		.align	2
 857              	.L44:
 858 0018 00000000 		.word	CapSense_1_sensorBaseline
 859              		.cfi_endproc
 860              	.LFE42:
 861              		.size	CapSense_1_GetBaselineData, .-CapSense_1_GetBaselineData
 862              		.section	.text.CapSense_1_SetBaselineData,"ax",%progbits
 863              		.align	2
 864              		.global	CapSense_1_SetBaselineData
 865              		.code	16
 866              		.thumb_func
 867              		.type	CapSense_1_SetBaselineData, %function
 868              	CapSense_1_SetBaselineData:
 869              	.LFB43:
 695:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 696:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 697:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 698:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_SetBaselineData
 699:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 700:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 701:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 702:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API writes the data value passed as an argument to the sensor baseline array.
 703:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 704:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 705:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 706:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  data:    Sensor baseline.
 707:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 708:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 709:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None.
 710:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 711:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 712:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[] - the array with initial values by scanning
 713:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 714:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 715:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 716:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 717:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 29


 718:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_SetBaselineData(uint32 sensor, uint16 data)
 719:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 870              		.loc 1 719 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 8
 873              		@ frame_needed = 1, uses_anonymous_args = 0
 874 0000 80B5     		push	{r7, lr}
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 82B0     		sub	sp, sp, #8
 879              		.cfi_def_cfa_offset 16
 880 0004 00AF     		add	r7, sp, #0
 881              		.cfi_def_cfa_register 7
 882 0006 7860     		str	r0, [r7, #4]
 883 0008 0A00     		movs	r2, r1
 884 000a BB1C     		adds	r3, r7, #2
 885 000c 1A80     		strh	r2, [r3]
 720:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorBaseline[sensor] = data;
 886              		.loc 1 720 0
 887 000e 054B     		ldr	r3, .L47
 888 0010 7A68     		ldr	r2, [r7, #4]
 889 0012 5200     		lsls	r2, r2, #1
 890 0014 B91C     		adds	r1, r7, #2
 891 0016 0988     		ldrh	r1, [r1]
 892 0018 D152     		strh	r1, [r2, r3]
 721:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 893              		.loc 1 721 0
 894 001a C046     		nop
 895 001c BD46     		mov	sp, r7
 896 001e 02B0     		add	sp, sp, #8
 897              		@ sp needed
 898 0020 80BD     		pop	{r7, pc}
 899              	.L48:
 900 0022 C046     		.align	2
 901              	.L47:
 902 0024 00000000 		.word	CapSense_1_sensorBaseline
 903              		.cfi_endproc
 904              	.LFE43:
 905              		.size	CapSense_1_SetBaselineData, .-CapSense_1_SetBaselineData
 906              		.section	.text.CapSense_1_GetDiffCountData,"ax",%progbits
 907              		.align	2
 908              		.global	CapSense_1_GetDiffCountData
 909              		.code	16
 910              		.thumb_func
 911              		.type	CapSense_1_GetDiffCountData, %function
 912              	CapSense_1_GetDiffCountData:
 913              	.LFB44:
 722:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 723:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 724:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 725:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetDiffCountData
 726:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 727:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 728:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 729:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function returns the Sensor Signal from the component.
 730:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 30


 731:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 732:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 733:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 734:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 735:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the difference count value of the sensor indicated by the
 736:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  argument.
 737:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 738:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 739:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[] - the array with difference counts for sensors
 740:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 741:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 742:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 743:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 744:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 745:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetDiffCountData(uint32 sensor)
 746:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 914              		.loc 1 746 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 8
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918 0000 80B5     		push	{r7, lr}
 919              		.cfi_def_cfa_offset 8
 920              		.cfi_offset 7, -8
 921              		.cfi_offset 14, -4
 922 0002 82B0     		sub	sp, sp, #8
 923              		.cfi_def_cfa_offset 16
 924 0004 00AF     		add	r7, sp, #0
 925              		.cfi_def_cfa_register 7
 926 0006 7860     		str	r0, [r7, #4]
 747:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return (CapSense_1_sensorSignal[sensor]);
 927              		.loc 1 747 0
 928 0008 034B     		ldr	r3, .L51
 929 000a 7A68     		ldr	r2, [r7, #4]
 930 000c 5200     		lsls	r2, r2, #1
 931 000e D35A     		ldrh	r3, [r2, r3]
 748:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 932              		.loc 1 748 0
 933 0010 1800     		movs	r0, r3
 934 0012 BD46     		mov	sp, r7
 935 0014 02B0     		add	sp, sp, #8
 936              		@ sp needed
 937 0016 80BD     		pop	{r7, pc}
 938              	.L52:
 939              		.align	2
 940              	.L51:
 941 0018 00000000 		.word	CapSense_1_sensorSignal
 942              		.cfi_endproc
 943              	.LFE44:
 944              		.size	CapSense_1_GetDiffCountData, .-CapSense_1_GetDiffCountData
 945              		.section	.text.CapSense_1_SetDiffCountData,"ax",%progbits
 946              		.align	2
 947              		.global	CapSense_1_SetDiffCountData
 948              		.code	16
 949              		.thumb_func
 950              		.type	CapSense_1_SetDiffCountData, %function
 951              	CapSense_1_SetDiffCountData:
 952              	.LFB45:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 31


 749:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 750:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 751:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 752:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_SetDiffCountData
 753:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 754:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 755:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 756:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API writes the data value passed as an argument to the sensor signal array.
 757:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 758:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 759:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 760:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  value:   Sensor signal.
 761:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 762:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 763:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None.
 764:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 765:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 766:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[] - the array with difference counts for sensors
 767:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 768:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 769:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 770:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 771:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 772:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_SetDiffCountData(uint32 sensor, uint16 value)
 773:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 953              		.loc 1 773 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 8
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957 0000 80B5     		push	{r7, lr}
 958              		.cfi_def_cfa_offset 8
 959              		.cfi_offset 7, -8
 960              		.cfi_offset 14, -4
 961 0002 82B0     		sub	sp, sp, #8
 962              		.cfi_def_cfa_offset 16
 963 0004 00AF     		add	r7, sp, #0
 964              		.cfi_def_cfa_register 7
 965 0006 7860     		str	r0, [r7, #4]
 966 0008 0A00     		movs	r2, r1
 967 000a BB1C     		adds	r3, r7, #2
 968 000c 1A80     		strh	r2, [r3]
 774:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorSignal[sensor] = value;
 969              		.loc 1 774 0
 970 000e 054B     		ldr	r3, .L54
 971 0010 7A68     		ldr	r2, [r7, #4]
 972 0012 5200     		lsls	r2, r2, #1
 973 0014 B91C     		adds	r1, r7, #2
 974 0016 0988     		ldrh	r1, [r1]
 975 0018 D152     		strh	r1, [r2, r3]
 775:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 976              		.loc 1 775 0
 977 001a C046     		nop
 978 001c BD46     		mov	sp, r7
 979 001e 02B0     		add	sp, sp, #8
 980              		@ sp needed
 981 0020 80BD     		pop	{r7, pc}
 982              	.L55:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 32


 983 0022 C046     		.align	2
 984              	.L54:
 985 0024 00000000 		.word	CapSense_1_sensorSignal
 986              		.cfi_endproc
 987              	.LFE45:
 988              		.size	CapSense_1_SetDiffCountData, .-CapSense_1_SetDiffCountData
 989              		.section	.text.CapSense_1_GetFingerThreshold,"ax",%progbits
 990              		.align	2
 991              		.global	CapSense_1_GetFingerThreshold
 992              		.code	16
 993              		.thumb_func
 994              		.type	CapSense_1_GetFingerThreshold, %function
 995              	CapSense_1_GetFingerThreshold:
 996              	.LFB46:
 776:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 777:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 778:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 779:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetFingerThreshold
 780:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 781:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 782:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 783:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the finger threshold from the component.
 784:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 785:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 786:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
 787:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 788:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 789:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the finger threshold of the widget indicated by the argument.
 790:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 791:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 792:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_fingerThreshold[] - This array contains the level of signal
 793:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for each widget that is determined if a finger is present on the widget.
 794:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 795:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 796:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 797:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 798:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 799:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetFingerThreshold(uint32 widget)
 800:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 997              		.loc 1 800 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 8
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001 0000 80B5     		push	{r7, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 82B0     		sub	sp, sp, #8
 1006              		.cfi_def_cfa_offset 16
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
 801:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_fingerThreshold[widget]);
 1010              		.loc 1 801 0
 1011 0008 6423     		movs	r3, #100
 802:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1012              		.loc 1 802 0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 33


 1013 000a 1800     		movs	r0, r3
 1014 000c BD46     		mov	sp, r7
 1015 000e 02B0     		add	sp, sp, #8
 1016              		@ sp needed
 1017 0010 80BD     		pop	{r7, pc}
 1018              		.cfi_endproc
 1019              	.LFE46:
 1020              		.size	CapSense_1_GetFingerThreshold, .-CapSense_1_GetFingerThreshold
 1021 0012 C046     		.section	.text.CapSense_1_GetNoiseThreshold,"ax",%progbits
 1022              		.align	2
 1023              		.global	CapSense_1_GetNoiseThreshold
 1024              		.code	16
 1025              		.thumb_func
 1026              		.type	CapSense_1_GetNoiseThreshold, %function
 1027              	CapSense_1_GetNoiseThreshold:
 1028              	.LFB47:
 803:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 804:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 805:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 806:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetNoiseThreshold
 807:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 808:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 809:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 810:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the noise threshold from the component.
 811:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 812:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 813:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
 814:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 815:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 816:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the noise threshold of the widget indicated by the argument.
 817:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 818:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 819:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_noiseThreshold[] - This array contains the level of signal
 820:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for each widget that determines the level of noise in the capacitive scan.
 821:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 822:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 823:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 824:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 825:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 826:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetNoiseThreshold(uint32 widget)
 827:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1029              		.loc 1 827 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 8
 1032              		@ frame_needed = 1, uses_anonymous_args = 0
 1033 0000 80B5     		push	{r7, lr}
 1034              		.cfi_def_cfa_offset 8
 1035              		.cfi_offset 7, -8
 1036              		.cfi_offset 14, -4
 1037 0002 82B0     		sub	sp, sp, #8
 1038              		.cfi_def_cfa_offset 16
 1039 0004 00AF     		add	r7, sp, #0
 1040              		.cfi_def_cfa_register 7
 1041 0006 7860     		str	r0, [r7, #4]
 828:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return (CapSense_1_noiseThreshold[widget]);
 1042              		.loc 1 828 0
 1043 0008 1423     		movs	r3, #20
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 34


 829:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1044              		.loc 1 829 0
 1045 000a 1800     		movs	r0, r3
 1046 000c BD46     		mov	sp, r7
 1047 000e 02B0     		add	sp, sp, #8
 1048              		@ sp needed
 1049 0010 80BD     		pop	{r7, pc}
 1050              		.cfi_endproc
 1051              	.LFE47:
 1052              		.size	CapSense_1_GetNoiseThreshold, .-CapSense_1_GetNoiseThreshold
 1053 0012 C046     		.section	.text.CapSense_1_GetFingerHysteresis,"ax",%progbits
 1054              		.align	2
 1055              		.global	CapSense_1_GetFingerHysteresis
 1056              		.code	16
 1057              		.thumb_func
 1058              		.type	CapSense_1_GetFingerHysteresis, %function
 1059              	CapSense_1_GetFingerHysteresis:
 1060              	.LFB48:
 830:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 831:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 832:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 833:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetFingerHysteresis
 834:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 835:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 836:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 837:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the Hysteresis value from the component.
 838:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 839:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 840:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
 841:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 842:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 843:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the Hysteresis of the widget indicated by the argument.
 844:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 845:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 846:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_hysteresis[] - This array contains the hysteresis value
 847:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   for each widget.
 848:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumberSld - structure with dynamic sliders' parameters.
 849:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 850:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 851:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 852:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 853:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 854:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetFingerHysteresis(uint32 widget)
 855:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1061              		.loc 1 855 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 8
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065 0000 80B5     		push	{r7, lr}
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 7, -8
 1068              		.cfi_offset 14, -4
 1069 0002 82B0     		sub	sp, sp, #8
 1070              		.cfi_def_cfa_offset 16
 1071 0004 00AF     		add	r7, sp, #0
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 35


 856:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_hysteresis[widget]);
 1074              		.loc 1 856 0
 1075 0008 0A23     		movs	r3, #10
 857:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1076              		.loc 1 857 0
 1077 000a 1800     		movs	r0, r3
 1078 000c BD46     		mov	sp, r7
 1079 000e 02B0     		add	sp, sp, #8
 1080              		@ sp needed
 1081 0010 80BD     		pop	{r7, pc}
 1082              		.cfi_endproc
 1083              	.LFE48:
 1084              		.size	CapSense_1_GetFingerHysteresis, .-CapSense_1_GetFingerHysteresis
 1085 0012 C046     		.section	.text.CapSense_1_GetNegativeNoiseThreshold,"ax",%progbits
 1086              		.align	2
 1087              		.global	CapSense_1_GetNegativeNoiseThreshold
 1088              		.code	16
 1089              		.thumb_func
 1090              		.type	CapSense_1_GetNegativeNoiseThreshold, %function
 1091              	CapSense_1_GetNegativeNoiseThreshold:
 1092              	.LFB49:
 858:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 859:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 860:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 861:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetNegativeNoiseThreshold
 862:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 863:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 864:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 865:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the negative noise threshold from the component.
 866:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 867:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 868:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None.
 869:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 870:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return Value:
 871:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the negative noise threshold
 872:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 873:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 874:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_negativeNoiseThreshold - This variable specifies the negative
 875:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   difference between the raw count and baseline levels for Baseline resetting
 876:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   to the raw count level.
 877:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 878:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 879:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 880:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 881:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 882:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetNegativeNoiseThreshold(uint32 widget)
 883:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1093              		.loc 1 883 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 8
 1096              		@ frame_needed = 1, uses_anonymous_args = 0
 1097 0000 80B5     		push	{r7, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 7, -8
 1100              		.cfi_offset 14, -4
 1101 0002 82B0     		sub	sp, sp, #8
 1102              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 36


 1103 0004 00AF     		add	r7, sp, #0
 1104              		.cfi_def_cfa_register 7
 1105 0006 7860     		str	r0, [r7, #4]
 884:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 885:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_negativeNoiseThreshold[widget]);
 886:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #else
 887:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_NEGATIVE_NOISE_THRESHOLD);
 1106              		.loc 1 887 0
 1107 0008 1423     		movs	r3, #20
 888:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
 889:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1108              		.loc 1 889 0
 1109 000a 1800     		movs	r0, r3
 1110 000c BD46     		mov	sp, r7
 1111 000e 02B0     		add	sp, sp, #8
 1112              		@ sp needed
 1113 0010 80BD     		pop	{r7, pc}
 1114              		.cfi_endproc
 1115              	.LFE49:
 1116              		.size	CapSense_1_GetNegativeNoiseThreshold, .-CapSense_1_GetNegativeNoiseThreshold
 1117 0012 C046     		.section	.text.CapSense_1_CheckIsSensorActive,"ax",%progbits
 1118              		.align	2
 1119              		.global	CapSense_1_CheckIsSensorActive
 1120              		.code	16
 1121              		.thumb_func
 1122              		.type	CapSense_1_CheckIsSensorActive, %function
 1123              	CapSense_1_CheckIsSensorActive:
 1124              	.LFB50:
 890:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 891:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 892:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if(CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 893:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 894:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetFingerThreshold
 895:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 896:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 897:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 898:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the finger threshold value for a widget.
 899:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 900:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 901:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensorNumber:  widget index.
 902:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Finger threshold value for the widget.
 903:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 904:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 905:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 906:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 907:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 908:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_fingerThreshold[] - This array contains the level of signal
 909:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   for each widget that determines if a finger is present on the widget.
 910:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 911:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 912:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 913:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 914:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
 915:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetFingerThreshold(uint32 widget, uint16 value)
 916:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 917:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_fingerThreshold[widget] = value;
 918:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 37


 919:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 920:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 921:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 922:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetNoiseThreshold
 923:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 924:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 925:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 926:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the Noise Threshold value for each widget.
 927:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 928:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 929:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Sensor index number.
 930:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:   Noise Threshold value for widget.
 931:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 932:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 933:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 934:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 935:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 936:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_noiseThreshold[] - This array contains the level of signal
 937:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   for each widget that determines the level of noise in the capacitive scan.
 938:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 939:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 940:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 941:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 942:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
 943:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetNoiseThreshold(uint32 widget, uint16 value)
 944:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 945:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_noiseThreshold[widget] = value;
 946:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 947:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 948:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 949:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 950:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetFingerHysteresis
 951:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 952:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 953:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 954:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the Hysteresis value of a widget
 955:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 956:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 957:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Hysteresis value for widgets.
 958:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  widget number
 959:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 960:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 961:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 962:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 963:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 964:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_hysteresis[] - This array contains the hysteresis value for each widget.
 965:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_widgetNumberSld - structure with dynamic sliders' parameters.
 966:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 967:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 968:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 969:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 970:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
 971:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetFingerHysteresis(uint32 widget, uint16 value)
 972:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 973:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_hysteresis[widget] = value;
 974:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 975:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 38


 976:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 977:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 978:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetNegativeNoiseThreshold
 979:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 980:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 981:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 982:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the Negative Noise Threshold value of a widget
 983:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 984:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 985:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Negative Noise Threshold value for widgets.
 986:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget: widget number
 987:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 988:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 989:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 990:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 991:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 992:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_negativeNoiseThreshold  - This parameter specifies the negative
 993:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   difference between the raw count and baseline levels for Baseline resetting to
 994:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   the raw count level.
 995:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 996:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 997:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 998:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 999:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1000:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetNegativeNoiseThreshold(uint32 widget, uint16 value)
1001:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1002:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_negativeNoiseThreshold[widget] = value;
1003:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1004:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1005:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1006:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1007:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetDebounce
1008:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1009:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1010:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1011:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the debounce value for a widget.
1012:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1013:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1014:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Debounce value for widget.
1015:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget: widget index.
1016:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1017:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
1018:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1019:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1020:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1021:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_debounce[] - This array contains the debounce value for each widget.
1022:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_widgetNumberSld - structure with dynamic sliders' parameters.
1023:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1024:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1025:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1026:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1027:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1028:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetDebounce(uint32 widget, uint8 value)
1029:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1030:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_debounce[widget] = value;
1031:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1032:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 39


1033:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1034:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1035:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetLowBaselineReset
1036:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1037:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1038:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1039:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the low baseline reset threshold value for the sensor.
1040:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1041:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1042:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value: low baseline reset threshold value.
1043:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensor: Sensor index.
1044:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1045:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
1046:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1047:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1048:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1049:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_lowBaselineReset[] - This array contains the Baseline update
1050:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold value for each sensor.
1051:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1052:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1053:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1054:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1055:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1056:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetLowBaselineReset(uint32 sensor, uint8 value)
1057:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1058:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_lowBaselineReset[sensor] = value;
1059:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1060:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
1061:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1062:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1063:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1064:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_CheckIsSensorActive
1065:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1066:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1067:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1068:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Compares the CapSense_1_sensorSignal[sensor] array element to the finger
1069:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  threshold of the widget it belongs to. The hysteresis and debounce are taken into
1070:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold
1071:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  based on whether the sensor is currently active.
1072:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
1073:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
1074:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  The debounce counter is added to the sensor active transition.
1075:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function updates the CapSense_1_sensorOnMask[] array element.
1076:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1077:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1078:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
1079:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1080:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1081:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
1082:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1083:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1084:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[] - used to store the difference between
1085:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the current value of raw data and a previous value of the baseline.
1086:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_debounceCounter[]   - used to store the current debounce
1087:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  counter of the sensor. the widget which have this parameter are buttons, matrix
1088:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  buttons, proximity, and guard. All other widgets don't have the  debounce parameter
1089:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 40


1090:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorOnMask[] - used to store the sensors on/off state.
1091:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorOnMask[0] contains the masked bits for sensors
1092:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1093:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
1094:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1095:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor is inactive.
1096:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor is active.
1097:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1098:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1099:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1100:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1101:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1102:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_CheckIsSensorActive(uint32 sensor)
1103:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1125              		.loc 1 1103 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 16
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
 1130              		.cfi_def_cfa_offset 8
 1131              		.cfi_offset 7, -8
 1132              		.cfi_offset 14, -4
 1133 0002 84B0     		sub	sp, sp, #16
 1134              		.cfi_def_cfa_offset 24
 1135 0004 00AF     		add	r7, sp, #0
 1136              		.cfi_def_cfa_register 7
 1137 0006 7860     		str	r0, [r7, #4]
1104:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 widget;
1105:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 debounce;
1106:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 debounceIndex;
1107:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1108:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 fingerThreshold;
1109:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 hysteresis;
1110:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     
1111:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1112:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Prepare to find debounce counter index */
1113:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     widget = CapSense_1_widgetNumber[sensor];
 1138              		.loc 1 1113 0
 1139 0008 0F23     		movs	r3, #15
 1140 000a FB18     		adds	r3, r7, r3
 1141 000c 3B49     		ldr	r1, .L73
 1142 000e 7A68     		ldr	r2, [r7, #4]
 1143 0010 8A18     		adds	r2, r1, r2
 1144 0012 1278     		ldrb	r2, [r2]
 1145 0014 1A70     		strb	r2, [r3]
1114:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1115:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     fingerThreshold = CapSense_1_fingerThreshold[widget];
 1146              		.loc 1 1115 0
 1147 0016 0C23     		movs	r3, #12
 1148 0018 FB18     		adds	r3, r7, r3
 1149 001a 6422     		movs	r2, #100
 1150 001c 1A80     		strh	r2, [r3]
1116:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     hysteresis = CapSense_1_hysteresis[widget];
 1151              		.loc 1 1116 0
 1152 001e 0A23     		movs	r3, #10
 1153 0020 FB18     		adds	r3, r7, r3
 1154 0022 0A22     		movs	r2, #10
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 41


 1155 0024 1A80     		strh	r2, [r3]
1117:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     debounce = CapSense_1_debounce[widget];
 1156              		.loc 1 1117 0
 1157 0026 0923     		movs	r3, #9
 1158 0028 FB18     		adds	r3, r7, r3
 1159 002a 0522     		movs	r2, #5
 1160 002c 1A70     		strb	r2, [r3]
1118:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1119:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         debounceIndex = widget;
 1161              		.loc 1 1119 0
 1162 002e 0823     		movs	r3, #8
 1163 0030 FB18     		adds	r3, r7, r3
 1164 0032 0F22     		movs	r2, #15
 1165 0034 BA18     		adds	r2, r7, r2
 1166 0036 1278     		ldrb	r2, [r2]
 1167 0038 1A70     		strb	r2, [r3]
1120:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1121:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1122:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Was on */
1123:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if (0u != CapSense_1_GetBitValue(CapSense_1_sensorOnMask, sensor))
 1168              		.loc 1 1123 0
 1169 003a 7A68     		ldr	r2, [r7, #4]
 1170 003c 304B     		ldr	r3, .L73+4
 1171 003e 1100     		movs	r1, r2
 1172 0040 1800     		movs	r0, r3
 1173 0042 FFF7FEFF 		bl	CapSense_1_GetBitValue
 1174 0046 031E     		subs	r3, r0, #0
 1175 0048 1CD0     		beq	.L65
1124:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1125:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Hysteresis minus */
1126:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 1176              		.loc 1 1126 0
 1177 004a 2E4B     		ldr	r3, .L73+8
 1178 004c 7A68     		ldr	r2, [r7, #4]
 1179 004e 5200     		lsls	r2, r2, #1
 1180 0050 D35A     		ldrh	r3, [r2, r3]
 1181 0052 1900     		movs	r1, r3
 1182 0054 0C23     		movs	r3, #12
 1183 0056 FB18     		adds	r3, r7, r3
 1184 0058 1A88     		ldrh	r2, [r3]
 1185 005a 0A23     		movs	r3, #10
 1186 005c FB18     		adds	r3, r7, r3
 1187 005e 1B88     		ldrh	r3, [r3]
 1188 0060 D31A     		subs	r3, r2, r3
 1189 0062 9942     		cmp	r1, r3
 1190 0064 3BDA     		bge	.L67
1127:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1128:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_SetBitValue(CapSense_1_sensorOnMask, sensor, 0u);
 1191              		.loc 1 1128 0
 1192 0066 7968     		ldr	r1, [r7, #4]
 1193 0068 254B     		ldr	r3, .L73+4
 1194 006a 0022     		movs	r2, #0
 1195 006c 1800     		movs	r0, r3
 1196 006e FFF7FEFF 		bl	CapSense_1_SetBitValue
1129:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1130:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_debounceCounter[debounceIndex] = debounce;
 1197              		.loc 1 1130 0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 42


 1198 0072 0823     		movs	r3, #8
 1199 0074 FB18     		adds	r3, r7, r3
 1200 0076 1B78     		ldrb	r3, [r3]
 1201 0078 234A     		ldr	r2, .L73+12
 1202 007a 0921     		movs	r1, #9
 1203 007c 7918     		adds	r1, r7, r1
 1204 007e 0978     		ldrb	r1, [r1]
 1205 0080 D154     		strb	r1, [r2, r3]
 1206 0082 2CE0     		b	.L67
 1207              	.L65:
1131:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1132:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1133:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else    /* Was off */
1134:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1135:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Hysteresis plus */
1136:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_sensorSignal[sensor] >= (fingerThreshold + hysteresis))
 1208              		.loc 1 1136 0
 1209 0084 1F4B     		ldr	r3, .L73+8
 1210 0086 7A68     		ldr	r2, [r7, #4]
 1211 0088 5200     		lsls	r2, r2, #1
 1212 008a D35A     		ldrh	r3, [r2, r3]
 1213 008c 1900     		movs	r1, r3
 1214 008e 0C23     		movs	r3, #12
 1215 0090 FB18     		adds	r3, r7, r3
 1216 0092 1A88     		ldrh	r2, [r3]
 1217 0094 0A23     		movs	r3, #10
 1218 0096 FB18     		adds	r3, r7, r3
 1219 0098 1B88     		ldrh	r3, [r3]
 1220 009a D318     		adds	r3, r2, r3
 1221 009c 9942     		cmp	r1, r3
 1222 009e 16DB     		blt	.L68
1137:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1138:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_debounceCounter[debounceIndex]--;
 1223              		.loc 1 1138 0
 1224 00a0 0823     		movs	r3, #8
 1225 00a2 FB18     		adds	r3, r7, r3
 1226 00a4 1B78     		ldrb	r3, [r3]
 1227 00a6 184A     		ldr	r2, .L73+12
 1228 00a8 D25C     		ldrb	r2, [r2, r3]
 1229 00aa 013A     		subs	r2, r2, #1
 1230 00ac D1B2     		uxtb	r1, r2
 1231 00ae 164A     		ldr	r2, .L73+12
 1232 00b0 D154     		strb	r1, [r2, r3]
1139:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Sensor active, decrement debounce counter */
1140:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(CapSense_1_debounceCounter[debounceIndex] == 0u)
 1233              		.loc 1 1140 0
 1234 00b2 0823     		movs	r3, #8
 1235 00b4 FB18     		adds	r3, r7, r3
 1236 00b6 1B78     		ldrb	r3, [r3]
 1237 00b8 134A     		ldr	r2, .L73+12
 1238 00ba D35C     		ldrb	r3, [r2, r3]
 1239 00bc 002B     		cmp	r3, #0
 1240 00be 0ED1     		bne	.L67
1141:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1142:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_SetBitValue(CapSense_1_sensorOnMask, sensor, 1u);
 1241              		.loc 1 1142 0
 1242 00c0 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 43


 1243 00c2 0F4B     		ldr	r3, .L73+4
 1244 00c4 0122     		movs	r2, #1
 1245 00c6 1800     		movs	r0, r3
 1246 00c8 FFF7FEFF 		bl	CapSense_1_SetBitValue
 1247 00cc 07E0     		b	.L67
 1248              	.L68:
1143:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1144:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1145:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1146:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1147:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1148:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_debounceCounter[debounceIndex] = debounce;
 1249              		.loc 1 1148 0
 1250 00ce 0823     		movs	r3, #8
 1251 00d0 FB18     		adds	r3, r7, r3
 1252 00d2 1B78     		ldrb	r3, [r3]
 1253 00d4 0C4A     		ldr	r2, .L73+12
 1254 00d6 0921     		movs	r1, #9
 1255 00d8 7918     		adds	r1, r7, r1
 1256 00da 0978     		ldrb	r1, [r1]
 1257 00dc D154     		strb	r1, [r2, r3]
 1258              	.L67:
1149:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1150:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1151:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1152:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return ((uint32)((0u != CapSense_1_GetBitValue(CapSense_1_sensorOnMask, sensor)) ? 1u : 0u));
 1259              		.loc 1 1152 0
 1260 00de 7A68     		ldr	r2, [r7, #4]
 1261 00e0 074B     		ldr	r3, .L73+4
 1262 00e2 1100     		movs	r1, r2
 1263 00e4 1800     		movs	r0, r3
 1264 00e6 FFF7FEFF 		bl	CapSense_1_GetBitValue
 1265 00ea 031E     		subs	r3, r0, #0
 1266 00ec 01D0     		beq	.L70
 1267              		.loc 1 1152 0 is_stmt 0 discriminator 1
 1268 00ee 0123     		movs	r3, #1
 1269 00f0 00E0     		b	.L72
 1270              	.L70:
 1271              		.loc 1 1152 0 discriminator 2
 1272 00f2 0023     		movs	r3, #0
 1273              	.L72:
1153:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1274              		.loc 1 1153 0 is_stmt 1 discriminator 5
 1275 00f4 1800     		movs	r0, r3
 1276 00f6 BD46     		mov	sp, r7
 1277 00f8 04B0     		add	sp, sp, #16
 1278              		@ sp needed
 1279 00fa 80BD     		pop	{r7, pc}
 1280              	.L74:
 1281              		.align	2
 1282              	.L73:
 1283 00fc 00000000 		.word	CapSense_1_widgetNumber
 1284 0100 00000000 		.word	CapSense_1_sensorOnMask
 1285 0104 00000000 		.word	CapSense_1_sensorSignal
 1286 0108 10000000 		.word	CapSense_1_debounceCounter
 1287              		.cfi_endproc
 1288              	.LFE50:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 44


 1289              		.size	CapSense_1_CheckIsSensorActive, .-CapSense_1_CheckIsSensorActive
 1290              		.section	.text.CapSense_1_CheckIsWidgetActive,"ax",%progbits
 1291              		.align	2
 1292              		.global	CapSense_1_CheckIsWidgetActive
 1293              		.code	16
 1294              		.thumb_func
 1295              		.type	CapSense_1_CheckIsWidgetActive, %function
 1296              	CapSense_1_CheckIsWidgetActive:
 1297              	.LFB51:
1154:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1155:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1156:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1157:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_CheckIsWidgetActive
1158:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1159:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1160:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1161:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Compares the CapSense_sensorSignal[] array element to the finger threshold of
1162:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * the widget it belongs to. The hysteresis and debounce are taken into account.
1163:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * The hysteresis is added or subtracted from the finger threshold based on whether
1164:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the sensor is currently active. If the sensor is active, the threshold is
1165:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  lowered by the hysteresis amount. If the sensor is inactive, the threshold
1166:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  is raised by the hysteresis amount.
1167:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * The debounce counter added to the sensor active transition.
1168:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * This function updates CapSense_sensorOnMask[] array element
1169:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1170:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1171:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1172:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1173:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1174:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are
1175:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
1176:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1177:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1178:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  rawDataIndex[]: Contains the  1st sensor position in the widget
1179:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1180:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1181:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1182:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1183:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1184:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_CheckIsWidgetActive(uint32 widget)
1185:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1298              		.loc 1 1185 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 24
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302 0000 80B5     		push	{r7, lr}
 1303              		.cfi_def_cfa_offset 8
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 86B0     		sub	sp, sp, #24
 1307              		.cfi_def_cfa_offset 32
 1308 0004 00AF     		add	r7, sp, #0
 1309              		.cfi_def_cfa_register 7
 1310 0006 7860     		str	r0, [r7, #4]
1186:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 rawIndex = (uint32)CapSense_1_rawDataIndex[widget];
 1311              		.loc 1 1186 0
 1312 0008 0023     		movs	r3, #0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 45


 1313 000a 7B61     		str	r3, [r7, #20]
1187:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 numOfSensors = (uint32)CapSense_1_numberOfSensors[widget] + rawIndex;
 1314              		.loc 1 1187 0
 1315 000c 0123     		movs	r3, #1
 1316 000e 1A00     		movs	r2, r3
 1317 0010 7B69     		ldr	r3, [r7, #20]
 1318 0012 D318     		adds	r3, r2, r3
 1319 0014 FB60     		str	r3, [r7, #12]
1188:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 state = 0u;
 1320              		.loc 1 1188 0
 1321 0016 0023     		movs	r3, #0
 1322 0018 3B61     		str	r3, [r7, #16]
 1323              	.L77:
1189:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1190:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Check all sensors of widget */
1191:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     do
1192:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1193:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_CheckIsSensorActive((uint32)rawIndex) != 0u)
 1324              		.loc 1 1193 0
 1325 001a 7B69     		ldr	r3, [r7, #20]
 1326 001c 1800     		movs	r0, r3
 1327 001e FFF7FEFF 		bl	CapSense_1_CheckIsSensorActive
 1328 0022 031E     		subs	r3, r0, #0
 1329 0024 01D0     		beq	.L76
1194:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1195:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             state = CapSense_1_SENSOR_IS_ACTIVE;
 1330              		.loc 1 1195 0
 1331 0026 0123     		movs	r3, #1
 1332 0028 3B61     		str	r3, [r7, #16]
 1333              	.L76:
1196:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1197:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         rawIndex++;
 1334              		.loc 1 1197 0
 1335 002a 7B69     		ldr	r3, [r7, #20]
 1336 002c 0133     		adds	r3, r3, #1
 1337 002e 7B61     		str	r3, [r7, #20]
1198:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1199:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(rawIndex < numOfSensors);
 1338              		.loc 1 1199 0
 1339 0030 7A69     		ldr	r2, [r7, #20]
 1340 0032 FB68     		ldr	r3, [r7, #12]
 1341 0034 9A42     		cmp	r2, r3
 1342 0036 F0D3     		bcc	.L77
1200:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1201:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1202:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1203:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return state;
 1343              		.loc 1 1203 0
 1344 0038 3B69     		ldr	r3, [r7, #16]
1204:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1345              		.loc 1 1204 0
 1346 003a 1800     		movs	r0, r3
 1347 003c BD46     		mov	sp, r7
 1348 003e 06B0     		add	sp, sp, #24
 1349              		@ sp needed
 1350 0040 80BD     		pop	{r7, pc}
 1351              		.cfi_endproc
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 46


 1352              	.LFE51:
 1353              		.size	CapSense_1_CheckIsWidgetActive, .-CapSense_1_CheckIsWidgetActive
 1354 0042 C046     		.section	.text.CapSense_1_CheckIsAnyWidgetActive,"ax",%progbits
 1355              		.align	2
 1356              		.global	CapSense_1_CheckIsAnyWidgetActive
 1357              		.code	16
 1358              		.thumb_func
 1359              		.type	CapSense_1_CheckIsAnyWidgetActive, %function
 1360              	CapSense_1_CheckIsAnyWidgetActive:
 1361              	.LFB52:
1205:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1206:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1207:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1208:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_CheckIsAnyWidgetActive
1209:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1210:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1211:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1212:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Compares all the sensors of the CapSense_1_Signal[] array to their finger
1213:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  threshold. Calls CapSense_1_CheckIsWidgetActive() for each widget so
1214:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the CapSense_1_sensorOnMask[] array is up to date after calling this
1215:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  function.
1216:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1217:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1218:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1219:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1220:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1221:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
1222:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1223:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1224:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1225:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1226:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1227:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1228:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1229:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1230:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_CheckIsAnyWidgetActive(void)
1231:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1362              		.loc 1 1231 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 8
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366 0000 80B5     		push	{r7, lr}
 1367              		.cfi_def_cfa_offset 8
 1368              		.cfi_offset 7, -8
 1369              		.cfi_offset 14, -4
 1370 0002 82B0     		sub	sp, sp, #8
 1371              		.cfi_def_cfa_offset 16
 1372 0004 00AF     		add	r7, sp, #0
 1373              		.cfi_def_cfa_register 7
1232:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1233:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 i;
1234:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 state = 0u;
 1374              		.loc 1 1234 0
 1375 0006 0023     		movs	r3, #0
 1376 0008 3B60     		str	r3, [r7]
1235:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     
1236:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_WIDGET_COUNT; i++)
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 47


 1377              		.loc 1 1236 0
 1378 000a 0023     		movs	r3, #0
 1379 000c 7B60     		str	r3, [r7, #4]
 1380 000e 0AE0     		b	.L80
 1381              	.L82:
1237:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1238:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_CheckIsWidgetActive(i) != 0u)
 1382              		.loc 1 1238 0
 1383 0010 7B68     		ldr	r3, [r7, #4]
 1384 0012 1800     		movs	r0, r3
 1385 0014 FFF7FEFF 		bl	CapSense_1_CheckIsWidgetActive
 1386 0018 031E     		subs	r3, r0, #0
 1387 001a 01D0     		beq	.L81
1239:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1240:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             state = CapSense_1_WIDGET_IS_ACTIVE;
 1388              		.loc 1 1240 0
 1389 001c 0123     		movs	r3, #1
 1390 001e 3B60     		str	r3, [r7]
 1391              	.L81:
1236:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1392              		.loc 1 1236 0 discriminator 2
 1393 0020 7B68     		ldr	r3, [r7, #4]
 1394 0022 0133     		adds	r3, r3, #1
 1395 0024 7B60     		str	r3, [r7, #4]
 1396              	.L80:
1236:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1397              		.loc 1 1236 0 is_stmt 0 discriminator 1
 1398 0026 7B68     		ldr	r3, [r7, #4]
 1399 0028 002B     		cmp	r3, #0
 1400 002a F1D0     		beq	.L82
1241:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1242:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1243:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     
1244:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1245:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1246:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return state;
 1401              		.loc 1 1246 0 is_stmt 1
 1402 002c 3B68     		ldr	r3, [r7]
1247:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1403              		.loc 1 1247 0
 1404 002e 1800     		movs	r0, r3
 1405 0030 BD46     		mov	sp, r7
 1406 0032 02B0     		add	sp, sp, #8
 1407              		@ sp needed
 1408 0034 80BD     		pop	{r7, pc}
 1409              		.cfi_endproc
 1410              	.LFE52:
 1411              		.size	CapSense_1_CheckIsAnyWidgetActive, .-CapSense_1_CheckIsAnyWidgetActive
 1412 0036 C046     		.section	.text.CapSense_1_EnableWidget,"ax",%progbits
 1413              		.align	2
 1414              		.global	CapSense_1_EnableWidget
 1415              		.code	16
 1416              		.thumb_func
 1417              		.type	CapSense_1_EnableWidget, %function
 1418              	CapSense_1_EnableWidget:
 1419              	.LFB53:
1248:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 48


1249:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1250:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1251:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_EnableWidget
1252:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1253:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1254:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1255:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Enables all the widget elements (sensors) to the scanning process.
1256:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1257:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1258:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1259:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1260:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1261:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1262:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1263:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1264:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
1265:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
1266:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
1267:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1268:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
1269:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1270:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor doesn't scan by CapSense_1_ScanEnabledWidgets().
1271:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor scans by CapSense_1_ScanEnabledWidgets().
1272:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1273:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1274:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1275:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1276:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1277:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_EnableWidget(uint32 widget)
1278:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1420              		.loc 1 1278 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 16
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424 0000 80B5     		push	{r7, lr}
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 7, -8
 1427              		.cfi_offset 14, -4
 1428 0002 84B0     		sub	sp, sp, #16
 1429              		.cfi_def_cfa_offset 24
 1430 0004 00AF     		add	r7, sp, #0
 1431              		.cfi_def_cfa_register 7
 1432 0006 7860     		str	r0, [r7, #4]
1279:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1280:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 rawIndex = CapSense_1_rawDataIndex[widget];
 1433              		.loc 1 1280 0
 1434 0008 0F23     		movs	r3, #15
 1435 000a FB18     		adds	r3, r7, r3
 1436 000c 0022     		movs	r2, #0
 1437 000e 1A70     		strb	r2, [r3]
1281:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 numOfSensors = CapSense_1_numberOfSensors[widget] + rawIndex;
 1438              		.loc 1 1281 0
 1439 0010 0121     		movs	r1, #1
 1440 0012 0E23     		movs	r3, #14
 1441 0014 FB18     		adds	r3, r7, r3
 1442 0016 0F22     		movs	r2, #15
 1443 0018 BA18     		adds	r2, r7, r2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 49


 1444 001a 1278     		ldrb	r2, [r2]
 1445 001c 8A18     		adds	r2, r1, r2
 1446 001e 1A70     		strb	r2, [r3]
 1447              	.L85:
1282:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1283:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Enable all sensors of widget */
1284:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     do
1285:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1286:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_SetBitValue(CapSense_1_sensorEnableMask, (uint32)rawIndex, 1u);
 1448              		.loc 1 1286 0 discriminator 1
 1449 0020 0F23     		movs	r3, #15
 1450 0022 FB18     		adds	r3, r7, r3
 1451 0024 1978     		ldrb	r1, [r3]
 1452 0026 0C4B     		ldr	r3, .L86
 1453 0028 0122     		movs	r2, #1
 1454 002a 1800     		movs	r0, r3
 1455 002c FFF7FEFF 		bl	CapSense_1_SetBitValue
1287:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         rawIndex++;
 1456              		.loc 1 1287 0 discriminator 1
 1457 0030 0F23     		movs	r3, #15
 1458 0032 FB18     		adds	r3, r7, r3
 1459 0034 1A78     		ldrb	r2, [r3]
 1460 0036 0F23     		movs	r3, #15
 1461 0038 FB18     		adds	r3, r7, r3
 1462 003a 0132     		adds	r2, r2, #1
 1463 003c 1A70     		strb	r2, [r3]
1288:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1289:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(rawIndex < numOfSensors);
 1464              		.loc 1 1289 0 discriminator 1
 1465 003e 0F23     		movs	r3, #15
 1466 0040 FA18     		adds	r2, r7, r3
 1467 0042 0E23     		movs	r3, #14
 1468 0044 FB18     		adds	r3, r7, r3
 1469 0046 1278     		ldrb	r2, [r2]
 1470 0048 1B78     		ldrb	r3, [r3]
 1471 004a 9A42     		cmp	r2, r3
 1472 004c E8D3     		bcc	.L85
1290:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1473              		.loc 1 1290 0
 1474 004e C046     		nop
 1475 0050 BD46     		mov	sp, r7
 1476 0052 04B0     		add	sp, sp, #16
 1477              		@ sp needed
 1478 0054 80BD     		pop	{r7, pc}
 1479              	.L87:
 1480 0056 C046     		.align	2
 1481              	.L86:
 1482 0058 00000000 		.word	CapSense_1_sensorEnableMask
 1483              		.cfi_endproc
 1484              	.LFE53:
 1485              		.size	CapSense_1_EnableWidget, .-CapSense_1_EnableWidget
 1486              		.section	.text.CapSense_1_DisableWidget,"ax",%progbits
 1487              		.align	2
 1488              		.global	CapSense_1_DisableWidget
 1489              		.code	16
 1490              		.thumb_func
 1491              		.type	CapSense_1_DisableWidget, %function
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 50


 1492              	CapSense_1_DisableWidget:
 1493              	.LFB54:
1291:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1292:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1293:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1294:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_DisableWidget
1295:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1296:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1297:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1298:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Disables all the widget elements (sensors) from the scanning process.
1299:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1300:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1301:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1302:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1303:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1304:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1305:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1306:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1307:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
1308:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
1309:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
1310:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1311:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
1312:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1313:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor isn't scanned by CapSense_1_ScanEnabledWidgets().
1314:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor is scanned by CapSense_1_ScanEnabledWidgets().
1315:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1316:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1317:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1318:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1319:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1320:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_DisableWidget(uint32 widget)
1321:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1494              		.loc 1 1321 0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 16
 1497              		@ frame_needed = 1, uses_anonymous_args = 0
 1498 0000 80B5     		push	{r7, lr}
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 84B0     		sub	sp, sp, #16
 1503              		.cfi_def_cfa_offset 24
 1504 0004 00AF     		add	r7, sp, #0
 1505              		.cfi_def_cfa_register 7
 1506 0006 7860     		str	r0, [r7, #4]
1322:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 rawIndex = CapSense_1_rawDataIndex[widget];
 1507              		.loc 1 1322 0
 1508 0008 0F23     		movs	r3, #15
 1509 000a FB18     		adds	r3, r7, r3
 1510 000c 0022     		movs	r2, #0
 1511 000e 1A70     		strb	r2, [r3]
1323:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 numOfSensors = CapSense_1_numberOfSensors[widget] + rawIndex;
 1512              		.loc 1 1323 0
 1513 0010 0121     		movs	r1, #1
 1514 0012 0E23     		movs	r3, #14
 1515 0014 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 51


 1516 0016 0F22     		movs	r2, #15
 1517 0018 BA18     		adds	r2, r7, r2
 1518 001a 1278     		ldrb	r2, [r2]
 1519 001c 8A18     		adds	r2, r1, r2
 1520 001e 1A70     		strb	r2, [r3]
 1521              	.L89:
1324:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1325:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Disable all sensors of widget */
1326:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     do
1327:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1328:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1329:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_SetBitValue(CapSense_1_sensorEnableMask, (uint32)rawIndex, 0u);
 1522              		.loc 1 1329 0 discriminator 1
 1523 0020 0F23     		movs	r3, #15
 1524 0022 FB18     		adds	r3, r7, r3
 1525 0024 1978     		ldrb	r1, [r3]
 1526 0026 0C4B     		ldr	r3, .L90
 1527 0028 0022     		movs	r2, #0
 1528 002a 1800     		movs	r0, r3
 1529 002c FFF7FEFF 		bl	CapSense_1_SetBitValue
1330:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         rawIndex++;
 1530              		.loc 1 1330 0 discriminator 1
 1531 0030 0F23     		movs	r3, #15
 1532 0032 FB18     		adds	r3, r7, r3
 1533 0034 1A78     		ldrb	r2, [r3]
 1534 0036 0F23     		movs	r3, #15
 1535 0038 FB18     		adds	r3, r7, r3
 1536 003a 0132     		adds	r2, r2, #1
 1537 003c 1A70     		strb	r2, [r3]
1331:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1332:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(rawIndex < numOfSensors);
 1538              		.loc 1 1332 0 discriminator 1
 1539 003e 0F23     		movs	r3, #15
 1540 0040 FA18     		adds	r2, r7, r3
 1541 0042 0E23     		movs	r3, #14
 1542 0044 FB18     		adds	r3, r7, r3
 1543 0046 1278     		ldrb	r2, [r2]
 1544 0048 1B78     		ldrb	r3, [r3]
 1545 004a 9A42     		cmp	r2, r3
 1546 004c E8D3     		bcc	.L89
1333:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1547              		.loc 1 1333 0
 1548 004e C046     		nop
 1549 0050 BD46     		mov	sp, r7
 1550 0052 04B0     		add	sp, sp, #16
 1551              		@ sp needed
 1552 0054 80BD     		pop	{r7, pc}
 1553              	.L91:
 1554 0056 C046     		.align	2
 1555              	.L90:
 1556 0058 00000000 		.word	CapSense_1_sensorEnableMask
 1557              		.cfi_endproc
 1558              	.LFE54:
 1559              		.size	CapSense_1_DisableWidget, .-CapSense_1_DisableWidget
 1560              		.section	.text.CapSense_1_IIR4Filter,"ax",%progbits
 1561              		.align	2
 1562              		.global	CapSense_1_IIR4Filter
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 52


 1563              		.code	16
 1564              		.thumb_func
 1565              		.type	CapSense_1_IIR4Filter, %function
 1566              	CapSense_1_IIR4Filter:
 1567              	.LFB55:
1334:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1335:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1336:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if(CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT)
1337:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1338:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_FindMaximum
1339:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1340:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1341:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1342:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Finds the index of the maximum element within a defined centroid. Checks
1343:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_sensorSignal[] within a defined centroid and
1344:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  returns the index of the maximum element. The values below the finger threshold are
1345:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  ignored.
1346:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The centroid is defined by offset of the first element and a number of elements - count.
1347:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The diplexed centroid requires at least two consecutive elements above
1348:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  FingerThreshold to find the index of the maximum element.
1349:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1350:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1351:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  offset:  Start index of centroid in CapSense_1_sensorSignal[] array.
1352:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  count:   number of elements within centroid.
1353:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  fingerThreshold:  Finger threshold.
1354:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  diplex:   pointer to diplex table.
1355:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1356:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1357:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns the index of the maximum element within a defined centroid.
1358:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If the index of the maximum element isn't found it returns 0xFF.
1359:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1360:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1361:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_startOfSlider[] - contains the index of the first slider element
1362:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1363:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1364:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1365:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1366:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1367:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_IS_DIPLEX_SLIDER)
1368:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 CapSense_1_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uint8
1369:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #else
1370:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 CapSense_1_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
1371:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1372:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1373:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 i;
1374:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1375:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 curPos = 0u;
1376:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* No centroid at Start */
1377:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 curCntrdSize = 0u;
1378:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 curCtrdStartPos = CapSense_1_MAXIMUM_CENTROID;
1379:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Biggest centroid is zero */
1380:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 biggestCtrdSize = 0u;
1381:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
1382:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1383:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 maximum = CapSense_1_MAXIMUM_CENTROID;
1384:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1385:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 temp = 0u;
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 53


1386:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 *startOfSlider = &CapSense_1_sensorSignal[offset];
1387:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1388:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1389:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(diplex != 0u)
1390:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1391:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Initialize */
1392:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 i = 0u;
1393:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1394:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Make slider x2 as Diplexed */
1395:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 count <<= 1u;
1396:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 while(1u)
1397:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1398:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
1399:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1400:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if (curCtrdStartPos == CapSense_1_MAXIMUM_CENTROID)
1401:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1402:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* Start of centroid */
1403:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCtrdStartPos = i;
1404:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCntrdSize++;
1405:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1406:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         else
1407:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1408:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCntrdSize++;
1409:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1410:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1411:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else   /* Select biggest and indicate zero start */
1412:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1413:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if(curCntrdSize > 0u)
1414:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1415:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* We are at the end of current */
1416:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
1417:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1418:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
1419:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
1420:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1421:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1422:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCntrdSize = 0u;
1423:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCtrdStartPos = CapSense_1_MAXIMUM_CENTROID;
1424:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1425:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1426:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1427:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     i++;
1428:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     curPos = diplex[i];
1429:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if(i == count)
1430:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1431:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         break;
1432:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1433:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1434:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1435:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Find biggest centroid if two are same size, last one wins
1436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                        We are at the end of current */
1437:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize)
1438:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1439:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
1440:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
1441:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1442:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 54


1443:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
1444:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1445:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Without diplexing */
1446:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 biggestCtrdSize = count;
1447:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1448:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1449:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Check centroid size */
1451:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (CapSense_1_IS_NON_DIPLEX_SLIDER)
1452:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
1453:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #else
1454:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if(biggestCtrdSize >= 2u)
1455:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (CapSense_1_IS_NON_DIPLEX_SLIDER) */
1456:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1457:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
1458:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1459:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER)
1460:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (diplex == 0u)
1461:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1462:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 curPos = i;
1463:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1464:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             else
1465:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1466:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 curPos = diplex[i];
1467:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1468:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #elif (CapSense_1_IS_DIPLEX_SLIDER)
1469:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curPos = diplex[i];
1470:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER) 
1471:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Looking for greater element within centroid */
1472:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
1473:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1474:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if(startOfSlider[curPos] > temp)
1475:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1476:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 maximum = i;
1477:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 temp = startOfSlider[curPos];
1478:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1479:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1480:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1481:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1482:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
1483:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             for (i = 0u; i < count; i++)
1484:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1485:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Looking for greater element within centroid */
1486:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
1487:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1488:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if(startOfSlider[i] > temp)
1489:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1490:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         maximum = i;
1491:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         temp = startOfSlider[i];
1492:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1493:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1494:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1495:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1496:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (maximum);
1497:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1498:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1499:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 55


1500:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1501:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_CalcCentroid
1502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1503:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1504:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1505:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value calculated according to the index of the maximum element and API
1506:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  resolution.
1507:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1508:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1509:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  type:  widget type.
1510:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  diplex:  pointer to diplex table.
1511:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1512:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  offset:   Start index of centroid in CapSense_1_sensorSignal[] array.
1513:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  count:    Number of elements within centroid.
1514:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1515:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  API resolution.
1516:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  noiseThreshold:  Noise threshold.
1517:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1518:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1519:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value of the slider.
1520:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1521:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1522:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1523:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1524:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1525:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TOTAL_TRACKPAD_GESTURES_COUNT > 0u)
1526:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 CapSense_1_CalcCentroid(uint8 maximum, uint8 offset,
1527:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         uint8 count, uint32 resolution, uint16 noiseThreshold)
1528:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #else
1529:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 CapSense_1_CalcCentroid(uint8 maximum, uint8 offset,
1530:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         uint8 count, uint16 resolution, uint16 noiseThreshold)
1531:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TOTAL_TRACKPAD_GESTURES_COUNT > 0u) */
1532:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1533:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC_COU
1534:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posPrev;
1535:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posNext;
1536:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC
1537:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1538:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Helps during centroid calculation */
1539:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT)
1540:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             static uint16 CapSense_1_centroid[3u];
1541:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif  /* (CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT) */
1542:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1543:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1544:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 pos;
1545:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1546:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1547:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 position;
1548:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 numerator;
1549:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         int32 denominator;
1550:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1551:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16  *startOfSlider = &CapSense_1_sensorSignal[offset];
1552:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1553:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC_COU
1554:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             posPrev = 0u;
1555:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC
1556:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 56


1557:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_ADD_SLIDER_TYPE)
1558:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(type == CapSense_1_TYPE_RADIAL_SLIDER)
1559:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1560:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_ADD_SLIDER_TYPE) */
1561:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1562:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1563:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Copy Signal to the centroid array */
1564:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_centroid[CapSense_1_POS] = startOfSlider[maximum];
1565:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1566:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check borders for ROTARY Slider */
1567:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1568:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1569:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[count - 1u];
1570:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[1u];
1571:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1572:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1573:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1574:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[maximum - 1u];
1575:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[0u];
1576:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1577:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else                                /* Not first Not last */
1578:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1579:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[maximum - 1u];
1580:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[maximum + 1u];
1581:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1582:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1583:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1584:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_ADD_SLIDER_TYPE)
1585:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1586:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
1587:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1588:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_ADD_SLIDER_TYPE) */
1589:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1590:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC
1591:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #if (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER)
1592:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate next and previous near to maximum */
1593:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if(diplex == 0u)
1594:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1595:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         pos     = maximum;
1596:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posPrev = maximum - 1u;
1597:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posNext = maximum + 1u;
1598:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1599:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else
1600:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1601:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         pos     = diplex[maximum];
1602:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1603:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posNext = diplex[maximum + 1u];
1604:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         count <<= 1u;
1605:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1606:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #elif (CapSense_1_IS_DIPLEX_SLIDER)
1607:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate next and previous near to maximum */
1608:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     pos     = diplex[maximum];
1609:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1610:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posNext = diplex[maximum + 1u];
1611:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     count <<= 1u;
1612:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #else
1613:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate next and previous near to maximum */
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 57


1614:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (maximum >= 1u)
1615:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posPrev = maximum - 1u;
1617:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1618:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posNext = maximum + 1u;
1619:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #endif /* (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER) */
1620:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1621:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Copy Signal to the centroid array */
1622:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #if (CapSense_1_IS_DIPLEX_SLIDER)
1623:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS] = startOfSlider[pos];
1624:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #else
1625:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS] = startOfSlider[maximum];
1626:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1627:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1628:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check borders for LINEAR Slider */
1629:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1630:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1631:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = 0u;
1632:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[posNext];
1633:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1634:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1635:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1636:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[posPrev];
1637:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = 0u;
1638:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1639:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else                                /* Not first Not last */
1640:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1641:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[posPrev];
1642:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[posNext];
1643:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1644:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_1_TOTAL_TOUCH_PADS_BAS
1645:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1646:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_ADD_SLIDER_TYPE)
1647:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1648:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_ADD_SLIDER_TYPE) */
1649:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1650:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Subtract noiseThreshold */
1651:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_centroid[CapSense_1_POS_PREV] > noiseThreshold)
1652:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1653:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_PREV] -= noiseThreshold;
1654:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1655:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1656:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1657:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_PREV] = 0u;
1658:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1659:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1660:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Maximum always greater than fingerThreshold, so greater than noiseThreshold */
1661:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_centroid[CapSense_1_POS] -= noiseThreshold;
1662:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1663:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Subtract noiseThreshold */
1664:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_centroid[CapSense_1_POS_NEXT] > noiseThreshold)
1665:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1666:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_NEXT] -= noiseThreshold;
1667:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1668:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1669:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1670:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_NEXT] = 0u;
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 58


1671:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1672:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1673:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1674:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Si+1 - Si-1 */
1675:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         numerator = (uint32) CapSense_1_centroid[CapSense_1_POS_NEXT] -
1676:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     (uint32) CapSense_1_centroid[CapSense_1_POS_PREV];
1677:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1678:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Si+1 + Si + Si-1 */
1679:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         denominator = (int32) CapSense_1_centroid[CapSense_1_POS_PREV] +
1680:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                       (int32) CapSense_1_centroid[CapSense_1_POS] +
1681:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                       (int32) CapSense_1_centroid[CapSense_1_POS_NEXT];
1682:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1683:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* (numerator/denominator) + maximum */
1684:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1685:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1686:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if(CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1687:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Only required for RADIAL Slider */
1688:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(denominator < 0)
1689:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1690:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1691:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1692:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1693:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1694:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         denominator *= (int16)resolution;
1695:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1696:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Round result and put it to uint8 */
1697:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_1_CENTROID_ROUND_VALUE));
1698:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1699:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (position);
1700:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1701:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT) */
1702:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1703:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1704:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1705:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1706:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetCentroidPos
1707:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1708:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1709:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1710:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Checks the CapSense_1_Signal[ ] array for a centroid within
1711:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1712:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1713:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  result if enabled.
1714:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1715:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1716:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Widget number.
1717:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1718:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  #define CapSense_1_"widget_name"__LS           5
1719:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1720:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1721:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value of the linear slider.
1722:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1723:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1724:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1725:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1726:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1727:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 59


1728:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1729:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1730:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1731:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1732:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1733:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1734:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Note:
1735:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1736:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1737:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1738:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  that noise will not generate a false centroid.
1739:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1740:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_GetCentroidPos(uint32 widget)
1741:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1742:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1743:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             const uint8 *diplex;
1744:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1745:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1746:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)
1747:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posIndex;
1748:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 firstTimeIndex = CapSense_1_posFiltersData[widget];
1749:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posFiltersMask = CapSense_1_posFiltersMask[widget];
1750:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1751:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1752:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1753:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1754:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 tempPos;
1755:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) 
1756:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                *   (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK
1757:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                */
1758:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1759:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 maximum;
1760:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 position;
1761:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 offset = CapSense_1_rawDataIndex[widget];
1762:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 count = CapSense_1_numberOfSensors[widget];
1763:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1764:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1765:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(widget < CapSense_1_TOTAL_DIPLEXED_SLIDERS_COUNT)
1766:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1767:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 maximum = CapSense_1_diplexTable[widget];
1768:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 diplex = &CapSense_1_diplexTable[maximum];
1769:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1770:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
1771:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1772:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 diplex = 0u;
1773:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1774:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1775:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1776:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Find Maximum within centroid */
1777:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1778:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint16)CapSense_1_fingerThreshold[widg
1779:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
1780:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint16)CapSense_1_fingerThreshold[widg
1781:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1782:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1783:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (maximum != 0xFFu)
1784:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 60


1785:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Calculate centroid */
1786:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = (uint16) CapSense_1_CalcCentroid(maximum,
1787:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                          offset, count, CapSense_1_centroidMult[widget], CapSense_1_noiseThreshold[
1788:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1789:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)
1790:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1791:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
1792:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1793:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate position to store filters data */
1794:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1795:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1796:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (0u == CapSense_1_posFiltersData[firstTimeIndex])
1797:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1798:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Init filters */
1799:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[posIndex] = (uint8) position;
1800:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if ((0u != (CapSense_1_MEDIAN_FILTER & \
1801:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1802:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                              (0u != (CapSense_1_AVERAGING_FILTER & \
1803:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1804:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1805:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER)) ||
1806:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER)) )
1807:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1808:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] = (uint8) position;
1809:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1810:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & \
1811:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1812:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *   (0u != (CapSense_1_AVERAGING_FILTER & \
1813:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1814:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1815:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1816:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[firstTimeIndex] = 1u;
1817:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1818:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else
1819:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1820:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Do filtering */
1821:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTER
1822:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))
1823:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1824:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
1825:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_MedianFilter(position,
1826:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1827:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1828:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] =
1829:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
1830:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
1831:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1832:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /*(0u != (CapSense_1_MEDIAN_FILTER &
1833:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *         CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1834:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1835:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1836:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if(0u!=(CapSense_1_AVERAGING_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTER
1837:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER))
1838:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1839:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
1840:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_AveragingFilter(position,
1841:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 61


1842:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1843:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex+1u]=CapSense_1_posFiltersData[po
1844:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
1845:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1846:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_AVERAGING_FILTER & \
1847:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1848:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1849:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1850:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR2_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_
1851:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR2_FILTER))
1852:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1853:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR2Filter(position,
1854:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
1855:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
1856:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1857:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR2_FILTER & \
1858:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1859:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1860:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1861:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR4_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_
1862:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR4_FILTER))
1863:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1864:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR4Filter(position,
1865:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
1866:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
1867:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1868:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR4_FILTER & \
1869:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1870:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1871:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1872:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_JITTER_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTER
1873:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_JITTER_FILTER))
1874:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1875:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_JitterFilter(position,
1876:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
1877:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
1878:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1879:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_JITTER_FILTER & \
1880:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1881:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1882:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1883:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1884:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1885:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1886:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1887:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1888:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1889:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Maximum wasn't found */
1890:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = 0xFFFFu;
1891:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1892:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if(0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)
1893:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Reset filters */
1894:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
1895:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1896:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_posFiltersData[firstTimeIndex] = 0u;
1897:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1898:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK) */
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 62


1899:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1900:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1901:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1902:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (position);
1903:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1904:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT >
1905:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1906:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1907:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1908:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1909:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetRadialCentroidPos
1910:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1911:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1912:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1913:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Checks the CapSense_1_Signal[ ] array for a centroid within
1914:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1915:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1916:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  result if enabled.
1917:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1918:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1919:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Widget number.
1920:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1921:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  #define CapSense_1_"widget_name"__RS           5
1922:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1923:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1924:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value of the radial slider.
1925:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1926:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1927:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
1928:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1929:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1930:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1931:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1932:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1933:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1934:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1935:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1936:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Note:
1937:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1938:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1939:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1940:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  that noise will not generate a false centroid.
1941:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1942:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1943:Generated_Source\PSoC4/CapSense_1_CSHL.c ****      uint16 CapSense_1_GetRadialCentroidPos(uint32 widget)
1944:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1945:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)
1946:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posIndex;
1947:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 firstTimeIndex = CapSense_1_posFiltersData[widget];
1948:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posFiltersMask = CapSense_1_posFiltersMask[widget];
1949:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1950:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1951:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1952:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1953:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 tempPos;
1954:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) 
1955:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                *   (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 63


1956:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                */
1957:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1958:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 maximum;
1959:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 position;
1960:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 offset = CapSense_1_rawDataIndex[widget];
1961:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 count = CapSense_1_numberOfSensors[widget];
1962:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1963:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Find Maximum within centroid */
1964:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1965:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint16)CapSense_1_fingerThreshold[widg
1966:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
1967:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint16)CapSense_1_fingerThreshold[widg
1968:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1969:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1970:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (maximum != CapSense_1_MAXIMUM_CENTROID)
1971:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1972:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Calculate centroid */
1973:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = (uint16) CapSense_1_CalcCentroid(maximum,
1974:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                          offset, count, CapSense_1_centroidMult[widget], CapSense_1_noiseThreshold[
1975:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1976:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)
1977:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1978:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
1979:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1980:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate position to store filters data */
1981:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1982:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1983:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (0u == CapSense_1_posFiltersData[firstTimeIndex])
1984:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1985:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Init filters */
1986:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[posIndex] = (uint8) position;
1987:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if ((0u != (CapSense_1_MEDIAN_FILTER & \
1988:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1989:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                              (0u != (CapSense_1_AVERAGING_FILTER & \
1990:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1991:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1992:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))  ||
1993:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER)) )
1994:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1995:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] = (uint8) position;
1996:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1997:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & \
1998:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1999:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *   (0u != (CapSense_1_AVERAGING_FILTER & \
2000:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)))
2001:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2002:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2003:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[firstTimeIndex] = 1u;
2004:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
2005:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else
2006:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
2007:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Do filtering */
2008:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTER
2009:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))
2010:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2011:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
2012:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_MedianFilter(position,
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 64


2013:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                         CapSense_1_posFiltersData[p
2014:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                         CapSense_1_posFiltersData[p
2015:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] =
2016:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                               CapSense_1_posFilters
2017:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
2018:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2019:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_MEDIAN_FILTER &
2020:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2021:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2022:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2023:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_AVERAGING_FILTER & \
2024:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2025:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER))
2026:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2027:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
2028:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_AveragingFilter(position,
2029:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2030:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2031:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex+1u]= CapSense_1_posFiltersData[p
2032:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
2033:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2034:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_AVERAGING_FILTER & \
2035:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2036:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2037:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2038:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR2_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_
2039:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR2_FILTER))
2040:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2041:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR2Filter(position,
2042:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2043:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
2044:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2045:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR2_FILTER &
2046:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2047:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2048:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2049:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR4_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_
2050:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR4_FILTER))
2051:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2052:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR4Filter(position,
2053:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2054:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
2055:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2056:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR4_FILTER &
2057:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2058:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2059:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2060:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_JITTER_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTER
2061:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_JITTER_FILTER))
2062:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2063:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_JitterFilter(position,
2064:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                          CapSense_1_posFiltersData[
2065:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
2066:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2067:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_JITTER_FILTER &
2068:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2069:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 65


2070:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
2071:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2072:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2073:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2074:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2075:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
2076:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2077:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Maximum was not found */
2078:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = 0xFFFFu;
2079:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2080:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)
2081:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Reset filters */
2082:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if((posFiltersMask & CapSense_1_ANY_POS_FILTER) != 0u)
2083:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2084:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_posFiltersData[firstTimeIndex] = 0u;
2085:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2086:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2087:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2088:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2089:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (position);
2090:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2091:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT >
2092:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2093:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2094:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if(CapSense_1_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u)
2095:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2096:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetTouchCentroidPos
2097:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2098:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2099:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2100:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If a finger is present on a touchpad, this function calculates the X and Y
2101:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  position of the finger by calculating the centroids within touchpad specified
2102:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  range. The X and Y positions are calculated according to the API resolutions set in the
2103:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense customizer. Returns 1 if a finger is on the touchpad.
2104:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The position filter is applied to the result if enabled.
2105:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
2106:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  customizer.
2107:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2108:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2109:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Widget number.
2110:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  For every touchpad widget there are defines in this format:
2111:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  #define CapSense_1_"widget_name"__TP            5
2112:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2113:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
2114:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  result of calculation of X and Y position are stored.
2115:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos[0u]  - position of X
2116:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos[1u]  - position of Y
2117:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2118:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2119:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
2120:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2121:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2122:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2123:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2124:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2125:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   There are no checks of the widget type argument provided to this function.
2126:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 66


2127:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   calculations.
2128:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2129:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2130:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 CapSense_1_GetTouchCentroidPos(uint32 widget, uint16* pos)
2131:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2132:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)
2133:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posXIndex;
2134:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posYIndex;
2135:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 firstTimeIndex = CapSense_1_posFiltersData[widget];
2136:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posFiltersMask = CapSense_1_posFiltersMask[widget];
2137:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK) */
2138:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2139:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)) || \
2140:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2141:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint16 tempPos;
2142:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)) || \
2143:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                *   (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2144:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                */
2145:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2146:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 MaxX;
2147:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 MaxY;
2148:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 posX;
2149:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 posY;
2150:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 touch = 0u;
2151:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 offset = CapSense_1_rawDataIndex[widget];
2152:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 count = CapSense_1_numberOfSensors[widget];
2153:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2154:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Find Maximum within X centroid */
2155:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
2156:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             MaxX = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget], 0u);
2157:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
2158:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             MaxX = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget]);
2159:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
2160:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2161:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (MaxX != CapSense_1_MAXIMUM_CENTROID)
2162:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2163:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             offset = CapSense_1_rawDataIndex[widget + 1u];
2164:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             count = CapSense_1_numberOfSensors[widget + 1u];
2165:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2166:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Find Maximum within Y centroid */
2167:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (CapSense_1_IS_DIPLEX_SLIDER)
2168:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 MaxY = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget + 1u
2169:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #else
2170:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 MaxY = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget + 1u
2171:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
2172:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2173:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if (MaxY != CapSense_1_MAXIMUM_CENTROID)
2174:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2175:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* X and Y maximums are found = true touch */
2176:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 touch = 1u;
2177:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2178:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Calculate Y centroid */
2179:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 posY = CapSense_1_CalcCentroid(MaxY, offset, count,
2180:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_centroidMult[widget + 1u], CapSense_1_noiseThreshold[widget 
2181:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2182:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Calculate X centroid */
2183:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 offset = CapSense_1_rawDataIndex[widget];
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 67


2184:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 count = CapSense_1_numberOfSensors[widget];
2185:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2186:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 posX = CapSense_1_CalcCentroid(MaxX, offset, count,
2187:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_centroidMult[widget],CapSense_1_noiseThreshold[widget]);
2188:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2189:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #if (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)
2190:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Check if this TP has enabled filters */
2191:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
2192:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
2193:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Calculate position to store filters data */
2194:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
2195:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posYIndex  = CapSense_1_posFiltersData[widget + 1u];
2196:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2197:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if (0u == CapSense_1_posFiltersData[firstTimeIndex])
2198:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
2199:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* Init filters */
2200:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_posFiltersData[posXIndex] = posX;
2201:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_posFiltersData[posYIndex] = posY;
2202:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2203:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if((0u != (CapSense_1_MEDIAN_FILTER & \
2204:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))|| \
2205:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 (0u != (CapSense_1_AVERAGING_FILTER & \
2206:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2207:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2208:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER)) ||
2209:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER)) )
2210:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2211:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex + 1u] = posX;
2212:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex + 1u] = posY;
2213:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2214:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & \
2215:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)) || \
2216:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *    (0u != (CapSense_1_AVERAGING_FILTER & \
2217:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *            CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2218:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2219:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2220:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_posFiltersData[firstTimeIndex] = 1u;
2221:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
2222:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         else
2223:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
2224:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* Do filtering */
2225:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_TOUCH_PADS_POS_FILTER
2226:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))
2227:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2228:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posX;
2229:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_MedianFilter(posX,
2230:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2231:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2232:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex + 1u] =
2233:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
2234:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = tempPos;
2235:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2236:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posY;
2237:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_MedianFilter(posY,
2238:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2239:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2240:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex + 1u] =
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 68


2241:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
2242:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = tempPos;
2243:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2244:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2245:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_MEDIAN_FILTER & \
2246:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *          CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2247:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2248:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2249:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if(0u !=(CapSense_1_AVERAGING_FILTER & CapSense_1_TOUCH_PADS_POS_FILTE
2250:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER))
2251:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2252:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posX;
2253:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_AveragingFilter(posX,
2254:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2255:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2256:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex + 1u] =
2257:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
2258:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = tempPos;
2259:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2260:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posY;
2261:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_AveragingFilter(posY,
2262:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2263:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2264:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex + 1u] =
2265:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2266:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = tempPos;
2267:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2268:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2269:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_AVERAGING_FILTER & \
2270:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2271:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2272:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2273:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_IIR2_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_
2274:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_IIR2_FILTER))
2275:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2276:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_IIR2Filter(posX,
2277:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                            CapSense_1_posFiltersDat
2278:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = posX;
2279:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2280:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_IIR2Filter(posY,
2281:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2282:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = posY;
2283:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2284:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2285:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_IIR2_FILTER & \
2286:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *          CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2287:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2288:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2289:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_IIR4_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_
2290:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_IIR4_FILTER))
2291:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2292:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_IIR4Filter((uint16)posX,
2293:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2294:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = posX;
2295:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2296:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_IIR4Filter((uint16)posY,
2297:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 69


2298:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = posY;
2299:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2300:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2301:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_IIR4_FILTER & \
2302:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2303:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2304:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2305:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_JITTER_FILTER & CapSense_1_TOUCH_PADS_POS_FILTER
2306:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_JITTER_FILTER))
2307:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     {
2308:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         posX = (uint8) CapSense_1_JitterFilter(posX,
2309:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2310:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_posFiltersData[posXIndex] = posX;
2311:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2312:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         posY = (uint8) CapSense_1_JitterFilter(posY,
2313:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2314:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_posFiltersData[posYIndex] = posY;
2315:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     }
2316:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_JITTER_FILTER & \
2317:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2318:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2319:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
2320:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
2321:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #endif /* (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK) */
2322:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2323:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Save positions */
2324:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[0u] = posX;
2325:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[1u] = posY;
2326:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2327:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2328:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2329:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)
2330:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(touch == 0u)
2331:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2332:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Reset filters */
2333:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if ((posFiltersMask & CapSense_1_ANY_POS_FILTER) != 0u)
2334:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2335:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_posFiltersData[firstTimeIndex] = 0u;
2336:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2337:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2338:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK) */
2339:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2340:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (touch);
2341:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2342:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u) */
2343:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2344:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2345:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) || \
2346:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_MEDIAN_FILTER)) || \
2347:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       ((CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)) )
2348:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2349:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_MedianFilter
2350:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2351:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2352:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2353:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the Median filter function.
2354:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 70


2355:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  median value.
2356:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2357:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2358:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2359:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2360:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x3:  Before previous value.
2361:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2362:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2363:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2364:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2365:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2366:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2367:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2368:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2369:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2370:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2371:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2372:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
2373:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2374:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 tmp;
2375:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2376:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (x1 > x2)
2377:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2378:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             tmp = x2;
2379:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x2 = x1;
2380:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x1 = tmp;
2381:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2382:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2383:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (x2 > x3)
2384:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2385:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x2 = x3;
2386:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2387:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2388:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
2389:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2390:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) || \
2391:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_MEDIAN_FILTER)) || \
2392:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       ((CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)) ) */
2393:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2394:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2395:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)) || \
2396:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_AVERAGING_FILTER)) )
2397:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2398:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_AveragingFilter
2399:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2400:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2401:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2402:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the Averaging filter function.
2403:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The averaging filter looks at the three most recent samples of a position and
2404:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  reports the averaging value.
2405:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2406:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2407:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2408:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2409:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x3:  Before previous value.
2410:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2411:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 71


2412:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2413:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2414:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2415:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2416:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2417:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2418:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2419:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2420:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2421:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
2422:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2423:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
2424:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2425:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2426:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2427:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER) || \
2428:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_AVERAGING_FILTER) ) */
2429:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2430:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2431:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER)) || \
2432:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR2_FILTER)) )
2433:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2434:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR2Filter
2435:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2437:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2438:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
2439:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2440:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2441:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2442:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2443:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2444:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2445:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2446:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2447:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2448:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2449:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2451:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2452:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2453:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2454:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR2Filter(uint16 x1, uint16 x2)
2455:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2456:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2457:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2458:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
2459:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
2460:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 1u;
2461:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2462:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2463:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2464:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER)) || \
2465:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR2_FILTER)) )
2466:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        */
2467:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2468:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 72


2469:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER)) || \
2470:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR4_FILTER)) )
2471:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2472:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR4Filter
2473:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2474:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2475:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2476:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
2477:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2478:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2479:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2480:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2481:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2482:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2483:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a filtered value.
2484:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2485:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2486:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2487:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2488:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2489:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2490:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2491:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2492:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR4Filter(uint16 x1, uint16 x2)
2493:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1568              		.loc 1 2493 0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 16
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
 1572 0000 80B5     		push	{r7, lr}
 1573              		.cfi_def_cfa_offset 8
 1574              		.cfi_offset 7, -8
 1575              		.cfi_offset 14, -4
 1576 0002 84B0     		sub	sp, sp, #16
 1577              		.cfi_def_cfa_offset 24
 1578 0004 00AF     		add	r7, sp, #0
 1579              		.cfi_def_cfa_register 7
 1580 0006 0200     		movs	r2, r0
 1581 0008 BB1D     		adds	r3, r7, #6
 1582 000a 1A80     		strh	r2, [r3]
 1583 000c 3B1D     		adds	r3, r7, #4
 1584 000e 0A1C     		adds	r2, r1, #0
 1585 0010 1A80     		strh	r2, [r3]
2494:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2495:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2496:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
2497:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1586              		.loc 1 2497 0
 1587 0012 BB1D     		adds	r3, r7, #6
 1588 0014 1A88     		ldrh	r2, [r3]
 1589 0016 3B1D     		adds	r3, r7, #4
 1590 0018 1B88     		ldrh	r3, [r3]
 1591 001a D318     		adds	r3, r2, r3
 1592 001c FB60     		str	r3, [r7, #12]
2498:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 1593              		.loc 1 2498 0
 1594 001e 3B1D     		adds	r3, r7, #4
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 73


 1595 0020 1B88     		ldrh	r3, [r3]
 1596 0022 5B00     		lsls	r3, r3, #1
 1597 0024 FA68     		ldr	r2, [r7, #12]
 1598 0026 D318     		adds	r3, r2, r3
 1599 0028 FB60     		str	r3, [r7, #12]
2499:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 2u;
 1600              		.loc 1 2499 0
 1601 002a FB68     		ldr	r3, [r7, #12]
 1602 002c 9B08     		lsrs	r3, r3, #2
 1603 002e FB60     		str	r3, [r7, #12]
2500:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2501:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
 1604              		.loc 1 2501 0
 1605 0030 FB68     		ldr	r3, [r7, #12]
 1606 0032 9BB2     		uxth	r3, r3
2502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 1607              		.loc 1 2502 0
 1608 0034 1800     		movs	r0, r3
 1609 0036 BD46     		mov	sp, r7
 1610 0038 04B0     		add	sp, sp, #16
 1611              		@ sp needed
 1612 003a 80BD     		pop	{r7, pc}
 1613              		.cfi_endproc
 1614              	.LFE55:
 1615              		.size	CapSense_1_IIR4Filter, .-CapSense_1_IIR4Filter
 1616              		.section	.text.CapSense_1_GetWidgetNumber,"ax",%progbits
 1617              		.align	2
 1618              		.global	CapSense_1_GetWidgetNumber
 1619              		.code	16
 1620              		.thumb_func
 1621              		.type	CapSense_1_GetWidgetNumber, %function
 1622              	CapSense_1_GetWidgetNumber:
 1623              	.LFB56:
2503:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER)) || \
2504:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR4_FILTER)) )
2505:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        */
2506:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2507:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2508:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)) || \
2509:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)) || \
2510:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)))
2511:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2512:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: uint16 CapSense_1_JitterFilter
2513:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2514:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2515:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2516:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the Jitter filter function.
2517:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2518:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2519:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2520:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2521:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2522:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2523:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2524:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2525:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2526:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 74


2527:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2528:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2529:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2530:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2531:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2532:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_JitterFilter(uint16 x1, uint16 x2)
2533:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2534:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (x1 > x2)
2535:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2536:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x1--;
2537:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2538:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
2539:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2540:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if (x1 < x2)
2541:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2542:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 x1++;
2543:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2544:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2545:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2546:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return x1;
2547:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2548:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)) || \
2549:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)) )
2550:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)) )
2551:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        */
2552:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2553:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2554:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER))
2555:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2556:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR8Filter
2557:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2558:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2559:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2560:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
2561:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Only applies for raw data.
2562:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2563:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2564:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2565:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2566:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2567:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2568:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2569:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2570:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2571:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2572:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2573:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2574:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2575:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2576:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2577:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR8Filter(uint16 x1, uint16 x2)
2578:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2579:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2580:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2581:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/8 Current Value + 7/8 Previous Value */
2582:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1;
2583:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp += (((uint32)x2 << 3u) - ((uint32)x2));
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 75


2584:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 3u;
2585:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2586:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2587:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2588:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER)) */
2589:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2590:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2591:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER))
2592:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2593:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR16Filter
2594:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2595:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2596:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2597:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
2598:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Only applies for raw data.
2599:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2600:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2601:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2602:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2603:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2604:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2605:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2606:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2607:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2608:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2609:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2610:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2611:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2612:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2613:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2614:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR16Filter(uint16 x1, uint16 x2)
2615:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2617:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2618:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/16 Current Value + 15/16 Previous Value */
2619:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1;
2620:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp += (((uint32)x2 << 4u) - ((uint32)x2));
2621:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 4u;
2622:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2623:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2624:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2625:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER) */
2626:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2627:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2628:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (0u != (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT))
2629:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2630:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2631:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetMatrixButtonPos
2632:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2633:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2634:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2635:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Function calculates and returns a touch position (column and row) for the matrix
2636:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  button widget.
2637:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2638:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2639:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  widget number;
2640:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos:     pointer to an array of two uint8, where touch position will be
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 76


2641:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *           stored:
2642:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *           pos[0] - column position;
2643:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *           pos[1] - raw position.
2644:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2645:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2646:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
2647:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  cases.
2648:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2649:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2650:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_fingerThreshold[ ] - used to store the finger threshold for all widgets.
2651:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_sensorSignal[ ] - used to store a difference between the current value of
2652:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  raw data and a previous value of the baseline.
2653:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2654:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2655:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2656:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2657:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2658:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 CapSense_1_GetMatrixButtonPos(uint32 widget, uint8* pos)
2659:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2660:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 i;
2661:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 retVal = 0u;
2662:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 row_sig_max = 0u;
2663:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 col_sig_max = 0u;
2664:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 row_ind = 0u;
2665:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 col_ind = 0u;
2666:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2667:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_CheckIsWidgetActive(widget) == 1u)
2668:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2669:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Find row number with maximal signal value */
2670:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             for(i = CapSense_1_rawDataIndex[widget]; i < (CapSense_1_rawDataIndex[widget] + \
2671:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                  CapSense_1_numberOfSensors[widget]); i++)
2672:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2673:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (CapSense_1_sensorSignal[i] > col_sig_max)
2674:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2675:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     col_ind = i;
2676:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     col_sig_max = CapSense_1_sensorSignal[i];
2677:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2678:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2679:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2680:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Find row number with maximal signal value */
2681:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             for(i = CapSense_1_rawDataIndex[widget+1u]; i < (CapSense_1_rawDataIndex[widget+1u] + \
2682:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                  CapSense_1_numberOfSensors[widget+1u]); i++)
2683:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2684:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (CapSense_1_sensorSignal[i] > row_sig_max)
2685:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2686:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     row_ind = i;
2687:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     row_sig_max = CapSense_1_sensorSignal[i];
2688:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2689:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2690:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2691:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if((col_sig_max >= CapSense_1_fingerThreshold[widget]) && \
2692:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                (row_sig_max >= CapSense_1_fingerThreshold[widget+1u]))
2693:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2694:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[0u] = col_ind - CapSense_1_rawDataIndex[widget];
2695:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[1u] = row_ind - CapSense_1_rawDataIndex[widget+1u];
2696:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 retVal = 1u;
2697:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 77


2698:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2699:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (retVal);
2700:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2701:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2702:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (0u != (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT)) */
2703:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2704:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
2705:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetWidgetNumber
2706:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
2707:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2708:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
2709:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the widget number for the sensor.
2710:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2711:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
2712:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor: sensor index. The value of index can be
2713:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  from 0 to (CapSense_1_TOTAL_SENSOR_COUNT-1).
2714:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2715:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
2716:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the widget number for the sensor.
2717:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2718:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
2719:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumber[]  - stores widget numbers.
2720:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2721:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
2722:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
2723:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2724:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
2725:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_GetWidgetNumber(uint32 sensor)
2726:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1624              		.loc 1 2726 0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 8
 1627              		@ frame_needed = 1, uses_anonymous_args = 0
 1628 0000 80B5     		push	{r7, lr}
 1629              		.cfi_def_cfa_offset 8
 1630              		.cfi_offset 7, -8
 1631              		.cfi_offset 14, -4
 1632 0002 82B0     		sub	sp, sp, #8
 1633              		.cfi_def_cfa_offset 16
 1634 0004 00AF     		add	r7, sp, #0
 1635              		.cfi_def_cfa_register 7
 1636 0006 7860     		str	r0, [r7, #4]
2727:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return((uint32)CapSense_1_widgetNumber[sensor]);
 1637              		.loc 1 2727 0
 1638 0008 034A     		ldr	r2, .L96
 1639 000a 7B68     		ldr	r3, [r7, #4]
 1640 000c D318     		adds	r3, r2, r3
 1641 000e 1B78     		ldrb	r3, [r3]
2728:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1642              		.loc 1 2728 0
 1643 0010 1800     		movs	r0, r3
 1644 0012 BD46     		mov	sp, r7
 1645 0014 02B0     		add	sp, sp, #8
 1646              		@ sp needed
 1647 0016 80BD     		pop	{r7, pc}
 1648              	.L97:
 1649              		.align	2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 78


 1650              	.L96:
 1651 0018 00000000 		.word	CapSense_1_widgetNumber
 1652              		.cfi_endproc
 1653              	.LFE56:
 1654              		.size	CapSense_1_GetWidgetNumber, .-CapSense_1_GetWidgetNumber
 1655              		.section	.text.CapSense_1_GetLowBaselineReset,"ax",%progbits
 1656              		.align	2
 1657              		.global	CapSense_1_GetLowBaselineReset
 1658              		.code	16
 1659              		.thumb_func
 1660              		.type	CapSense_1_GetLowBaselineReset, %function
 1661              	CapSense_1_GetLowBaselineReset:
 1662              	.LFB57:
2729:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2730:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
2731:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetLowBaselineReset
2732:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
2733:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2734:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
2735:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the low baseline reset threshold value for the  sensor.
2736:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2737:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
2738:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor: sensor index. The value of index can be
2739:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  from 0 to (CapSense_1_TOTAL_SENSOR_COUNT-1).
2740:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2741:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
2742:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  low baseline reset threshold value a sensor.
2743:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2744:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
2745:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_lowBaselineReset[]  - stores low baseline reset values.
2746:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2747:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
2748:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
2749:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2750:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
2751:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetLowBaselineReset(uint32 sensor)
2752:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1663              		.loc 1 2752 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 8
 1666              		@ frame_needed = 1, uses_anonymous_args = 0
 1667 0000 80B5     		push	{r7, lr}
 1668              		.cfi_def_cfa_offset 8
 1669              		.cfi_offset 7, -8
 1670              		.cfi_offset 14, -4
 1671 0002 82B0     		sub	sp, sp, #8
 1672              		.cfi_def_cfa_offset 16
 1673 0004 00AF     		add	r7, sp, #0
 1674              		.cfi_def_cfa_register 7
 1675 0006 7860     		str	r0, [r7, #4]
2753:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_lowBaselineReset[sensor]);
 1676              		.loc 1 2753 0
 1677 0008 034A     		ldr	r2, .L100
 1678 000a 7B68     		ldr	r3, [r7, #4]
 1679 000c D318     		adds	r3, r2, r3
 1680 000e 1B78     		ldrb	r3, [r3]
2754:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 79


 1681              		.loc 1 2754 0
 1682 0010 1800     		movs	r0, r3
 1683 0012 BD46     		mov	sp, r7
 1684 0014 02B0     		add	sp, sp, #8
 1685              		@ sp needed
 1686 0016 80BD     		pop	{r7, pc}
 1687              	.L101:
 1688              		.align	2
 1689              	.L100:
 1690 0018 00000000 		.word	CapSense_1_lowBaselineReset
 1691              		.cfi_endproc
 1692              	.LFE57:
 1693              		.size	CapSense_1_GetLowBaselineReset, .-CapSense_1_GetLowBaselineReset
 1694              		.section	.text.CapSense_1_GetDebounce,"ax",%progbits
 1695              		.align	2
 1696              		.global	CapSense_1_GetDebounce
 1697              		.code	16
 1698              		.thumb_func
 1699              		.type	CapSense_1_GetDebounce, %function
 1700              	CapSense_1_GetDebounce:
 1701              	.LFB58:
2755:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2756:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
2757:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetDebounce
2758:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
2759:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2760:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
2761:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns a debounce value.
2762:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2763:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
2764:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor: sensor index. The value of index can be
2765:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  from 0 to (CapSense_1_TOTAL_SENSOR_COUNT-1).
2766:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2767:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
2768:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Debounce value
2769:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2770:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
2771:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_debounce[]  - stores the debounce value.
2772:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2773:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
2774:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
2775:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2776:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
2777:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetDebounce(uint32 widget)
2778:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1702              		.loc 1 2778 0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 8
 1705              		@ frame_needed = 1, uses_anonymous_args = 0
 1706 0000 80B5     		push	{r7, lr}
 1707              		.cfi_def_cfa_offset 8
 1708              		.cfi_offset 7, -8
 1709              		.cfi_offset 14, -4
 1710 0002 82B0     		sub	sp, sp, #8
 1711              		.cfi_def_cfa_offset 16
 1712 0004 00AF     		add	r7, sp, #0
 1713              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 80


 1714 0006 7860     		str	r0, [r7, #4]
2779:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_debounce[widget]);
 1715              		.loc 1 2779 0
 1716 0008 0523     		movs	r3, #5
2780:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1717              		.loc 1 2780 0
 1718 000a 1800     		movs	r0, r3
 1719 000c BD46     		mov	sp, r7
 1720 000e 02B0     		add	sp, sp, #8
 1721              		@ sp needed
 1722 0010 80BD     		pop	{r7, pc}
 1723              		.cfi_endproc
 1724              	.LFE58:
 1725              		.size	CapSense_1_GetDebounce, .-CapSense_1_GetDebounce
 1726 0012 C046     		.section	.text.CapSense_1_EnableRawDataFilters,"ax",%progbits
 1727              		.align	2
 1728              		.global	CapSense_1_EnableRawDataFilters
 1729              		.code	16
 1730              		.thumb_func
 1731              		.type	CapSense_1_EnableRawDataFilters, %function
 1732              	CapSense_1_EnableRawDataFilters:
 1733              	.LFB59:
2781:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2782:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_RAW_FILTER_MASK != 0u)
2783:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2784:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_EnableRawDataFilters
2785:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2786:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2787:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2788:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Enables the rawdata filters for the sensor signals.
2789:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2790:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2791:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2792:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2793:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2794:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2795:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2796:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2797:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_enableRawFilters defines if the filters are enabled or not.
2798:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2799:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2800:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2801:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2802:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2803:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_EnableRawDataFilters(void)
2804:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1734              		.loc 1 2804 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 1, uses_anonymous_args = 0
 1738 0000 80B5     		push	{r7, lr}
 1739              		.cfi_def_cfa_offset 8
 1740              		.cfi_offset 7, -8
 1741              		.cfi_offset 14, -4
 1742 0002 00AF     		add	r7, sp, #0
 1743              		.cfi_def_cfa_register 7
2805:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_enableRawFilters = CapSense_1_RAW_FILTERS_ENABLED;
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 81


 1744              		.loc 1 2805 0
 1745 0004 024B     		ldr	r3, .L105
 1746 0006 0122     		movs	r2, #1
 1747 0008 1A70     		strb	r2, [r3]
2806:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 1748              		.loc 1 2806 0
 1749 000a C046     		nop
 1750 000c BD46     		mov	sp, r7
 1751              		@ sp needed
 1752 000e 80BD     		pop	{r7, pc}
 1753              	.L106:
 1754              		.align	2
 1755              	.L105:
 1756 0010 00000000 		.word	CapSense_1_enableRawFilters
 1757              		.cfi_endproc
 1758              	.LFE59:
 1759              		.size	CapSense_1_EnableRawDataFilters, .-CapSense_1_EnableRawDataFilters
 1760              		.section	.text.CapSense_1_DisableRawDataFilters,"ax",%progbits
 1761              		.align	2
 1762              		.global	CapSense_1_DisableRawDataFilters
 1763              		.code	16
 1764              		.thumb_func
 1765              		.type	CapSense_1_DisableRawDataFilters, %function
 1766              	CapSense_1_DisableRawDataFilters:
 1767              	.LFB60:
2807:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2808:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2809:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_DisableRawDataFilters
2810:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2811:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2812:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2813:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Disables the rawdata filters for the sensor signals.
2814:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2815:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2816:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2817:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2818:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2819:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2820:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2821:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2822:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_enableRawFilters defines if the filters are enabled or not.
2823:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2824:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2825:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2826:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2827:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2828:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_DisableRawDataFilters(void)
2829:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1768              		.loc 1 2829 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 1, uses_anonymous_args = 0
 1772 0000 80B5     		push	{r7, lr}
 1773              		.cfi_def_cfa_offset 8
 1774              		.cfi_offset 7, -8
 1775              		.cfi_offset 14, -4
 1776 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 82


 1777              		.cfi_def_cfa_register 7
2830:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_enableRawFilters = CapSense_1_RAW_FILTERS_DISABLED;
 1778              		.loc 1 2830 0
 1779 0004 024B     		ldr	r3, .L108
 1780 0006 0022     		movs	r2, #0
 1781 0008 1A70     		strb	r2, [r3]
2831:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 1782              		.loc 1 2831 0
 1783 000a C046     		nop
 1784 000c BD46     		mov	sp, r7
 1785              		@ sp needed
 1786 000e 80BD     		pop	{r7, pc}
 1787              	.L109:
 1788              		.align	2
 1789              	.L108:
 1790 0010 00000000 		.word	CapSense_1_enableRawFilters
 1791              		.cfi_endproc
 1792              	.LFE60:
 1793              		.size	CapSense_1_DisableRawDataFilters, .-CapSense_1_DisableRawDataFilters
 1794              		.text
 1795              	.Letext0:
 1796              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1797              		.section	.debug_info,"",%progbits
 1798              	.Ldebug_info0:
 1799 0000 18080000 		.4byte	0x818
 1800 0004 0400     		.2byte	0x4
 1801 0006 00000000 		.4byte	.Ldebug_abbrev0
 1802 000a 04       		.byte	0x4
 1803 000b 01       		.uleb128 0x1
 1804 000c A9020000 		.4byte	.LASF82
 1805 0010 0C       		.byte	0xc
 1806 0011 80020000 		.4byte	.LASF83
 1807 0015 E3040000 		.4byte	.LASF84
 1808 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1809 001d 00000000 		.4byte	0
 1810 0021 00000000 		.4byte	.Ldebug_line0
 1811 0025 02       		.uleb128 0x2
 1812 0026 01       		.byte	0x1
 1813 0027 06       		.byte	0x6
 1814 0028 ED030000 		.4byte	.LASF0
 1815 002c 02       		.uleb128 0x2
 1816 002d 01       		.byte	0x1
 1817 002e 08       		.byte	0x8
 1818 002f 37030000 		.4byte	.LASF1
 1819 0033 02       		.uleb128 0x2
 1820 0034 02       		.byte	0x2
 1821 0035 05       		.byte	0x5
 1822 0036 30000000 		.4byte	.LASF2
 1823 003a 02       		.uleb128 0x2
 1824 003b 02       		.byte	0x2
 1825 003c 07       		.byte	0x7
 1826 003d 40050000 		.4byte	.LASF3
 1827 0041 02       		.uleb128 0x2
 1828 0042 04       		.byte	0x4
 1829 0043 05       		.byte	0x5
 1830 0044 A4040000 		.4byte	.LASF4
 1831 0048 02       		.uleb128 0x2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 83


 1832 0049 04       		.byte	0x4
 1833 004a 07       		.byte	0x7
 1834 004b 3E040000 		.4byte	.LASF5
 1835 004f 02       		.uleb128 0x2
 1836 0050 08       		.byte	0x8
 1837 0051 05       		.byte	0x5
 1838 0052 BB010000 		.4byte	.LASF6
 1839 0056 02       		.uleb128 0x2
 1840 0057 08       		.byte	0x8
 1841 0058 07       		.byte	0x7
 1842 0059 08040000 		.4byte	.LASF7
 1843 005d 03       		.uleb128 0x3
 1844 005e 04       		.byte	0x4
 1845 005f 05       		.byte	0x5
 1846 0060 696E7400 		.ascii	"int\000"
 1847 0064 02       		.uleb128 0x2
 1848 0065 04       		.byte	0x4
 1849 0066 07       		.byte	0x7
 1850 0067 2B040000 		.4byte	.LASF8
 1851 006b 04       		.uleb128 0x4
 1852 006c 5D010000 		.4byte	.LASF9
 1853 0070 02       		.byte	0x2
 1854 0071 E601     		.2byte	0x1e6
 1855 0073 2C000000 		.4byte	0x2c
 1856 0077 04       		.uleb128 0x4
 1857 0078 30010000 		.4byte	.LASF10
 1858 007c 02       		.byte	0x2
 1859 007d E701     		.2byte	0x1e7
 1860 007f 3A000000 		.4byte	0x3a
 1861 0083 04       		.uleb128 0x4
 1862 0084 10060000 		.4byte	.LASF11
 1863 0088 02       		.byte	0x2
 1864 0089 E801     		.2byte	0x1e8
 1865 008b 48000000 		.4byte	0x48
 1866 008f 02       		.uleb128 0x2
 1867 0090 04       		.byte	0x4
 1868 0091 04       		.byte	0x4
 1869 0092 B0010000 		.4byte	.LASF12
 1870 0096 02       		.uleb128 0x2
 1871 0097 08       		.byte	0x8
 1872 0098 04       		.byte	0x4
 1873 0099 1D070000 		.4byte	.LASF13
 1874 009d 02       		.uleb128 0x2
 1875 009e 01       		.byte	0x1
 1876 009f 08       		.byte	0x8
 1877 00a0 9F040000 		.4byte	.LASF14
 1878 00a4 02       		.uleb128 0x2
 1879 00a5 04       		.byte	0x4
 1880 00a6 07       		.byte	0x7
 1881 00a7 F2060000 		.4byte	.LASF15
 1882 00ab 02       		.uleb128 0x2
 1883 00ac 08       		.byte	0x8
 1884 00ad 04       		.byte	0x4
 1885 00ae 67030000 		.4byte	.LASF16
 1886 00b2 05       		.uleb128 0x5
 1887 00b3 6B000000 		.4byte	0x6b
 1888 00b7 06       		.uleb128 0x6
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 84


 1889 00b8 CF040000 		.4byte	.LASF17
 1890 00bc 01       		.byte	0x1
 1891 00bd 8A       		.byte	0x8a
 1892 00be 00000000 		.4byte	.LFB34
 1893 00c2 7C000000 		.4byte	.LFE34-.LFB34
 1894 00c6 01       		.uleb128 0x1
 1895 00c7 9C       		.byte	0x9c
 1896 00c8 E9000000 		.4byte	0xe9
 1897 00cc 07       		.uleb128 0x7
 1898 00cd 4F010000 		.4byte	.LASF19
 1899 00d1 01       		.byte	0x1
 1900 00d2 8A       		.byte	0x8a
 1901 00d3 83000000 		.4byte	0x83
 1902 00d7 02       		.uleb128 0x2
 1903 00d8 91       		.byte	0x91
 1904 00d9 6C       		.sleb128 -20
 1905 00da 08       		.uleb128 0x8
 1906 00db 56010000 		.4byte	.LASF21
 1907 00df 01       		.byte	0x1
 1908 00e0 8E       		.byte	0x8e
 1909 00e1 6B000000 		.4byte	0x6b
 1910 00e5 02       		.uleb128 0x2
 1911 00e6 91       		.byte	0x91
 1912 00e7 77       		.sleb128 -9
 1913 00e8 00       		.byte	0
 1914 00e9 09       		.uleb128 0x9
 1915 00ea 50040000 		.4byte	.LASF18
 1916 00ee 01       		.byte	0x1
 1917 00ef D6       		.byte	0xd6
 1918 00f0 00000000 		.4byte	.LFB35
 1919 00f4 2A000000 		.4byte	.LFE35-.LFB35
 1920 00f8 01       		.uleb128 0x1
 1921 00f9 9C       		.byte	0x9c
 1922 00fa 0D010000 		.4byte	0x10d
 1923 00fe 07       		.uleb128 0x7
 1924 00ff 4F010000 		.4byte	.LASF19
 1925 0103 01       		.byte	0x1
 1926 0104 D6       		.byte	0xd6
 1927 0105 83000000 		.4byte	0x83
 1928 0109 02       		.uleb128 0x2
 1929 010a 91       		.byte	0x91
 1930 010b 74       		.sleb128 -12
 1931 010c 00       		.byte	0
 1932 010d 09       		.uleb128 0x9
 1933 010e 5E050000 		.4byte	.LASF20
 1934 0112 01       		.byte	0x1
 1935 0113 FB       		.byte	0xfb
 1936 0114 00000000 		.4byte	.LFB36
 1937 0118 28000000 		.4byte	.LFE36-.LFB36
 1938 011c 01       		.uleb128 0x1
 1939 011d 9C       		.byte	0x9c
 1940 011e 2F010000 		.4byte	0x12f
 1941 0122 0A       		.uleb128 0xa
 1942 0123 6900     		.ascii	"i\000"
 1943 0125 01       		.byte	0x1
 1944 0126 FD       		.byte	0xfd
 1945 0127 83000000 		.4byte	0x83
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 85


 1946 012b 02       		.uleb128 0x2
 1947 012c 91       		.byte	0x91
 1948 012d 74       		.sleb128 -12
 1949 012e 00       		.byte	0
 1950 012f 0B       		.uleb128 0xb
 1951 0130 96060000 		.4byte	.LASF22
 1952 0134 01       		.byte	0x1
 1953 0135 1E01     		.2byte	0x11e
 1954 0137 00000000 		.4byte	.LFB37
 1955 013b 50000000 		.4byte	.LFE37-.LFB37
 1956 013f 01       		.uleb128 0x1
 1957 0140 9C       		.byte	0x9c
 1958 0141 62010000 		.4byte	0x162
 1959 0145 0C       		.uleb128 0xc
 1960 0146 6900     		.ascii	"i\000"
 1961 0148 01       		.byte	0x1
 1962 0149 2001     		.2byte	0x120
 1963 014b 83000000 		.4byte	0x83
 1964 014f 02       		.uleb128 0x2
 1965 0150 91       		.byte	0x91
 1966 0151 74       		.sleb128 -12
 1967 0152 0D       		.uleb128 0xd
 1968 0153 8F040000 		.4byte	.LASF23
 1969 0157 01       		.byte	0x1
 1970 0158 2101     		.2byte	0x121
 1971 015a 83000000 		.4byte	0x83
 1972 015e 02       		.uleb128 0x2
 1973 015f 91       		.byte	0x91
 1974 0160 70       		.sleb128 -16
 1975 0161 00       		.byte	0
 1976 0162 0B       		.uleb128 0xb
 1977 0163 79070000 		.4byte	.LASF24
 1978 0167 01       		.byte	0x1
 1979 0168 5F01     		.2byte	0x15f
 1980 016a 00000000 		.4byte	.LFB38
 1981 016e DC010000 		.4byte	.LFE38-.LFB38
 1982 0172 01       		.uleb128 0x1
 1983 0173 9C       		.byte	0x9c
 1984 0174 E2010000 		.4byte	0x1e2
 1985 0178 0E       		.uleb128 0xe
 1986 0179 4F010000 		.4byte	.LASF19
 1987 017d 01       		.byte	0x1
 1988 017e 5F01     		.2byte	0x15f
 1989 0180 83000000 		.4byte	0x83
 1990 0184 02       		.uleb128 0x2
 1991 0185 91       		.byte	0x91
 1992 0186 5C       		.sleb128 -36
 1993 0187 0D       		.uleb128 0xd
 1994 0188 B6010000 		.4byte	.LASF25
 1995 018c 01       		.byte	0x1
 1996 018d 6101     		.2byte	0x161
 1997 018f 83000000 		.4byte	0x83
 1998 0193 02       		.uleb128 0x2
 1999 0194 91       		.byte	0x91
 2000 0195 60       		.sleb128 -32
 2001 0196 0D       		.uleb128 0xd
 2002 0197 35060000 		.4byte	.LASF26
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 86


 2003 019b 01       		.byte	0x1
 2004 019c 6201     		.2byte	0x162
 2005 019e 83000000 		.4byte	0x83
 2006 01a2 02       		.uleb128 0x2
 2007 01a3 91       		.byte	0x91
 2008 01a4 6C       		.sleb128 -20
 2009 01a5 0D       		.uleb128 0xd
 2010 01a6 39020000 		.4byte	.LASF27
 2011 01aa 01       		.byte	0x1
 2012 01ab 6301     		.2byte	0x163
 2013 01ad 77000000 		.4byte	0x77
 2014 01b1 02       		.uleb128 0x2
 2015 01b2 91       		.byte	0x91
 2016 01b3 6A       		.sleb128 -22
 2017 01b4 0D       		.uleb128 0xd
 2018 01b5 3A000000 		.4byte	.LASF28
 2019 01b9 01       		.byte	0x1
 2020 01ba 6401     		.2byte	0x164
 2021 01bc 77000000 		.4byte	0x77
 2022 01c0 02       		.uleb128 0x2
 2023 01c1 91       		.byte	0x91
 2024 01c2 68       		.sleb128 -24
 2025 01c3 0D       		.uleb128 0xd
 2026 01c4 56010000 		.4byte	.LASF21
 2027 01c8 01       		.byte	0x1
 2028 01c9 6501     		.2byte	0x165
 2029 01cb 6B000000 		.4byte	0x6b
 2030 01cf 02       		.uleb128 0x2
 2031 01d0 91       		.byte	0x91
 2032 01d1 67       		.sleb128 -25
 2033 01d2 0D       		.uleb128 0xd
 2034 01d3 F9030000 		.4byte	.LASF29
 2035 01d7 01       		.byte	0x1
 2036 01d8 6601     		.2byte	0x166
 2037 01da 77000000 		.4byte	0x77
 2038 01de 02       		.uleb128 0x2
 2039 01df 91       		.byte	0x91
 2040 01e0 64       		.sleb128 -28
 2041 01e1 00       		.byte	0
 2042 01e2 0B       		.uleb128 0xb
 2043 01e3 73030000 		.4byte	.LASF30
 2044 01e7 01       		.byte	0x1
 2045 01e8 1F02     		.2byte	0x21f
 2046 01ea 00000000 		.4byte	.LFB39
 2047 01ee 18000000 		.4byte	.LFE39-.LFB39
 2048 01f2 01       		.uleb128 0x1
 2049 01f3 9C       		.byte	0x9c
 2050 01f4 08020000 		.4byte	0x208
 2051 01f8 0E       		.uleb128 0xe
 2052 01f9 4F010000 		.4byte	.LASF19
 2053 01fd 01       		.byte	0x1
 2054 01fe 1F02     		.2byte	0x21f
 2055 0200 83000000 		.4byte	0x83
 2056 0204 02       		.uleb128 0x2
 2057 0205 91       		.byte	0x91
 2058 0206 74       		.sleb128 -12
 2059 0207 00       		.byte	0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 87


 2060 0208 0B       		.uleb128 0xb
 2061 0209 74060000 		.4byte	.LASF31
 2062 020d 01       		.byte	0x1
 2063 020e 5502     		.2byte	0x255
 2064 0210 00000000 		.4byte	.LFB40
 2065 0214 44000000 		.4byte	.LFE40-.LFB40
 2066 0218 01       		.uleb128 0x1
 2067 0219 9C       		.byte	0x9c
 2068 021a 3B020000 		.4byte	0x23b
 2069 021e 0C       		.uleb128 0xc
 2070 021f 6900     		.ascii	"i\000"
 2071 0221 01       		.byte	0x1
 2072 0222 5702     		.2byte	0x257
 2073 0224 83000000 		.4byte	0x83
 2074 0228 02       		.uleb128 0x2
 2075 0229 91       		.byte	0x91
 2076 022a 74       		.sleb128 -12
 2077 022b 0D       		.uleb128 0xd
 2078 022c 8F040000 		.4byte	.LASF23
 2079 0230 01       		.byte	0x1
 2080 0231 5802     		.2byte	0x258
 2081 0233 83000000 		.4byte	0x83
 2082 0237 02       		.uleb128 0x2
 2083 0238 91       		.byte	0x91
 2084 0239 70       		.sleb128 -16
 2085 023a 00       		.byte	0
 2086 023b 0B       		.uleb128 0xb
 2087 023c F0050000 		.4byte	.LASF32
 2088 0240 01       		.byte	0x1
 2089 0241 8202     		.2byte	0x282
 2090 0243 00000000 		.4byte	.LFB41
 2091 0247 58000000 		.4byte	.LFE41-.LFB41
 2092 024b 01       		.uleb128 0x1
 2093 024c 9C       		.byte	0x9c
 2094 024d AA020000 		.4byte	0x2aa
 2095 0251 0E       		.uleb128 0xe
 2096 0252 56010000 		.4byte	.LASF21
 2097 0256 01       		.byte	0x1
 2098 0257 8202     		.2byte	0x282
 2099 0259 83000000 		.4byte	0x83
 2100 025d 02       		.uleb128 0x2
 2101 025e 91       		.byte	0x91
 2102 025f 5C       		.sleb128 -36
 2103 0260 0D       		.uleb128 0xd
 2104 0261 24070000 		.4byte	.LASF33
 2105 0265 01       		.byte	0x1
 2106 0266 8402     		.2byte	0x284
 2107 0268 83000000 		.4byte	0x83
 2108 026c 02       		.uleb128 0x2
 2109 026d 91       		.byte	0x91
 2110 026e 70       		.sleb128 -16
 2111 026f 0D       		.uleb128 0xd
 2112 0270 1F040000 		.4byte	.LASF34
 2113 0274 01       		.byte	0x1
 2114 0275 8502     		.2byte	0x285
 2115 0277 83000000 		.4byte	0x83
 2116 027b 02       		.uleb128 0x2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 88


 2117 027c 91       		.byte	0x91
 2118 027d 6C       		.sleb128 -20
 2119 027e 0D       		.uleb128 0xd
 2120 027f 53050000 		.4byte	.LASF35
 2121 0283 01       		.byte	0x1
 2122 0284 8602     		.2byte	0x286
 2123 0286 83000000 		.4byte	0x83
 2124 028a 02       		.uleb128 0x2
 2125 028b 91       		.byte	0x91
 2126 028c 68       		.sleb128 -24
 2127 028d 0C       		.uleb128 0xc
 2128 028e 6900     		.ascii	"i\000"
 2129 0290 01       		.byte	0x1
 2130 0291 8702     		.2byte	0x287
 2131 0293 83000000 		.4byte	0x83
 2132 0297 02       		.uleb128 0x2
 2133 0298 91       		.byte	0x91
 2134 0299 74       		.sleb128 -12
 2135 029a 0D       		.uleb128 0xd
 2136 029b 8F040000 		.4byte	.LASF23
 2137 029f 01       		.byte	0x1
 2138 02a0 8802     		.2byte	0x288
 2139 02a2 83000000 		.4byte	0x83
 2140 02a6 02       		.uleb128 0x2
 2141 02a7 91       		.byte	0x91
 2142 02a8 64       		.sleb128 -28
 2143 02a9 00       		.byte	0
 2144 02aa 0F       		.uleb128 0xf
 2145 02ab 04020000 		.4byte	.LASF38
 2146 02af 01       		.byte	0x1
 2147 02b0 B302     		.2byte	0x2b3
 2148 02b2 77000000 		.4byte	0x77
 2149 02b6 00000000 		.4byte	.LFB42
 2150 02ba 1C000000 		.4byte	.LFE42-.LFB42
 2151 02be 01       		.uleb128 0x1
 2152 02bf 9C       		.byte	0x9c
 2153 02c0 D4020000 		.4byte	0x2d4
 2154 02c4 0E       		.uleb128 0xe
 2155 02c5 4F010000 		.4byte	.LASF19
 2156 02c9 01       		.byte	0x1
 2157 02ca B302     		.2byte	0x2b3
 2158 02cc 83000000 		.4byte	0x83
 2159 02d0 02       		.uleb128 0x2
 2160 02d1 91       		.byte	0x91
 2161 02d2 74       		.sleb128 -12
 2162 02d3 00       		.byte	0
 2163 02d4 10       		.uleb128 0x10
 2164 02d5 15010000 		.4byte	.LASF36
 2165 02d9 01       		.byte	0x1
 2166 02da CE02     		.2byte	0x2ce
 2167 02dc 00000000 		.4byte	.LFB43
 2168 02e0 28000000 		.4byte	.LFE43-.LFB43
 2169 02e4 01       		.uleb128 0x1
 2170 02e5 9C       		.byte	0x9c
 2171 02e6 09030000 		.4byte	0x309
 2172 02ea 0E       		.uleb128 0xe
 2173 02eb 4F010000 		.4byte	.LASF19
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 89


 2174 02ef 01       		.byte	0x1
 2175 02f0 CE02     		.2byte	0x2ce
 2176 02f2 83000000 		.4byte	0x83
 2177 02f6 02       		.uleb128 0x2
 2178 02f7 91       		.byte	0x91
 2179 02f8 74       		.sleb128 -12
 2180 02f9 0E       		.uleb128 0xe
 2181 02fa 80050000 		.4byte	.LASF37
 2182 02fe 01       		.byte	0x1
 2183 02ff CE02     		.2byte	0x2ce
 2184 0301 77000000 		.4byte	0x77
 2185 0305 02       		.uleb128 0x2
 2186 0306 91       		.byte	0x91
 2187 0307 72       		.sleb128 -14
 2188 0308 00       		.byte	0
 2189 0309 0F       		.uleb128 0xf
 2190 030a D6060000 		.4byte	.LASF39
 2191 030e 01       		.byte	0x1
 2192 030f E902     		.2byte	0x2e9
 2193 0311 77000000 		.4byte	0x77
 2194 0315 00000000 		.4byte	.LFB44
 2195 0319 1C000000 		.4byte	.LFE44-.LFB44
 2196 031d 01       		.uleb128 0x1
 2197 031e 9C       		.byte	0x9c
 2198 031f 33030000 		.4byte	0x333
 2199 0323 0E       		.uleb128 0xe
 2200 0324 4F010000 		.4byte	.LASF19
 2201 0328 01       		.byte	0x1
 2202 0329 E902     		.2byte	0x2e9
 2203 032b 83000000 		.4byte	0x83
 2204 032f 02       		.uleb128 0x2
 2205 0330 91       		.byte	0x91
 2206 0331 74       		.sleb128 -12
 2207 0332 00       		.byte	0
 2208 0333 10       		.uleb128 0x10
 2209 0334 35070000 		.4byte	.LASF40
 2210 0338 01       		.byte	0x1
 2211 0339 0403     		.2byte	0x304
 2212 033b 00000000 		.4byte	.LFB45
 2213 033f 28000000 		.4byte	.LFE45-.LFB45
 2214 0343 01       		.uleb128 0x1
 2215 0344 9C       		.byte	0x9c
 2216 0345 68030000 		.4byte	0x368
 2217 0349 0E       		.uleb128 0xe
 2218 034a 4F010000 		.4byte	.LASF19
 2219 034e 01       		.byte	0x1
 2220 034f 0403     		.2byte	0x304
 2221 0351 83000000 		.4byte	0x83
 2222 0355 02       		.uleb128 0x2
 2223 0356 91       		.byte	0x91
 2224 0357 74       		.sleb128 -12
 2225 0358 0E       		.uleb128 0xe
 2226 0359 EE000000 		.4byte	.LASF41
 2227 035d 01       		.byte	0x1
 2228 035e 0403     		.2byte	0x304
 2229 0360 77000000 		.4byte	0x77
 2230 0364 02       		.uleb128 0x2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 90


 2231 0365 91       		.byte	0x91
 2232 0366 72       		.sleb128 -14
 2233 0367 00       		.byte	0
 2234 0368 0F       		.uleb128 0xf
 2235 0369 17060000 		.4byte	.LASF42
 2236 036d 01       		.byte	0x1
 2237 036e 1F03     		.2byte	0x31f
 2238 0370 77000000 		.4byte	0x77
 2239 0374 00000000 		.4byte	.LFB46
 2240 0378 12000000 		.4byte	.LFE46-.LFB46
 2241 037c 01       		.uleb128 0x1
 2242 037d 9C       		.byte	0x9c
 2243 037e 92030000 		.4byte	0x392
 2244 0382 0E       		.uleb128 0xe
 2245 0383 56010000 		.4byte	.LASF21
 2246 0387 01       		.byte	0x1
 2247 0388 1F03     		.2byte	0x31f
 2248 038a 83000000 		.4byte	0x83
 2249 038e 02       		.uleb128 0x2
 2250 038f 91       		.byte	0x91
 2251 0390 74       		.sleb128 -12
 2252 0391 00       		.byte	0
 2253 0392 0F       		.uleb128 0xf
 2254 0393 93030000 		.4byte	.LASF43
 2255 0397 01       		.byte	0x1
 2256 0398 3A03     		.2byte	0x33a
 2257 039a 77000000 		.4byte	0x77
 2258 039e 00000000 		.4byte	.LFB47
 2259 03a2 12000000 		.4byte	.LFE47-.LFB47
 2260 03a6 01       		.uleb128 0x1
 2261 03a7 9C       		.byte	0x9c
 2262 03a8 BC030000 		.4byte	0x3bc
 2263 03ac 0E       		.uleb128 0xe
 2264 03ad 56010000 		.4byte	.LASF21
 2265 03b1 01       		.byte	0x1
 2266 03b2 3A03     		.2byte	0x33a
 2267 03b4 83000000 		.4byte	0x83
 2268 03b8 02       		.uleb128 0x2
 2269 03b9 91       		.byte	0x91
 2270 03ba 74       		.sleb128 -12
 2271 03bb 00       		.byte	0
 2272 03bc 0F       		.uleb128 0xf
 2273 03bd 55060000 		.4byte	.LASF44
 2274 03c1 01       		.byte	0x1
 2275 03c2 5603     		.2byte	0x356
 2276 03c4 77000000 		.4byte	0x77
 2277 03c8 00000000 		.4byte	.LFB48
 2278 03cc 12000000 		.4byte	.LFE48-.LFB48
 2279 03d0 01       		.uleb128 0x1
 2280 03d1 9C       		.byte	0x9c
 2281 03d2 E6030000 		.4byte	0x3e6
 2282 03d6 0E       		.uleb128 0xe
 2283 03d7 56010000 		.4byte	.LASF21
 2284 03db 01       		.byte	0x1
 2285 03dc 5603     		.2byte	0x356
 2286 03de 83000000 		.4byte	0x83
 2287 03e2 02       		.uleb128 0x2
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 91


 2288 03e3 91       		.byte	0x91
 2289 03e4 74       		.sleb128 -12
 2290 03e5 00       		.byte	0
 2291 03e6 0F       		.uleb128 0xf
 2292 03e7 87000000 		.4byte	.LASF45
 2293 03eb 01       		.byte	0x1
 2294 03ec 7203     		.2byte	0x372
 2295 03ee 77000000 		.4byte	0x77
 2296 03f2 00000000 		.4byte	.LFB49
 2297 03f6 12000000 		.4byte	.LFE49-.LFB49
 2298 03fa 01       		.uleb128 0x1
 2299 03fb 9C       		.byte	0x9c
 2300 03fc 10040000 		.4byte	0x410
 2301 0400 0E       		.uleb128 0xe
 2302 0401 56010000 		.4byte	.LASF21
 2303 0405 01       		.byte	0x1
 2304 0406 7203     		.2byte	0x372
 2305 0408 83000000 		.4byte	0x83
 2306 040c 02       		.uleb128 0x2
 2307 040d 91       		.byte	0x91
 2308 040e 74       		.sleb128 -12
 2309 040f 00       		.byte	0
 2310 0410 11       		.uleb128 0x11
 2311 0411 61020000 		.4byte	.LASF46
 2312 0415 01       		.byte	0x1
 2313 0416 4E04     		.2byte	0x44e
 2314 0418 83000000 		.4byte	0x83
 2315 041c 00000000 		.4byte	.LFB50
 2316 0420 0C010000 		.4byte	.LFE50-.LFB50
 2317 0424 01       		.uleb128 0x1
 2318 0425 9C       		.byte	0x9c
 2319 0426 85040000 		.4byte	0x485
 2320 042a 0E       		.uleb128 0xe
 2321 042b 4F010000 		.4byte	.LASF19
 2322 042f 01       		.byte	0x1
 2323 0430 4E04     		.2byte	0x44e
 2324 0432 83000000 		.4byte	0x83
 2325 0436 02       		.uleb128 0x2
 2326 0437 91       		.byte	0x91
 2327 0438 6C       		.sleb128 -20
 2328 0439 0D       		.uleb128 0xd
 2329 043a 56010000 		.4byte	.LASF21
 2330 043e 01       		.byte	0x1
 2331 043f 5004     		.2byte	0x450
 2332 0441 6B000000 		.4byte	0x6b
 2333 0445 02       		.uleb128 0x2
 2334 0446 91       		.byte	0x91
 2335 0447 77       		.sleb128 -9
 2336 0448 0D       		.uleb128 0xd
 2337 0449 E4030000 		.4byte	.LASF47
 2338 044d 01       		.byte	0x1
 2339 044e 5104     		.2byte	0x451
 2340 0450 6B000000 		.4byte	0x6b
 2341 0454 02       		.uleb128 0x2
 2342 0455 91       		.byte	0x91
 2343 0456 71       		.sleb128 -15
 2344 0457 0D       		.uleb128 0xd
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 92


 2345 0458 0F070000 		.4byte	.LASF48
 2346 045c 01       		.byte	0x1
 2347 045d 5204     		.2byte	0x452
 2348 045f 6B000000 		.4byte	0x6b
 2349 0463 02       		.uleb128 0x2
 2350 0464 91       		.byte	0x91
 2351 0465 70       		.sleb128 -16
 2352 0466 0D       		.uleb128 0xd
 2353 0467 69070000 		.4byte	.LASF49
 2354 046b 01       		.byte	0x1
 2355 046c 5404     		.2byte	0x454
 2356 046e 77000000 		.4byte	0x77
 2357 0472 02       		.uleb128 0x2
 2358 0473 91       		.byte	0x91
 2359 0474 74       		.sleb128 -12
 2360 0475 0D       		.uleb128 0xd
 2361 0476 45030000 		.4byte	.LASF50
 2362 047a 01       		.byte	0x1
 2363 047b 5504     		.2byte	0x455
 2364 047d 77000000 		.4byte	0x77
 2365 0481 02       		.uleb128 0x2
 2366 0482 91       		.byte	0x91
 2367 0483 72       		.sleb128 -14
 2368 0484 00       		.byte	0
 2369 0485 11       		.uleb128 0x11
 2370 0486 E5010000 		.4byte	.LASF51
 2371 048a 01       		.byte	0x1
 2372 048b A004     		.2byte	0x4a0
 2373 048d 83000000 		.4byte	0x83
 2374 0491 00000000 		.4byte	.LFB51
 2375 0495 42000000 		.4byte	.LFE51-.LFB51
 2376 0499 01       		.uleb128 0x1
 2377 049a 9C       		.byte	0x9c
 2378 049b DC040000 		.4byte	0x4dc
 2379 049f 0E       		.uleb128 0xe
 2380 04a0 56010000 		.4byte	.LASF21
 2381 04a4 01       		.byte	0x1
 2382 04a5 A004     		.2byte	0x4a0
 2383 04a7 83000000 		.4byte	0x83
 2384 04ab 02       		.uleb128 0x2
 2385 04ac 91       		.byte	0x91
 2386 04ad 64       		.sleb128 -28
 2387 04ae 0D       		.uleb128 0xd
 2388 04af 7E000000 		.4byte	.LASF52
 2389 04b3 01       		.byte	0x1
 2390 04b4 A204     		.2byte	0x4a2
 2391 04b6 83000000 		.4byte	0x83
 2392 04ba 02       		.uleb128 0x2
 2393 04bb 91       		.byte	0x91
 2394 04bc 74       		.sleb128 -12
 2395 04bd 0D       		.uleb128 0xd
 2396 04be E1000000 		.4byte	.LASF53
 2397 04c2 01       		.byte	0x1
 2398 04c3 A304     		.2byte	0x4a3
 2399 04c5 83000000 		.4byte	0x83
 2400 04c9 02       		.uleb128 0x2
 2401 04ca 91       		.byte	0x91
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 93


 2402 04cb 6C       		.sleb128 -20
 2403 04cc 0D       		.uleb128 0xd
 2404 04cd 38040000 		.4byte	.LASF54
 2405 04d1 01       		.byte	0x1
 2406 04d2 A404     		.2byte	0x4a4
 2407 04d4 83000000 		.4byte	0x83
 2408 04d8 02       		.uleb128 0x2
 2409 04d9 91       		.byte	0x91
 2410 04da 70       		.sleb128 -16
 2411 04db 00       		.byte	0
 2412 04dc 11       		.uleb128 0x11
 2413 04dd AD040000 		.4byte	.LASF55
 2414 04e1 01       		.byte	0x1
 2415 04e2 CE04     		.2byte	0x4ce
 2416 04e4 83000000 		.4byte	0x83
 2417 04e8 00000000 		.4byte	.LFB52
 2418 04ec 36000000 		.4byte	.LFE52-.LFB52
 2419 04f0 01       		.uleb128 0x1
 2420 04f1 9C       		.byte	0x9c
 2421 04f2 13050000 		.4byte	0x513
 2422 04f6 0C       		.uleb128 0xc
 2423 04f7 6900     		.ascii	"i\000"
 2424 04f9 01       		.byte	0x1
 2425 04fa D104     		.2byte	0x4d1
 2426 04fc 83000000 		.4byte	0x83
 2427 0500 02       		.uleb128 0x2
 2428 0501 91       		.byte	0x91
 2429 0502 74       		.sleb128 -12
 2430 0503 0D       		.uleb128 0xd
 2431 0504 38040000 		.4byte	.LASF54
 2432 0508 01       		.byte	0x1
 2433 0509 D204     		.2byte	0x4d2
 2434 050b 83000000 		.4byte	0x83
 2435 050f 02       		.uleb128 0x2
 2436 0510 91       		.byte	0x91
 2437 0511 70       		.sleb128 -16
 2438 0512 00       		.byte	0
 2439 0513 0B       		.uleb128 0xb
 2440 0514 B0030000 		.4byte	.LASF56
 2441 0518 01       		.byte	0x1
 2442 0519 FD04     		.2byte	0x4fd
 2443 051b 00000000 		.4byte	.LFB53
 2444 051f 5C000000 		.4byte	.LFE53-.LFB53
 2445 0523 01       		.uleb128 0x1
 2446 0524 9C       		.byte	0x9c
 2447 0525 57050000 		.4byte	0x557
 2448 0529 0E       		.uleb128 0xe
 2449 052a 56010000 		.4byte	.LASF21
 2450 052e 01       		.byte	0x1
 2451 052f FD04     		.2byte	0x4fd
 2452 0531 83000000 		.4byte	0x83
 2453 0535 02       		.uleb128 0x2
 2454 0536 91       		.byte	0x91
 2455 0537 6C       		.sleb128 -20
 2456 0538 0D       		.uleb128 0xd
 2457 0539 7E000000 		.4byte	.LASF52
 2458 053d 01       		.byte	0x1
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 94


 2459 053e 0005     		.2byte	0x500
 2460 0540 6B000000 		.4byte	0x6b
 2461 0544 02       		.uleb128 0x2
 2462 0545 91       		.byte	0x91
 2463 0546 77       		.sleb128 -9
 2464 0547 0D       		.uleb128 0xd
 2465 0548 E1000000 		.4byte	.LASF53
 2466 054c 01       		.byte	0x1
 2467 054d 0105     		.2byte	0x501
 2468 054f 6B000000 		.4byte	0x6b
 2469 0553 02       		.uleb128 0x2
 2470 0554 91       		.byte	0x91
 2471 0555 76       		.sleb128 -10
 2472 0556 00       		.byte	0
 2473 0557 0B       		.uleb128 0xb
 2474 0558 A2050000 		.4byte	.LASF57
 2475 055c 01       		.byte	0x1
 2476 055d 2805     		.2byte	0x528
 2477 055f 00000000 		.4byte	.LFB54
 2478 0563 5C000000 		.4byte	.LFE54-.LFB54
 2479 0567 01       		.uleb128 0x1
 2480 0568 9C       		.byte	0x9c
 2481 0569 9B050000 		.4byte	0x59b
 2482 056d 0E       		.uleb128 0xe
 2483 056e 56010000 		.4byte	.LASF21
 2484 0572 01       		.byte	0x1
 2485 0573 2805     		.2byte	0x528
 2486 0575 83000000 		.4byte	0x83
 2487 0579 02       		.uleb128 0x2
 2488 057a 91       		.byte	0x91
 2489 057b 6C       		.sleb128 -20
 2490 057c 0D       		.uleb128 0xd
 2491 057d 7E000000 		.4byte	.LASF52
 2492 0581 01       		.byte	0x1
 2493 0582 2A05     		.2byte	0x52a
 2494 0584 6B000000 		.4byte	0x6b
 2495 0588 02       		.uleb128 0x2
 2496 0589 91       		.byte	0x91
 2497 058a 77       		.sleb128 -9
 2498 058b 0D       		.uleb128 0xd
 2499 058c E1000000 		.4byte	.LASF53
 2500 0590 01       		.byte	0x1
 2501 0591 2B05     		.2byte	0x52b
 2502 0593 6B000000 		.4byte	0x6b
 2503 0597 02       		.uleb128 0x2
 2504 0598 91       		.byte	0x91
 2505 0599 76       		.sleb128 -10
 2506 059a 00       		.byte	0
 2507 059b 0F       		.uleb128 0xf
 2508 059c AC000000 		.4byte	.LASF58
 2509 05a0 01       		.byte	0x1
 2510 05a1 BC09     		.2byte	0x9bc
 2511 05a3 77000000 		.4byte	0x77
 2512 05a7 00000000 		.4byte	.LFB55
 2513 05ab 3C000000 		.4byte	.LFE55-.LFB55
 2514 05af 01       		.uleb128 0x1
 2515 05b0 9C       		.byte	0x9c
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 95


 2516 05b1 E1050000 		.4byte	0x5e1
 2517 05b5 12       		.uleb128 0x12
 2518 05b6 783100   		.ascii	"x1\000"
 2519 05b9 01       		.byte	0x1
 2520 05ba BC09     		.2byte	0x9bc
 2521 05bc 77000000 		.4byte	0x77
 2522 05c0 02       		.uleb128 0x2
 2523 05c1 91       		.byte	0x91
 2524 05c2 6E       		.sleb128 -18
 2525 05c3 12       		.uleb128 0x12
 2526 05c4 783200   		.ascii	"x2\000"
 2527 05c7 01       		.byte	0x1
 2528 05c8 BC09     		.2byte	0x9bc
 2529 05ca 77000000 		.4byte	0x77
 2530 05ce 02       		.uleb128 0x2
 2531 05cf 91       		.byte	0x91
 2532 05d0 6C       		.sleb128 -20
 2533 05d1 0C       		.uleb128 0xc
 2534 05d2 746D7000 		.ascii	"tmp\000"
 2535 05d6 01       		.byte	0x1
 2536 05d7 BE09     		.2byte	0x9be
 2537 05d9 83000000 		.4byte	0x83
 2538 05dd 02       		.uleb128 0x2
 2539 05de 91       		.byte	0x91
 2540 05df 74       		.sleb128 -12
 2541 05e0 00       		.byte	0
 2542 05e1 0F       		.uleb128 0xf
 2543 05e2 74040000 		.4byte	.LASF59
 2544 05e6 01       		.byte	0x1
 2545 05e7 A50A     		.2byte	0xaa5
 2546 05e9 83000000 		.4byte	0x83
 2547 05ed 00000000 		.4byte	.LFB56
 2548 05f1 1C000000 		.4byte	.LFE56-.LFB56
 2549 05f5 01       		.uleb128 0x1
 2550 05f6 9C       		.byte	0x9c
 2551 05f7 0B060000 		.4byte	0x60b
 2552 05fb 0E       		.uleb128 0xe
 2553 05fc 4F010000 		.4byte	.LASF19
 2554 0600 01       		.byte	0x1
 2555 0601 A50A     		.2byte	0xaa5
 2556 0603 83000000 		.4byte	0x83
 2557 0607 02       		.uleb128 0x2
 2558 0608 91       		.byte	0x91
 2559 0609 74       		.sleb128 -12
 2560 060a 00       		.byte	0
 2561 060b 0F       		.uleb128 0xf
 2562 060c C2000000 		.4byte	.LASF60
 2563 0610 01       		.byte	0x1
 2564 0611 BF0A     		.2byte	0xabf
 2565 0613 6B000000 		.4byte	0x6b
 2566 0617 00000000 		.4byte	.LFB57
 2567 061b 1C000000 		.4byte	.LFE57-.LFB57
 2568 061f 01       		.uleb128 0x1
 2569 0620 9C       		.byte	0x9c
 2570 0621 35060000 		.4byte	0x635
 2571 0625 0E       		.uleb128 0xe
 2572 0626 4F010000 		.4byte	.LASF19
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 96


 2573 062a 01       		.byte	0x1
 2574 062b BF0A     		.2byte	0xabf
 2575 062d 83000000 		.4byte	0x83
 2576 0631 02       		.uleb128 0x2
 2577 0632 91       		.byte	0x91
 2578 0633 74       		.sleb128 -12
 2579 0634 00       		.byte	0
 2580 0635 0F       		.uleb128 0xf
 2581 0636 50030000 		.4byte	.LASF61
 2582 063a 01       		.byte	0x1
 2583 063b D90A     		.2byte	0xad9
 2584 063d 6B000000 		.4byte	0x6b
 2585 0641 00000000 		.4byte	.LFB58
 2586 0645 12000000 		.4byte	.LFE58-.LFB58
 2587 0649 01       		.uleb128 0x1
 2588 064a 9C       		.byte	0x9c
 2589 064b 5F060000 		.4byte	0x65f
 2590 064f 0E       		.uleb128 0xe
 2591 0650 56010000 		.4byte	.LASF21
 2592 0654 01       		.byte	0x1
 2593 0655 D90A     		.2byte	0xad9
 2594 0657 83000000 		.4byte	0x83
 2595 065b 02       		.uleb128 0x2
 2596 065c 91       		.byte	0x91
 2597 065d 74       		.sleb128 -12
 2598 065e 00       		.byte	0
 2599 065f 13       		.uleb128 0x13
 2600 0660 41020000 		.4byte	.LASF62
 2601 0664 01       		.byte	0x1
 2602 0665 F30A     		.2byte	0xaf3
 2603 0667 00000000 		.4byte	.LFB59
 2604 066b 14000000 		.4byte	.LFE59-.LFB59
 2605 066f 01       		.uleb128 0x1
 2606 0670 9C       		.byte	0x9c
 2607 0671 13       		.uleb128 0x13
 2608 0672 F4000000 		.4byte	.LASF63
 2609 0676 01       		.byte	0x1
 2610 0677 0C0B     		.2byte	0xb0c
 2611 0679 00000000 		.4byte	.LFB60
 2612 067d 14000000 		.4byte	.LFE60-.LFB60
 2613 0681 01       		.uleb128 0x1
 2614 0682 9C       		.byte	0x9c
 2615 0683 14       		.uleb128 0x14
 2616 0684 6B000000 		.4byte	0x6b
 2617 0688 93060000 		.4byte	0x693
 2618 068c 15       		.uleb128 0x15
 2619 068d A4000000 		.4byte	0xa4
 2620 0691 01       		.byte	0x1
 2621 0692 00       		.byte	0
 2622 0693 08       		.uleb128 0x8
 2623 0694 3A060000 		.4byte	.LASF64
 2624 0698 01       		.byte	0x1
 2625 0699 59       		.byte	0x59
 2626 069a 83060000 		.4byte	0x683
 2627 069e 05       		.uleb128 0x5
 2628 069f 03       		.byte	0x3
 2629 06a0 10000000 		.4byte	CapSense_1_debounceCounter
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 97


 2630 06a4 14       		.uleb128 0x14
 2631 06a5 77000000 		.4byte	0x77
 2632 06a9 B4060000 		.4byte	0x6b4
 2633 06ad 15       		.uleb128 0x15
 2634 06ae A4000000 		.4byte	0xa4
 2635 06b2 00       		.byte	0
 2636 06b3 00       		.byte	0
 2637 06b4 16       		.uleb128 0x16
 2638 06b5 4A000000 		.4byte	.LASF65
 2639 06b9 01       		.byte	0x1
 2640 06ba 2C       		.byte	0x2c
 2641 06bb A4060000 		.4byte	0x6a4
 2642 06bf 14       		.uleb128 0x14
 2643 06c0 6B000000 		.4byte	0x6b
 2644 06c4 CF060000 		.4byte	0x6cf
 2645 06c8 15       		.uleb128 0x15
 2646 06c9 A4000000 		.4byte	0xa4
 2647 06cd 00       		.byte	0
 2648 06ce 00       		.byte	0
 2649 06cf 16       		.uleb128 0x16
 2650 06d0 79010000 		.4byte	.LASF66
 2651 06d4 01       		.byte	0x1
 2652 06d5 2D       		.byte	0x2d
 2653 06d6 BF060000 		.4byte	0x6bf
 2654 06da 14       		.uleb128 0x14
 2655 06db B2000000 		.4byte	0xb2
 2656 06df EA060000 		.4byte	0x6ea
 2657 06e3 15       		.uleb128 0x15
 2658 06e4 A4000000 		.4byte	0xa4
 2659 06e8 00       		.byte	0
 2660 06e9 00       		.byte	0
 2661 06ea 16       		.uleb128 0x16
 2662 06eb 51070000 		.4byte	.LASF67
 2663 06ef 01       		.byte	0x1
 2664 06f0 2E       		.byte	0x2e
 2665 06f1 F5060000 		.4byte	0x6f5
 2666 06f5 05       		.uleb128 0x5
 2667 06f6 DA060000 		.4byte	0x6da
 2668 06fa 17       		.uleb128 0x17
 2669 06fb BB050000 		.4byte	.LASF68
 2670 06ff 01       		.byte	0x1
 2671 0700 34       		.byte	0x34
 2672 0701 A4060000 		.4byte	0x6a4
 2673 0705 05       		.uleb128 0x5
 2674 0706 03       		.byte	0x3
 2675 0707 00000000 		.4byte	CapSense_1_sensorBaseline
 2676 070b 17       		.uleb128 0x17
 2677 070c 85050000 		.4byte	.LASF69
 2678 0710 01       		.byte	0x1
 2679 0711 35       		.byte	0x35
 2680 0712 BF060000 		.4byte	0x6bf
 2681 0716 05       		.uleb128 0x5
 2682 0717 03       		.byte	0x3
 2683 0718 00000000 		.4byte	CapSense_1_sensorBaselineLow
 2684 071c 17       		.uleb128 0x17
 2685 071d 37010000 		.4byte	.LASF70
 2686 0721 01       		.byte	0x1
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 98


 2687 0722 36       		.byte	0x36
 2688 0723 A4060000 		.4byte	0x6a4
 2689 0727 05       		.uleb128 0x5
 2690 0728 03       		.byte	0x3
 2691 0729 00000000 		.4byte	CapSense_1_sensorSignal
 2692 072d 17       		.uleb128 0x17
 2693 072e 18000000 		.4byte	.LASF71
 2694 0732 01       		.byte	0x1
 2695 0733 37       		.byte	0x37
 2696 0734 BF060000 		.4byte	0x6bf
 2697 0738 05       		.uleb128 0x5
 2698 0739 03       		.byte	0x3
 2699 073a 00000000 		.4byte	CapSense_1_sensorOnMask
 2700 073e 17       		.uleb128 0x17
 2701 073f 5F000000 		.4byte	.LASF72
 2702 0743 01       		.byte	0x1
 2703 0744 39       		.byte	0x39
 2704 0745 BF060000 		.4byte	0x6bf
 2705 0749 05       		.uleb128 0x5
 2706 074a 03       		.byte	0x3
 2707 074b 00000000 		.4byte	CapSense_1_lowBaselineResetCnt
 2708 074f 17       		.uleb128 0x17
 2709 0750 C8030000 		.4byte	.LASF73
 2710 0754 01       		.byte	0x1
 2711 0755 3A       		.byte	0x3a
 2712 0756 BF060000 		.4byte	0x6bf
 2713 075a 05       		.uleb128 0x5
 2714 075b 03       		.byte	0x3
 2715 075c 00000000 		.4byte	CapSense_1_lowBaselineReset
 2716 0760 14       		.uleb128 0x14
 2717 0761 70070000 		.4byte	0x770
 2718 0765 70070000 		.4byte	0x770
 2719 0769 15       		.uleb128 0x15
 2720 076a A4000000 		.4byte	0xa4
 2721 076e 00       		.byte	0
 2722 076f 00       		.byte	0
 2723 0770 05       		.uleb128 0x5
 2724 0771 77000000 		.4byte	0x77
 2725 0775 17       		.uleb128 0x17
 2726 0776 95010000 		.4byte	.LASF74
 2727 077a 01       		.byte	0x1
 2728 077b 49       		.byte	0x49
 2729 077c 86070000 		.4byte	0x786
 2730 0780 05       		.uleb128 0x5
 2731 0781 03       		.byte	0x3
 2732 0782 00000000 		.4byte	CapSense_1_fingerThreshold
 2733 0786 05       		.uleb128 0x5
 2734 0787 60070000 		.4byte	0x760
 2735 078b 17       		.uleb128 0x17
 2736 078c 1F020000 		.4byte	.LASF75
 2737 0790 01       		.byte	0x1
 2738 0791 4D       		.byte	0x4d
 2739 0792 9C070000 		.4byte	0x79c
 2740 0796 05       		.uleb128 0x5
 2741 0797 03       		.byte	0x3
 2742 0798 00000000 		.4byte	CapSense_1_noiseThreshold
 2743 079c 05       		.uleb128 0x5
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 99


 2744 079d 60070000 		.4byte	0x760
 2745 07a1 17       		.uleb128 0x17
 2746 07a2 63010000 		.4byte	.LASF76
 2747 07a6 01       		.byte	0x1
 2748 07a7 51       		.byte	0x51
 2749 07a8 B2070000 		.4byte	0x7b2
 2750 07ac 05       		.uleb128 0x5
 2751 07ad 03       		.byte	0x3
 2752 07ae 00000000 		.4byte	CapSense_1_hysteresis
 2753 07b2 05       		.uleb128 0x5
 2754 07b3 60070000 		.4byte	0x760
 2755 07b7 17       		.uleb128 0x17
 2756 07b8 FB060000 		.4byte	.LASF77
 2757 07bc 01       		.byte	0x1
 2758 07bd 55       		.byte	0x55
 2759 07be C8070000 		.4byte	0x7c8
 2760 07c2 05       		.uleb128 0x5
 2761 07c3 03       		.byte	0x3
 2762 07c4 00000000 		.4byte	CapSense_1_debounce
 2763 07c8 05       		.uleb128 0x5
 2764 07c9 DA060000 		.4byte	0x6da
 2765 07cd 17       		.uleb128 0x17
 2766 07ce 00000000 		.4byte	.LASF78
 2767 07d2 01       		.byte	0x1
 2768 07d3 5D       		.byte	0x5d
 2769 07d4 DE070000 		.4byte	0x7de
 2770 07d8 05       		.uleb128 0x5
 2771 07d9 03       		.byte	0x3
 2772 07da 00000000 		.4byte	CapSense_1_rawDataIndex
 2773 07de 05       		.uleb128 0x5
 2774 07df DA060000 		.4byte	0x6da
 2775 07e3 17       		.uleb128 0x17
 2776 07e4 D5050000 		.4byte	.LASF79
 2777 07e8 01       		.byte	0x1
 2778 07e9 61       		.byte	0x61
 2779 07ea F4070000 		.4byte	0x7f4
 2780 07ee 05       		.uleb128 0x5
 2781 07ef 03       		.byte	0x3
 2782 07f0 00000000 		.4byte	CapSense_1_numberOfSensors
 2783 07f4 05       		.uleb128 0x5
 2784 07f5 DA060000 		.4byte	0x6da
 2785 07f9 17       		.uleb128 0x17
 2786 07fa BC060000 		.4byte	.LASF80
 2787 07fe 01       		.byte	0x1
 2788 07ff 27       		.byte	0x27
 2789 0800 A4060000 		.4byte	0x6a4
 2790 0804 05       		.uleb128 0x5
 2791 0805 03       		.byte	0x3
 2792 0806 00000000 		.4byte	CapSense_1_rawFilterData1
 2793 080a 17       		.uleb128 0x17
 2794 080b C9010000 		.4byte	.LASF81
 2795 080f 01       		.byte	0x1
 2796 0810 45       		.byte	0x45
 2797 0811 6B000000 		.4byte	0x6b
 2798 0815 05       		.uleb128 0x5
 2799 0816 03       		.byte	0x3
 2800 0817 00000000 		.4byte	CapSense_1_enableRawFilters
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 100


 2801 081b 00       		.byte	0
 2802              		.section	.debug_abbrev,"",%progbits
 2803              	.Ldebug_abbrev0:
 2804 0000 01       		.uleb128 0x1
 2805 0001 11       		.uleb128 0x11
 2806 0002 01       		.byte	0x1
 2807 0003 25       		.uleb128 0x25
 2808 0004 0E       		.uleb128 0xe
 2809 0005 13       		.uleb128 0x13
 2810 0006 0B       		.uleb128 0xb
 2811 0007 03       		.uleb128 0x3
 2812 0008 0E       		.uleb128 0xe
 2813 0009 1B       		.uleb128 0x1b
 2814 000a 0E       		.uleb128 0xe
 2815 000b 55       		.uleb128 0x55
 2816 000c 17       		.uleb128 0x17
 2817 000d 11       		.uleb128 0x11
 2818 000e 01       		.uleb128 0x1
 2819 000f 10       		.uleb128 0x10
 2820 0010 17       		.uleb128 0x17
 2821 0011 00       		.byte	0
 2822 0012 00       		.byte	0
 2823 0013 02       		.uleb128 0x2
 2824 0014 24       		.uleb128 0x24
 2825 0015 00       		.byte	0
 2826 0016 0B       		.uleb128 0xb
 2827 0017 0B       		.uleb128 0xb
 2828 0018 3E       		.uleb128 0x3e
 2829 0019 0B       		.uleb128 0xb
 2830 001a 03       		.uleb128 0x3
 2831 001b 0E       		.uleb128 0xe
 2832 001c 00       		.byte	0
 2833 001d 00       		.byte	0
 2834 001e 03       		.uleb128 0x3
 2835 001f 24       		.uleb128 0x24
 2836 0020 00       		.byte	0
 2837 0021 0B       		.uleb128 0xb
 2838 0022 0B       		.uleb128 0xb
 2839 0023 3E       		.uleb128 0x3e
 2840 0024 0B       		.uleb128 0xb
 2841 0025 03       		.uleb128 0x3
 2842 0026 08       		.uleb128 0x8
 2843 0027 00       		.byte	0
 2844 0028 00       		.byte	0
 2845 0029 04       		.uleb128 0x4
 2846 002a 16       		.uleb128 0x16
 2847 002b 00       		.byte	0
 2848 002c 03       		.uleb128 0x3
 2849 002d 0E       		.uleb128 0xe
 2850 002e 3A       		.uleb128 0x3a
 2851 002f 0B       		.uleb128 0xb
 2852 0030 3B       		.uleb128 0x3b
 2853 0031 05       		.uleb128 0x5
 2854 0032 49       		.uleb128 0x49
 2855 0033 13       		.uleb128 0x13
 2856 0034 00       		.byte	0
 2857 0035 00       		.byte	0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 101


 2858 0036 05       		.uleb128 0x5
 2859 0037 26       		.uleb128 0x26
 2860 0038 00       		.byte	0
 2861 0039 49       		.uleb128 0x49
 2862 003a 13       		.uleb128 0x13
 2863 003b 00       		.byte	0
 2864 003c 00       		.byte	0
 2865 003d 06       		.uleb128 0x6
 2866 003e 2E       		.uleb128 0x2e
 2867 003f 01       		.byte	0x1
 2868 0040 3F       		.uleb128 0x3f
 2869 0041 19       		.uleb128 0x19
 2870 0042 03       		.uleb128 0x3
 2871 0043 0E       		.uleb128 0xe
 2872 0044 3A       		.uleb128 0x3a
 2873 0045 0B       		.uleb128 0xb
 2874 0046 3B       		.uleb128 0x3b
 2875 0047 0B       		.uleb128 0xb
 2876 0048 27       		.uleb128 0x27
 2877 0049 19       		.uleb128 0x19
 2878 004a 11       		.uleb128 0x11
 2879 004b 01       		.uleb128 0x1
 2880 004c 12       		.uleb128 0x12
 2881 004d 06       		.uleb128 0x6
 2882 004e 40       		.uleb128 0x40
 2883 004f 18       		.uleb128 0x18
 2884 0050 9742     		.uleb128 0x2117
 2885 0052 19       		.uleb128 0x19
 2886 0053 01       		.uleb128 0x1
 2887 0054 13       		.uleb128 0x13
 2888 0055 00       		.byte	0
 2889 0056 00       		.byte	0
 2890 0057 07       		.uleb128 0x7
 2891 0058 05       		.uleb128 0x5
 2892 0059 00       		.byte	0
 2893 005a 03       		.uleb128 0x3
 2894 005b 0E       		.uleb128 0xe
 2895 005c 3A       		.uleb128 0x3a
 2896 005d 0B       		.uleb128 0xb
 2897 005e 3B       		.uleb128 0x3b
 2898 005f 0B       		.uleb128 0xb
 2899 0060 49       		.uleb128 0x49
 2900 0061 13       		.uleb128 0x13
 2901 0062 02       		.uleb128 0x2
 2902 0063 18       		.uleb128 0x18
 2903 0064 00       		.byte	0
 2904 0065 00       		.byte	0
 2905 0066 08       		.uleb128 0x8
 2906 0067 34       		.uleb128 0x34
 2907 0068 00       		.byte	0
 2908 0069 03       		.uleb128 0x3
 2909 006a 0E       		.uleb128 0xe
 2910 006b 3A       		.uleb128 0x3a
 2911 006c 0B       		.uleb128 0xb
 2912 006d 3B       		.uleb128 0x3b
 2913 006e 0B       		.uleb128 0xb
 2914 006f 49       		.uleb128 0x49
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 102


 2915 0070 13       		.uleb128 0x13
 2916 0071 02       		.uleb128 0x2
 2917 0072 18       		.uleb128 0x18
 2918 0073 00       		.byte	0
 2919 0074 00       		.byte	0
 2920 0075 09       		.uleb128 0x9
 2921 0076 2E       		.uleb128 0x2e
 2922 0077 01       		.byte	0x1
 2923 0078 3F       		.uleb128 0x3f
 2924 0079 19       		.uleb128 0x19
 2925 007a 03       		.uleb128 0x3
 2926 007b 0E       		.uleb128 0xe
 2927 007c 3A       		.uleb128 0x3a
 2928 007d 0B       		.uleb128 0xb
 2929 007e 3B       		.uleb128 0x3b
 2930 007f 0B       		.uleb128 0xb
 2931 0080 27       		.uleb128 0x27
 2932 0081 19       		.uleb128 0x19
 2933 0082 11       		.uleb128 0x11
 2934 0083 01       		.uleb128 0x1
 2935 0084 12       		.uleb128 0x12
 2936 0085 06       		.uleb128 0x6
 2937 0086 40       		.uleb128 0x40
 2938 0087 18       		.uleb128 0x18
 2939 0088 9642     		.uleb128 0x2116
 2940 008a 19       		.uleb128 0x19
 2941 008b 01       		.uleb128 0x1
 2942 008c 13       		.uleb128 0x13
 2943 008d 00       		.byte	0
 2944 008e 00       		.byte	0
 2945 008f 0A       		.uleb128 0xa
 2946 0090 34       		.uleb128 0x34
 2947 0091 00       		.byte	0
 2948 0092 03       		.uleb128 0x3
 2949 0093 08       		.uleb128 0x8
 2950 0094 3A       		.uleb128 0x3a
 2951 0095 0B       		.uleb128 0xb
 2952 0096 3B       		.uleb128 0x3b
 2953 0097 0B       		.uleb128 0xb
 2954 0098 49       		.uleb128 0x49
 2955 0099 13       		.uleb128 0x13
 2956 009a 02       		.uleb128 0x2
 2957 009b 18       		.uleb128 0x18
 2958 009c 00       		.byte	0
 2959 009d 00       		.byte	0
 2960 009e 0B       		.uleb128 0xb
 2961 009f 2E       		.uleb128 0x2e
 2962 00a0 01       		.byte	0x1
 2963 00a1 3F       		.uleb128 0x3f
 2964 00a2 19       		.uleb128 0x19
 2965 00a3 03       		.uleb128 0x3
 2966 00a4 0E       		.uleb128 0xe
 2967 00a5 3A       		.uleb128 0x3a
 2968 00a6 0B       		.uleb128 0xb
 2969 00a7 3B       		.uleb128 0x3b
 2970 00a8 05       		.uleb128 0x5
 2971 00a9 27       		.uleb128 0x27
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 103


 2972 00aa 19       		.uleb128 0x19
 2973 00ab 11       		.uleb128 0x11
 2974 00ac 01       		.uleb128 0x1
 2975 00ad 12       		.uleb128 0x12
 2976 00ae 06       		.uleb128 0x6
 2977 00af 40       		.uleb128 0x40
 2978 00b0 18       		.uleb128 0x18
 2979 00b1 9642     		.uleb128 0x2116
 2980 00b3 19       		.uleb128 0x19
 2981 00b4 01       		.uleb128 0x1
 2982 00b5 13       		.uleb128 0x13
 2983 00b6 00       		.byte	0
 2984 00b7 00       		.byte	0
 2985 00b8 0C       		.uleb128 0xc
 2986 00b9 34       		.uleb128 0x34
 2987 00ba 00       		.byte	0
 2988 00bb 03       		.uleb128 0x3
 2989 00bc 08       		.uleb128 0x8
 2990 00bd 3A       		.uleb128 0x3a
 2991 00be 0B       		.uleb128 0xb
 2992 00bf 3B       		.uleb128 0x3b
 2993 00c0 05       		.uleb128 0x5
 2994 00c1 49       		.uleb128 0x49
 2995 00c2 13       		.uleb128 0x13
 2996 00c3 02       		.uleb128 0x2
 2997 00c4 18       		.uleb128 0x18
 2998 00c5 00       		.byte	0
 2999 00c6 00       		.byte	0
 3000 00c7 0D       		.uleb128 0xd
 3001 00c8 34       		.uleb128 0x34
 3002 00c9 00       		.byte	0
 3003 00ca 03       		.uleb128 0x3
 3004 00cb 0E       		.uleb128 0xe
 3005 00cc 3A       		.uleb128 0x3a
 3006 00cd 0B       		.uleb128 0xb
 3007 00ce 3B       		.uleb128 0x3b
 3008 00cf 05       		.uleb128 0x5
 3009 00d0 49       		.uleb128 0x49
 3010 00d1 13       		.uleb128 0x13
 3011 00d2 02       		.uleb128 0x2
 3012 00d3 18       		.uleb128 0x18
 3013 00d4 00       		.byte	0
 3014 00d5 00       		.byte	0
 3015 00d6 0E       		.uleb128 0xe
 3016 00d7 05       		.uleb128 0x5
 3017 00d8 00       		.byte	0
 3018 00d9 03       		.uleb128 0x3
 3019 00da 0E       		.uleb128 0xe
 3020 00db 3A       		.uleb128 0x3a
 3021 00dc 0B       		.uleb128 0xb
 3022 00dd 3B       		.uleb128 0x3b
 3023 00de 05       		.uleb128 0x5
 3024 00df 49       		.uleb128 0x49
 3025 00e0 13       		.uleb128 0x13
 3026 00e1 02       		.uleb128 0x2
 3027 00e2 18       		.uleb128 0x18
 3028 00e3 00       		.byte	0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 104


 3029 00e4 00       		.byte	0
 3030 00e5 0F       		.uleb128 0xf
 3031 00e6 2E       		.uleb128 0x2e
 3032 00e7 01       		.byte	0x1
 3033 00e8 3F       		.uleb128 0x3f
 3034 00e9 19       		.uleb128 0x19
 3035 00ea 03       		.uleb128 0x3
 3036 00eb 0E       		.uleb128 0xe
 3037 00ec 3A       		.uleb128 0x3a
 3038 00ed 0B       		.uleb128 0xb
 3039 00ee 3B       		.uleb128 0x3b
 3040 00ef 05       		.uleb128 0x5
 3041 00f0 27       		.uleb128 0x27
 3042 00f1 19       		.uleb128 0x19
 3043 00f2 49       		.uleb128 0x49
 3044 00f3 13       		.uleb128 0x13
 3045 00f4 11       		.uleb128 0x11
 3046 00f5 01       		.uleb128 0x1
 3047 00f6 12       		.uleb128 0x12
 3048 00f7 06       		.uleb128 0x6
 3049 00f8 40       		.uleb128 0x40
 3050 00f9 18       		.uleb128 0x18
 3051 00fa 9742     		.uleb128 0x2117
 3052 00fc 19       		.uleb128 0x19
 3053 00fd 01       		.uleb128 0x1
 3054 00fe 13       		.uleb128 0x13
 3055 00ff 00       		.byte	0
 3056 0100 00       		.byte	0
 3057 0101 10       		.uleb128 0x10
 3058 0102 2E       		.uleb128 0x2e
 3059 0103 01       		.byte	0x1
 3060 0104 3F       		.uleb128 0x3f
 3061 0105 19       		.uleb128 0x19
 3062 0106 03       		.uleb128 0x3
 3063 0107 0E       		.uleb128 0xe
 3064 0108 3A       		.uleb128 0x3a
 3065 0109 0B       		.uleb128 0xb
 3066 010a 3B       		.uleb128 0x3b
 3067 010b 05       		.uleb128 0x5
 3068 010c 27       		.uleb128 0x27
 3069 010d 19       		.uleb128 0x19
 3070 010e 11       		.uleb128 0x11
 3071 010f 01       		.uleb128 0x1
 3072 0110 12       		.uleb128 0x12
 3073 0111 06       		.uleb128 0x6
 3074 0112 40       		.uleb128 0x40
 3075 0113 18       		.uleb128 0x18
 3076 0114 9742     		.uleb128 0x2117
 3077 0116 19       		.uleb128 0x19
 3078 0117 01       		.uleb128 0x1
 3079 0118 13       		.uleb128 0x13
 3080 0119 00       		.byte	0
 3081 011a 00       		.byte	0
 3082 011b 11       		.uleb128 0x11
 3083 011c 2E       		.uleb128 0x2e
 3084 011d 01       		.byte	0x1
 3085 011e 3F       		.uleb128 0x3f
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 105


 3086 011f 19       		.uleb128 0x19
 3087 0120 03       		.uleb128 0x3
 3088 0121 0E       		.uleb128 0xe
 3089 0122 3A       		.uleb128 0x3a
 3090 0123 0B       		.uleb128 0xb
 3091 0124 3B       		.uleb128 0x3b
 3092 0125 05       		.uleb128 0x5
 3093 0126 27       		.uleb128 0x27
 3094 0127 19       		.uleb128 0x19
 3095 0128 49       		.uleb128 0x49
 3096 0129 13       		.uleb128 0x13
 3097 012a 11       		.uleb128 0x11
 3098 012b 01       		.uleb128 0x1
 3099 012c 12       		.uleb128 0x12
 3100 012d 06       		.uleb128 0x6
 3101 012e 40       		.uleb128 0x40
 3102 012f 18       		.uleb128 0x18
 3103 0130 9642     		.uleb128 0x2116
 3104 0132 19       		.uleb128 0x19
 3105 0133 01       		.uleb128 0x1
 3106 0134 13       		.uleb128 0x13
 3107 0135 00       		.byte	0
 3108 0136 00       		.byte	0
 3109 0137 12       		.uleb128 0x12
 3110 0138 05       		.uleb128 0x5
 3111 0139 00       		.byte	0
 3112 013a 03       		.uleb128 0x3
 3113 013b 08       		.uleb128 0x8
 3114 013c 3A       		.uleb128 0x3a
 3115 013d 0B       		.uleb128 0xb
 3116 013e 3B       		.uleb128 0x3b
 3117 013f 05       		.uleb128 0x5
 3118 0140 49       		.uleb128 0x49
 3119 0141 13       		.uleb128 0x13
 3120 0142 02       		.uleb128 0x2
 3121 0143 18       		.uleb128 0x18
 3122 0144 00       		.byte	0
 3123 0145 00       		.byte	0
 3124 0146 13       		.uleb128 0x13
 3125 0147 2E       		.uleb128 0x2e
 3126 0148 00       		.byte	0
 3127 0149 3F       		.uleb128 0x3f
 3128 014a 19       		.uleb128 0x19
 3129 014b 03       		.uleb128 0x3
 3130 014c 0E       		.uleb128 0xe
 3131 014d 3A       		.uleb128 0x3a
 3132 014e 0B       		.uleb128 0xb
 3133 014f 3B       		.uleb128 0x3b
 3134 0150 05       		.uleb128 0x5
 3135 0151 27       		.uleb128 0x27
 3136 0152 19       		.uleb128 0x19
 3137 0153 11       		.uleb128 0x11
 3138 0154 01       		.uleb128 0x1
 3139 0155 12       		.uleb128 0x12
 3140 0156 06       		.uleb128 0x6
 3141 0157 40       		.uleb128 0x40
 3142 0158 18       		.uleb128 0x18
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 106


 3143 0159 9742     		.uleb128 0x2117
 3144 015b 19       		.uleb128 0x19
 3145 015c 00       		.byte	0
 3146 015d 00       		.byte	0
 3147 015e 14       		.uleb128 0x14
 3148 015f 01       		.uleb128 0x1
 3149 0160 01       		.byte	0x1
 3150 0161 49       		.uleb128 0x49
 3151 0162 13       		.uleb128 0x13
 3152 0163 01       		.uleb128 0x1
 3153 0164 13       		.uleb128 0x13
 3154 0165 00       		.byte	0
 3155 0166 00       		.byte	0
 3156 0167 15       		.uleb128 0x15
 3157 0168 21       		.uleb128 0x21
 3158 0169 00       		.byte	0
 3159 016a 49       		.uleb128 0x49
 3160 016b 13       		.uleb128 0x13
 3161 016c 2F       		.uleb128 0x2f
 3162 016d 0B       		.uleb128 0xb
 3163 016e 00       		.byte	0
 3164 016f 00       		.byte	0
 3165 0170 16       		.uleb128 0x16
 3166 0171 34       		.uleb128 0x34
 3167 0172 00       		.byte	0
 3168 0173 03       		.uleb128 0x3
 3169 0174 0E       		.uleb128 0xe
 3170 0175 3A       		.uleb128 0x3a
 3171 0176 0B       		.uleb128 0xb
 3172 0177 3B       		.uleb128 0x3b
 3173 0178 0B       		.uleb128 0xb
 3174 0179 49       		.uleb128 0x49
 3175 017a 13       		.uleb128 0x13
 3176 017b 3F       		.uleb128 0x3f
 3177 017c 19       		.uleb128 0x19
 3178 017d 3C       		.uleb128 0x3c
 3179 017e 19       		.uleb128 0x19
 3180 017f 00       		.byte	0
 3181 0180 00       		.byte	0
 3182 0181 17       		.uleb128 0x17
 3183 0182 34       		.uleb128 0x34
 3184 0183 00       		.byte	0
 3185 0184 03       		.uleb128 0x3
 3186 0185 0E       		.uleb128 0xe
 3187 0186 3A       		.uleb128 0x3a
 3188 0187 0B       		.uleb128 0xb
 3189 0188 3B       		.uleb128 0x3b
 3190 0189 0B       		.uleb128 0xb
 3191 018a 49       		.uleb128 0x49
 3192 018b 13       		.uleb128 0x13
 3193 018c 3F       		.uleb128 0x3f
 3194 018d 19       		.uleb128 0x19
 3195 018e 02       		.uleb128 0x2
 3196 018f 18       		.uleb128 0x18
 3197 0190 00       		.byte	0
 3198 0191 00       		.byte	0
 3199 0192 00       		.byte	0
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 107


 3200              		.section	.debug_aranges,"",%progbits
 3201 0000 EC000000 		.4byte	0xec
 3202 0004 0200     		.2byte	0x2
 3203 0006 00000000 		.4byte	.Ldebug_info0
 3204 000a 04       		.byte	0x4
 3205 000b 00       		.byte	0
 3206 000c 0000     		.2byte	0
 3207 000e 0000     		.2byte	0
 3208 0010 00000000 		.4byte	.LFB34
 3209 0014 7C000000 		.4byte	.LFE34-.LFB34
 3210 0018 00000000 		.4byte	.LFB35
 3211 001c 2A000000 		.4byte	.LFE35-.LFB35
 3212 0020 00000000 		.4byte	.LFB36
 3213 0024 28000000 		.4byte	.LFE36-.LFB36
 3214 0028 00000000 		.4byte	.LFB37
 3215 002c 50000000 		.4byte	.LFE37-.LFB37
 3216 0030 00000000 		.4byte	.LFB38
 3217 0034 DC010000 		.4byte	.LFE38-.LFB38
 3218 0038 00000000 		.4byte	.LFB39
 3219 003c 18000000 		.4byte	.LFE39-.LFB39
 3220 0040 00000000 		.4byte	.LFB40
 3221 0044 44000000 		.4byte	.LFE40-.LFB40
 3222 0048 00000000 		.4byte	.LFB41
 3223 004c 58000000 		.4byte	.LFE41-.LFB41
 3224 0050 00000000 		.4byte	.LFB42
 3225 0054 1C000000 		.4byte	.LFE42-.LFB42
 3226 0058 00000000 		.4byte	.LFB43
 3227 005c 28000000 		.4byte	.LFE43-.LFB43
 3228 0060 00000000 		.4byte	.LFB44
 3229 0064 1C000000 		.4byte	.LFE44-.LFB44
 3230 0068 00000000 		.4byte	.LFB45
 3231 006c 28000000 		.4byte	.LFE45-.LFB45
 3232 0070 00000000 		.4byte	.LFB46
 3233 0074 12000000 		.4byte	.LFE46-.LFB46
 3234 0078 00000000 		.4byte	.LFB47
 3235 007c 12000000 		.4byte	.LFE47-.LFB47
 3236 0080 00000000 		.4byte	.LFB48
 3237 0084 12000000 		.4byte	.LFE48-.LFB48
 3238 0088 00000000 		.4byte	.LFB49
 3239 008c 12000000 		.4byte	.LFE49-.LFB49
 3240 0090 00000000 		.4byte	.LFB50
 3241 0094 0C010000 		.4byte	.LFE50-.LFB50
 3242 0098 00000000 		.4byte	.LFB51
 3243 009c 42000000 		.4byte	.LFE51-.LFB51
 3244 00a0 00000000 		.4byte	.LFB52
 3245 00a4 36000000 		.4byte	.LFE52-.LFB52
 3246 00a8 00000000 		.4byte	.LFB53
 3247 00ac 5C000000 		.4byte	.LFE53-.LFB53
 3248 00b0 00000000 		.4byte	.LFB54
 3249 00b4 5C000000 		.4byte	.LFE54-.LFB54
 3250 00b8 00000000 		.4byte	.LFB55
 3251 00bc 3C000000 		.4byte	.LFE55-.LFB55
 3252 00c0 00000000 		.4byte	.LFB56
 3253 00c4 1C000000 		.4byte	.LFE56-.LFB56
 3254 00c8 00000000 		.4byte	.LFB57
 3255 00cc 1C000000 		.4byte	.LFE57-.LFB57
 3256 00d0 00000000 		.4byte	.LFB58
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 108


 3257 00d4 12000000 		.4byte	.LFE58-.LFB58
 3258 00d8 00000000 		.4byte	.LFB59
 3259 00dc 14000000 		.4byte	.LFE59-.LFB59
 3260 00e0 00000000 		.4byte	.LFB60
 3261 00e4 14000000 		.4byte	.LFE60-.LFB60
 3262 00e8 00000000 		.4byte	0
 3263 00ec 00000000 		.4byte	0
 3264              		.section	.debug_ranges,"",%progbits
 3265              	.Ldebug_ranges0:
 3266 0000 00000000 		.4byte	.LFB34
 3267 0004 7C000000 		.4byte	.LFE34
 3268 0008 00000000 		.4byte	.LFB35
 3269 000c 2A000000 		.4byte	.LFE35
 3270 0010 00000000 		.4byte	.LFB36
 3271 0014 28000000 		.4byte	.LFE36
 3272 0018 00000000 		.4byte	.LFB37
 3273 001c 50000000 		.4byte	.LFE37
 3274 0020 00000000 		.4byte	.LFB38
 3275 0024 DC010000 		.4byte	.LFE38
 3276 0028 00000000 		.4byte	.LFB39
 3277 002c 18000000 		.4byte	.LFE39
 3278 0030 00000000 		.4byte	.LFB40
 3279 0034 44000000 		.4byte	.LFE40
 3280 0038 00000000 		.4byte	.LFB41
 3281 003c 58000000 		.4byte	.LFE41
 3282 0040 00000000 		.4byte	.LFB42
 3283 0044 1C000000 		.4byte	.LFE42
 3284 0048 00000000 		.4byte	.LFB43
 3285 004c 28000000 		.4byte	.LFE43
 3286 0050 00000000 		.4byte	.LFB44
 3287 0054 1C000000 		.4byte	.LFE44
 3288 0058 00000000 		.4byte	.LFB45
 3289 005c 28000000 		.4byte	.LFE45
 3290 0060 00000000 		.4byte	.LFB46
 3291 0064 12000000 		.4byte	.LFE46
 3292 0068 00000000 		.4byte	.LFB47
 3293 006c 12000000 		.4byte	.LFE47
 3294 0070 00000000 		.4byte	.LFB48
 3295 0074 12000000 		.4byte	.LFE48
 3296 0078 00000000 		.4byte	.LFB49
 3297 007c 12000000 		.4byte	.LFE49
 3298 0080 00000000 		.4byte	.LFB50
 3299 0084 0C010000 		.4byte	.LFE50
 3300 0088 00000000 		.4byte	.LFB51
 3301 008c 42000000 		.4byte	.LFE51
 3302 0090 00000000 		.4byte	.LFB52
 3303 0094 36000000 		.4byte	.LFE52
 3304 0098 00000000 		.4byte	.LFB53
 3305 009c 5C000000 		.4byte	.LFE53
 3306 00a0 00000000 		.4byte	.LFB54
 3307 00a4 5C000000 		.4byte	.LFE54
 3308 00a8 00000000 		.4byte	.LFB55
 3309 00ac 3C000000 		.4byte	.LFE55
 3310 00b0 00000000 		.4byte	.LFB56
 3311 00b4 1C000000 		.4byte	.LFE56
 3312 00b8 00000000 		.4byte	.LFB57
 3313 00bc 1C000000 		.4byte	.LFE57
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 109


 3314 00c0 00000000 		.4byte	.LFB58
 3315 00c4 12000000 		.4byte	.LFE58
 3316 00c8 00000000 		.4byte	.LFB59
 3317 00cc 14000000 		.4byte	.LFE59
 3318 00d0 00000000 		.4byte	.LFB60
 3319 00d4 14000000 		.4byte	.LFE60
 3320 00d8 00000000 		.4byte	0
 3321 00dc 00000000 		.4byte	0
 3322              		.section	.debug_line,"",%progbits
 3323              	.Ldebug_line0:
 3324 0000 3F030000 		.section	.debug_str,"MS",%progbits,1
 3324      02004C00 
 3324      00000201 
 3324      FB0E0D00 
 3324      01010101 
 3325              	.LASF78:
 3326 0000 43617053 		.ascii	"CapSense_1_rawDataIndex\000"
 3326      656E7365 
 3326      5F315F72 
 3326      61774461 
 3326      7461496E 
 3327              	.LASF71:
 3328 0018 43617053 		.ascii	"CapSense_1_sensorOnMask\000"
 3328      656E7365 
 3328      5F315F73 
 3328      656E736F 
 3328      724F6E4D 
 3329              	.LASF2:
 3330 0030 73686F72 		.ascii	"short int\000"
 3330      7420696E 
 3330      7400
 3331              	.LASF28:
 3332 003a 66696C74 		.ascii	"filteredRawData\000"
 3332      65726564 
 3332      52617744 
 3332      61746100 
 3333              	.LASF65:
 3334 004a 43617053 		.ascii	"CapSense_1_sensorRaw\000"
 3334      656E7365 
 3334      5F315F73 
 3334      656E736F 
 3334      72526177 
 3335              	.LASF72:
 3336 005f 43617053 		.ascii	"CapSense_1_lowBaselineResetCnt\000"
 3336      656E7365 
 3336      5F315F6C 
 3336      6F774261 
 3336      73656C69 
 3337              	.LASF52:
 3338 007e 72617749 		.ascii	"rawIndex\000"
 3338      6E646578 
 3338      00
 3339              	.LASF45:
 3340 0087 43617053 		.ascii	"CapSense_1_GetNegativeNoiseThreshold\000"
 3340      656E7365 
 3340      5F315F47 
 3340      65744E65 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 110


 3340      67617469 
 3341              	.LASF58:
 3342 00ac 43617053 		.ascii	"CapSense_1_IIR4Filter\000"
 3342      656E7365 
 3342      5F315F49 
 3342      49523446 
 3342      696C7465 
 3343              	.LASF60:
 3344 00c2 43617053 		.ascii	"CapSense_1_GetLowBaselineReset\000"
 3344      656E7365 
 3344      5F315F47 
 3344      65744C6F 
 3344      77426173 
 3345              	.LASF53:
 3346 00e1 6E756D4F 		.ascii	"numOfSensors\000"
 3346      6653656E 
 3346      736F7273 
 3346      00
 3347              	.LASF41:
 3348 00ee 76616C75 		.ascii	"value\000"
 3348      6500
 3349              	.LASF63:
 3350 00f4 43617053 		.ascii	"CapSense_1_DisableRawDataFilters\000"
 3350      656E7365 
 3350      5F315F44 
 3350      69736162 
 3350      6C655261 
 3351              	.LASF36:
 3352 0115 43617053 		.ascii	"CapSense_1_SetBaselineData\000"
 3352      656E7365 
 3352      5F315F53 
 3352      65744261 
 3352      73656C69 
 3353              	.LASF10:
 3354 0130 75696E74 		.ascii	"uint16\000"
 3354      313600
 3355              	.LASF70:
 3356 0137 43617053 		.ascii	"CapSense_1_sensorSignal\000"
 3356      656E7365 
 3356      5F315F73 
 3356      656E736F 
 3356      72536967 
 3357              	.LASF19:
 3358 014f 73656E73 		.ascii	"sensor\000"
 3358      6F7200
 3359              	.LASF21:
 3360 0156 77696467 		.ascii	"widget\000"
 3360      657400
 3361              	.LASF9:
 3362 015d 75696E74 		.ascii	"uint8\000"
 3362      3800
 3363              	.LASF76:
 3364 0163 43617053 		.ascii	"CapSense_1_hysteresis\000"
 3364      656E7365 
 3364      5F315F68 
 3364      79737465 
 3364      72657369 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 111


 3365              	.LASF66:
 3366 0179 43617053 		.ascii	"CapSense_1_sensorEnableMask\000"
 3366      656E7365 
 3366      5F315F73 
 3366      656E736F 
 3366      72456E61 
 3367              	.LASF74:
 3368 0195 43617053 		.ascii	"CapSense_1_fingerThreshold\000"
 3368      656E7365 
 3368      5F315F66 
 3368      696E6765 
 3368      72546872 
 3369              	.LASF12:
 3370 01b0 666C6F61 		.ascii	"float\000"
 3370      7400
 3371              	.LASF25:
 3372 01b6 63616C63 		.ascii	"calc\000"
 3372      00
 3373              	.LASF6:
 3374 01bb 6C6F6E67 		.ascii	"long long int\000"
 3374      206C6F6E 
 3374      6720696E 
 3374      7400
 3375              	.LASF81:
 3376 01c9 43617053 		.ascii	"CapSense_1_enableRawFilters\000"
 3376      656E7365 
 3376      5F315F65 
 3376      6E61626C 
 3376      65526177 
 3377              	.LASF51:
 3378 01e5 43617053 		.ascii	"CapSense_1_CheckIsWidgetActive\000"
 3378      656E7365 
 3378      5F315F43 
 3378      6865636B 
 3378      49735769 
 3379              	.LASF38:
 3380 0204 43617053 		.ascii	"CapSense_1_GetBaselineData\000"
 3380      656E7365 
 3380      5F315F47 
 3380      65744261 
 3380      73656C69 
 3381              	.LASF75:
 3382 021f 43617053 		.ascii	"CapSense_1_noiseThreshold\000"
 3382      656E7365 
 3382      5F315F6E 
 3382      6F697365 
 3382      54687265 
 3383              	.LASF27:
 3384 0239 74656D70 		.ascii	"tempRaw\000"
 3384      52617700 
 3385              	.LASF62:
 3386 0241 43617053 		.ascii	"CapSense_1_EnableRawDataFilters\000"
 3386      656E7365 
 3386      5F315F45 
 3386      6E61626C 
 3386      65526177 
 3387              	.LASF46:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 112


 3388 0261 43617053 		.ascii	"CapSense_1_CheckIsSensorActive\000"
 3388      656E7365 
 3388      5F315F43 
 3388      6865636B 
 3388      49735365 
 3389              	.LASF83:
 3390 0280 47656E65 		.ascii	"Generated_Source\\PSoC4\\CapSense_1_CSHL.c\000"
 3390      72617465 
 3390      645F536F 
 3390      75726365 
 3390      5C50536F 
 3391              	.LASF82:
 3392 02a9 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3392      43313120 
 3392      352E342E 
 3392      31203230 
 3392      31363036 
 3393 02dc 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3393      20726576 
 3393      6973696F 
 3393      6E203233 
 3393      37373135 
 3394 030f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3394      66756E63 
 3394      74696F6E 
 3394      2D736563 
 3394      74696F6E 
 3395              	.LASF1:
 3396 0337 756E7369 		.ascii	"unsigned char\000"
 3396      676E6564 
 3396      20636861 
 3396      7200
 3397              	.LASF50:
 3398 0345 68797374 		.ascii	"hysteresis\000"
 3398      65726573 
 3398      697300
 3399              	.LASF61:
 3400 0350 43617053 		.ascii	"CapSense_1_GetDebounce\000"
 3400      656E7365 
 3400      5F315F47 
 3400      65744465 
 3400      626F756E 
 3401              	.LASF16:
 3402 0367 6C6F6E67 		.ascii	"long double\000"
 3402      20646F75 
 3402      626C6500 
 3403              	.LASF30:
 3404 0373 43617053 		.ascii	"CapSense_1_UpdateSensorBaseline\000"
 3404      656E7365 
 3404      5F315F55 
 3404      70646174 
 3404      6553656E 
 3405              	.LASF43:
 3406 0393 43617053 		.ascii	"CapSense_1_GetNoiseThreshold\000"
 3406      656E7365 
 3406      5F315F47 
 3406      65744E6F 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 113


 3406      69736554 
 3407              	.LASF56:
 3408 03b0 43617053 		.ascii	"CapSense_1_EnableWidget\000"
 3408      656E7365 
 3408      5F315F45 
 3408      6E61626C 
 3408      65576964 
 3409              	.LASF73:
 3410 03c8 43617053 		.ascii	"CapSense_1_lowBaselineReset\000"
 3410      656E7365 
 3410      5F315F6C 
 3410      6F774261 
 3410      73656C69 
 3411              	.LASF47:
 3412 03e4 6465626F 		.ascii	"debounce\000"
 3412      756E6365 
 3412      00
 3413              	.LASF0:
 3414 03ed 7369676E 		.ascii	"signed char\000"
 3414      65642063 
 3414      68617200 
 3415              	.LASF29:
 3416 03f9 6E6F6973 		.ascii	"noiseThreshold\000"
 3416      65546872 
 3416      6573686F 
 3416      6C6400
 3417              	.LASF7:
 3418 0408 6C6F6E67 		.ascii	"long long unsigned int\000"
 3418      206C6F6E 
 3418      6720756E 
 3418      7369676E 
 3418      65642069 
 3419              	.LASF34:
 3420 041f 66697273 		.ascii	"firstSensor\000"
 3420      7453656E 
 3420      736F7200 
 3421              	.LASF8:
 3422 042b 756E7369 		.ascii	"unsigned int\000"
 3422      676E6564 
 3422      20696E74 
 3422      00
 3423              	.LASF54:
 3424 0438 73746174 		.ascii	"state\000"
 3424      6500
 3425              	.LASF5:
 3426 043e 6C6F6E67 		.ascii	"long unsigned int\000"
 3426      20756E73 
 3426      69676E65 
 3426      6420696E 
 3426      7400
 3427              	.LASF18:
 3428 0450 43617053 		.ascii	"CapSense_1_InitializeSensorBaseline\000"
 3428      656E7365 
 3428      5F315F49 
 3428      6E697469 
 3428      616C697A 
 3429              	.LASF59:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 114


 3430 0474 43617053 		.ascii	"CapSense_1_GetWidgetNumber\000"
 3430      656E7365 
 3430      5F315F47 
 3430      65745769 
 3430      64676574 
 3431              	.LASF23:
 3432 048f 69735365 		.ascii	"isSensorEnabled\000"
 3432      6E736F72 
 3432      456E6162 
 3432      6C656400 
 3433              	.LASF14:
 3434 049f 63686172 		.ascii	"char\000"
 3434      00
 3435              	.LASF4:
 3436 04a4 6C6F6E67 		.ascii	"long int\000"
 3436      20696E74 
 3436      00
 3437              	.LASF55:
 3438 04ad 43617053 		.ascii	"CapSense_1_CheckIsAnyWidgetActive\000"
 3438      656E7365 
 3438      5F315F43 
 3438      6865636B 
 3438      4973416E 
 3439              	.LASF17:
 3440 04cf 43617053 		.ascii	"CapSense_1_BaseInit\000"
 3440      656E7365 
 3440      5F315F42 
 3440      61736549 
 3440      6E697400 
 3441              	.LASF84:
 3442 04e3 433A5C55 		.ascii	"C:\\Users\\d4hhm\\Documents\\Care-support-system\\P"
 3442      73657273 
 3442      5C643468 
 3442      686D5C44 
 3442      6F63756D 
 3443 0511 65726970 		.ascii	"eripheral\\Care_support_system_peripheral.cydsn\000"
 3443      68657261 
 3443      6C5C4361 
 3443      72655F73 
 3443      7570706F 
 3444              	.LASF3:
 3445 0540 73686F72 		.ascii	"short unsigned int\000"
 3445      7420756E 
 3445      7369676E 
 3445      65642069 
 3445      6E7400
 3446              	.LASF35:
 3447 0553 6C617374 		.ascii	"lastSensor\000"
 3447      53656E73 
 3447      6F7200
 3448              	.LASF20:
 3449 055e 43617053 		.ascii	"CapSense_1_InitializeAllBaselines\000"
 3449      656E7365 
 3449      5F315F49 
 3449      6E697469 
 3449      616C697A 
 3450              	.LASF37:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 115


 3451 0580 64617461 		.ascii	"data\000"
 3451      00
 3452              	.LASF69:
 3453 0585 43617053 		.ascii	"CapSense_1_sensorBaselineLow\000"
 3453      656E7365 
 3453      5F315F73 
 3453      656E736F 
 3453      72426173 
 3454              	.LASF57:
 3455 05a2 43617053 		.ascii	"CapSense_1_DisableWidget\000"
 3455      656E7365 
 3455      5F315F44 
 3455      69736162 
 3455      6C655769 
 3456              	.LASF68:
 3457 05bb 43617053 		.ascii	"CapSense_1_sensorBaseline\000"
 3457      656E7365 
 3457      5F315F73 
 3457      656E736F 
 3457      72426173 
 3458              	.LASF79:
 3459 05d5 43617053 		.ascii	"CapSense_1_numberOfSensors\000"
 3459      656E7365 
 3459      5F315F6E 
 3459      756D6265 
 3459      724F6653 
 3460              	.LASF32:
 3461 05f0 43617053 		.ascii	"CapSense_1_UpdateWidgetBaseline\000"
 3461      656E7365 
 3461      5F315F55 
 3461      70646174 
 3461      65576964 
 3462              	.LASF11:
 3463 0610 75696E74 		.ascii	"uint32\000"
 3463      333200
 3464              	.LASF42:
 3465 0617 43617053 		.ascii	"CapSense_1_GetFingerThreshold\000"
 3465      656E7365 
 3465      5F315F47 
 3465      65744669 
 3465      6E676572 
 3466              	.LASF26:
 3467 0635 7369676E 		.ascii	"sign\000"
 3467      00
 3468              	.LASF64:
 3469 063a 43617053 		.ascii	"CapSense_1_debounceCounter\000"
 3469      656E7365 
 3469      5F315F64 
 3469      65626F75 
 3469      6E636543 
 3470              	.LASF44:
 3471 0655 43617053 		.ascii	"CapSense_1_GetFingerHysteresis\000"
 3471      656E7365 
 3471      5F315F47 
 3471      65744669 
 3471      6E676572 
 3472              	.LASF31:
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 116


 3473 0674 43617053 		.ascii	"CapSense_1_UpdateEnabledBaselines\000"
 3473      656E7365 
 3473      5F315F55 
 3473      70646174 
 3473      65456E61 
 3474              	.LASF22:
 3475 0696 43617053 		.ascii	"CapSense_1_InitializeEnabledBaselines\000"
 3475      656E7365 
 3475      5F315F49 
 3475      6E697469 
 3475      616C697A 
 3476              	.LASF80:
 3477 06bc 43617053 		.ascii	"CapSense_1_rawFilterData1\000"
 3477      656E7365 
 3477      5F315F72 
 3477      61774669 
 3477      6C746572 
 3478              	.LASF39:
 3479 06d6 43617053 		.ascii	"CapSense_1_GetDiffCountData\000"
 3479      656E7365 
 3479      5F315F47 
 3479      65744469 
 3479      6666436F 
 3480              	.LASF15:
 3481 06f2 73697A65 		.ascii	"sizetype\000"
 3481      74797065 
 3481      00
 3482              	.LASF77:
 3483 06fb 43617053 		.ascii	"CapSense_1_debounce\000"
 3483      656E7365 
 3483      5F315F64 
 3483      65626F75 
 3483      6E636500 
 3484              	.LASF48:
 3485 070f 6465626F 		.ascii	"debounceIndex\000"
 3485      756E6365 
 3485      496E6465 
 3485      7800
 3486              	.LASF13:
 3487 071d 646F7562 		.ascii	"double\000"
 3487      6C6500
 3488              	.LASF33:
 3489 0724 73656E73 		.ascii	"sensorsPerWidget\000"
 3489      6F727350 
 3489      65725769 
 3489      64676574 
 3489      00
 3490              	.LASF40:
 3491 0735 43617053 		.ascii	"CapSense_1_SetDiffCountData\000"
 3491      656E7365 
 3491      5F315F53 
 3491      65744469 
 3491      6666436F 
 3492              	.LASF67:
 3493 0751 43617053 		.ascii	"CapSense_1_widgetNumber\000"
 3493      656E7365 
 3493      5F315F77 
ARM GAS  C:\Users\d4hhm\AppData\Local\Temp\ccVnSN5d.s 			page 117


 3493      69646765 
 3493      744E756D 
 3494              	.LASF49:
 3495 0769 66696E67 		.ascii	"fingerThreshold\000"
 3495      65725468 
 3495      72657368 
 3495      6F6C6400 
 3496              	.LASF24:
 3497 0779 43617053 		.ascii	"CapSense_1_UpdateBaselineNoThreshold\000"
 3497      656E7365 
 3497      5F315F55 
 3497      70646174 
 3497      65426173 
 3498              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
